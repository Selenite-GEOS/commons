RsFile {
    name: "",
    namespace: None,
    types: [
        TupleStruct(
            TupleStruct {
                name: "R1Tensor",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*){2}[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "R1Tensor32",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*){2}[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "R2SymTensor",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*){5}[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_dataRepository_PlotLevel",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[+-]?[\\d]+",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "globalIndex",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[+-]?[\\d]+",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "globalIndex_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "globalIndex_array2d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "globalIndex_array3d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "groupName",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[a-zA-Z0-9.\\-_]+",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "groupNameRef",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[a-zA-Z0-9.\\-_/]*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "groupNameRef_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([a-zA-Z0-9.\\-_/]*\\s*,\\s*)*[a-zA-Z0-9.\\-_/]*\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "integer",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[+-]?[\\d]+",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "integer_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "integer_array2d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "integer_array3d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "localIndex",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[+-]?[\\d]+",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "localIndex_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "localIndex_array2d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "localIndex_array3d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "mapPair",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[^,\\{\\}\\s]*\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "path",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[^*?<>\\|:\";,\\s]*\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "path_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([^*?<>\\|:\";,\\s]+\\s*,\\s*)*[^*?<>\\|:\";,\\s]+\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real32",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real32_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real32_array2d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real32_array3d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real64",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real64_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real64_array2d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real64_array3d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "real64_array4d",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "string",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|[^,\\{\\}\\s]*\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "string_array",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|\\s*\\{\\s*(([^,\\{\\}\\s]+\\s*,\\s*)*[^,\\{\\}\\s]+\\s*)?\\}\\s*",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Alias(
            Alias {
                name: "Problem",
                original: "ProblemType",
                comment: None,
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "ProblemTypeChoice",
                cases: [
                    EnumCase {
                        name: "Events",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "EventsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "FieldSpecifications",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FieldSpecificationsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Functions",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FunctionsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Geometry",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "GeometryType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Mesh",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MeshType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NumericalMethods",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NumericalMethodsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Outputs",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "OutputsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Solvers",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolversType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Tasks",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TasksType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Constitutive",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ConstitutiveType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElementRegions",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElementRegionsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ParticleRegions",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParticleRegionsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Included",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "IncludedType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Parameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Benchmarks",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BenchmarksType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ProblemType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "ProblemTypeChoice",
                                        type_name: "ProblemTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "EventsTypeChoice",
                cases: [
                    EnumCase {
                        name: "HaltEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HaltEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PeriodicEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PeriodicEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SoloEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SoloEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "EventsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxCycle",
                                        type_name: "integer",
                                        comment: Some(
                                            "maxCycle => Maximum simulation cycle for the global event loop.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxTime => Maximum simulation time for the global event loop.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "minTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "minTime => Start simulation time for the global event loop.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeOutputFormat",
                                        type_name: "geos_EventManager_TimeOutputFormat",
                                        comment: Some(
                                            "timeOutputFormat => Format of the time in the GEOS log.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "EventsTypeChoice",
                                        type_name: "EventsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "HaltEventTypeChoice",
                cases: [
                    EnumCase {
                        name: "HaltEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HaltEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PeriodicEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PeriodicEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SoloEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SoloEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "HaltEventType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "beginTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "beginTime => Start time of this event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "endTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "endTime => End time of this event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "finalDtStretch",
                                        type_name: "real64",
                                        comment: Some(
                                            "finalDtStretch => Allow the final dt request for this event to grow by this percentage to match the endTime exactly.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forceDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "forceDt => While active, this event will request this timestep value (ignoring any children/targets requests).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxEventDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxEventDt => While active, this event will request a timestep <= this value (depending upon any child/target requests).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxRuntime",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxRuntime => The maximum allowable runtime for the job.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "target",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "target => Name of the object to be executed when the event criteria are met.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetExactStartStop",
                                        type_name: "integer",
                                        comment: Some(
                                            "targetExactStartStop => If this option is set, the event will reduce its timestep requests to match any specified beginTime/endTimes exactly.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "HaltEventTypeChoice",
                                        type_name: "HaltEventTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "PeriodicEventTypeChoice",
                cases: [
                    EnumCase {
                        name: "HaltEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HaltEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PeriodicEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PeriodicEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SoloEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SoloEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "PeriodicEventType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "beginTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "beginTime => Start time of this event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cycleFrequency",
                                        type_name: "integer",
                                        comment: Some(
                                            "cycleFrequency => Event application frequency (cycle, default)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "endTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "endTime => End time of this event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "finalDtStretch",
                                        type_name: "real64",
                                        comment: Some(
                                            "finalDtStretch => Allow the final dt request for this event to grow by this percentage to match the endTime exactly.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forceDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "forceDt => While active, this event will request this timestep value (ignoring any children/targets requests).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "function",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "function => Name of an optional function to evaluate when the time/cycle criteria are met.If the result is greater than the specified eventThreshold, the function will continue to execute.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxEventDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxEventDt => While active, this event will request a timestep <= this value (depending upon any child/target requests).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "object",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "object => If the optional function requires an object as an input, specify its path here.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "set",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "set => If the optional function is applied to an object, specify the setname to evaluate (default = everything).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stat",
                                        type_name: "integer",
                                        comment: Some(
                                            "stat => If the optional function is applied to an object, specify the statistic to compare to the eventThreshold.The current options include: min, avg, and max.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "target",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "target => Name of the object to be executed when the event criteria are met.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetExactStartStop",
                                        type_name: "integer",
                                        comment: Some(
                                            "targetExactStartStop => If this option is set, the event will reduce its timestep requests to match any specified beginTime/endTimes exactly.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetExactTimestep",
                                        type_name: "integer",
                                        comment: Some(
                                            "targetExactTimestep => If this option is set, the event will reduce its timestep requests to match the specified timeFrequency perfectly: dt_request = min(dt_request, t_last + time_frequency - time)).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "threshold",
                                        type_name: "real64",
                                        comment: Some(
                                            "threshold => If the optional function is used, the event will execute if the value returned by the function exceeds this threshold.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeFrequency",
                                        type_name: "real64",
                                        comment: Some(
                                            "timeFrequency => Event application frequency (time).  Note: if this value is specified, it will override any cycle-based behavior.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "PeriodicEventTypeChoice",
                                        type_name: "PeriodicEventTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SoloEventTypeChoice",
                cases: [
                    EnumCase {
                        name: "HaltEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HaltEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PeriodicEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PeriodicEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SoloEvent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SoloEventType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SoloEventType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "beginTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "beginTime => Start time of this event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "endTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "endTime => End time of this event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "finalDtStretch",
                                        type_name: "real64",
                                        comment: Some(
                                            "finalDtStretch => Allow the final dt request for this event to grow by this percentage to match the endTime exactly.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forceDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "forceDt => While active, this event will request this timestep value (ignoring any children/targets requests).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxEventDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxEventDt => While active, this event will request a timestep <= this value (depending upon any child/target requests).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "target",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "target => Name of the object to be executed when the event criteria are met.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetCycle",
                                        type_name: "integer",
                                        comment: Some(
                                            "targetCycle => Targeted cycle to execute the event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetExactStartStop",
                                        type_name: "integer",
                                        comment: Some(
                                            "targetExactStartStop => If this option is set, the event will reduce its timestep requests to match any specified beginTime/endTimes exactly.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetExactTimestep",
                                        type_name: "integer",
                                        comment: Some(
                                            "targetExactTimestep => If this option is set, the event will reduce its timestep requests to match the specified execution time exactly: dt_request = min(dt_request, t_target - time)).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetTime",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetTime => Targeted time to execute the event.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SoloEventTypeChoice",
                                        type_name: "SoloEventTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_EventManager_TimeOutputFormat",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|seconds|minutes|hours|days|years|full",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "FieldSpecificationsTypeChoice",
                cases: [
                    EnumCase {
                        name: "Aquifer",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "AquiferType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Dirichlet",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DirichletType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "FieldSpecification",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FieldSpecificationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "HydrostaticEquilibrium",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HydrostaticEquilibriumType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PML",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PMLType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SourceFlux",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SourceFluxType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Traction",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TractionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "FieldSpecificationsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "FieldSpecificationsTypeChoice",
                                        type_name: "FieldSpecificationsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "AquiferType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "allowAllPhasesIntoAquifer",
                            type_name: "integer",
                            comment: Some(
                                "allowAllPhasesIntoAquifer => Flag to allow all phases to flow into the aquifer. \nThis flag only matters for the configuration in which flow is from reservoir to aquifer. \n    - If the flag is equal to 1, then all phases, including non-aqueous phases, are allowed to flow into the aquifer. \n     - If the flag is equal to 0, then only the water phase is allowed to flow into the aquifer. \nIf you are in a configuration in which flow is from reservoir to aquifer and you expect non-aqueous phases to saturate the reservoir cells next to the aquifer, set this flag to 1. \nThis keyword is ignored for single-phase flow simulations",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "aquiferAngle",
                            type_name: "real64",
                            comment: Some(
                                "aquiferAngle => Angle subtended by the aquifer boundary from the center of the reservoir [degress]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferElevation",
                            type_name: "real64",
                            comment: Some(
                                "aquiferElevation => Aquifer elevation (positive going upward) [m]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferInitialPressure",
                            type_name: "real64",
                            comment: Some(
                                "aquiferInitialPressure => Aquifer initial pressure [Pa]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferInnerRadius",
                            type_name: "real64",
                            comment: Some(
                                "aquiferInnerRadius => Aquifer inner radius [m]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferPermeability",
                            type_name: "real64",
                            comment: Some(
                                "aquiferPermeability => Aquifer permeability [m^2]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferPorosity",
                            type_name: "real64",
                            comment: Some(
                                "aquiferPorosity => Aquifer porosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferThickness",
                            type_name: "real64",
                            comment: Some(
                                "aquiferThickness => Aquifer thickness [m]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferTotalCompressibility",
                            type_name: "real64",
                            comment: Some(
                                "aquiferTotalCompressibility => Aquifer total compressibility (rock and fluid) [Pa^-1]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferWaterDensity",
                            type_name: "real64",
                            comment: Some(
                                "aquiferWaterDensity => Aquifer water density [kg.m^-3]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "aquiferWaterPhaseComponentFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "aquiferWaterPhaseComponentFraction => Aquifer water phase component fraction. This keyword is ignored for single-phase flow simulations.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "aquiferWaterPhaseComponentNames",
                            type_name: "string_array",
                            comment: Some(
                                "aquiferWaterPhaseComponentNames => Aquifer water phase component names. This keyword is ignored for single-phase flow simulations.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "aquiferWaterViscosity",
                            type_name: "real64",
                            comment: Some(
                                "aquiferWaterViscosity => Aquifer water viscosity [Pa.s]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialCondition",
                            type_name: "integer",
                            comment: Some(
                                "initialCondition => Boundary condition is applied as an initial condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "pressureInfluenceFunctionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "pressureInfluenceFunctionName => Name of the table describing the pressure influence function\n. If not provided, we use a default pressure influence function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => Name of sets that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DirichletType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "component",
                            type_name: "integer",
                            comment: Some(
                                "component => Component of field (if tensor) to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "fieldName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "fieldName => Name of field that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialCondition",
                            type_name: "integer",
                            comment: Some(
                                "initialCondition => Boundary condition is applied as an initial condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => Path to the target field",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => Name of sets that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "FieldSpecificationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "component",
                            type_name: "integer",
                            comment: Some(
                                "component => Component of field (if tensor) to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "fieldName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "fieldName => Name of field that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialCondition",
                            type_name: "integer",
                            comment: Some(
                                "initialCondition => Boundary condition is applied as an initial condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => Path to the target field",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => Name of sets that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "HydrostaticEquilibriumType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentFractionVsElevationTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "componentFractionVsElevationTableNames => Names of the tables specifying the (component fraction vs elevation) relationship for each component",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => Names of the fluid components",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "datumElevation",
                            type_name: "real64",
                            comment: Some(
                                "datumElevation => Datum elevation [m]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "datumPressure",
                            type_name: "real64",
                            comment: Some(
                                "datumPressure => Datum pressure [Pa]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "elevationIncrementInHydrostaticPressureTable",
                            type_name: "real64",
                            comment: Some(
                                "elevationIncrementInHydrostaticPressureTable => Elevation increment [m] in the hydrostatic pressure table constructed internally",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "equilibrationTolerance",
                            type_name: "real64",
                            comment: Some(
                                "equilibrationTolerance => Tolerance in the fixed-point iteration scheme used for hydrostatic initialization",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialPhaseName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "initialPhaseName => Name of the phase initially saturating the reservoir",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxNumberOfEquilibrationIterations",
                            type_name: "integer",
                            comment: Some(
                                "maxNumberOfEquilibrationIterations => Maximum number of equilibration iterations",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => Path to the target field",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "temperatureVsElevationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "temperatureVsElevationTableName => Name of the table specifying the (temperature [K] vs elevation) relationship",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PMLType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "component",
                            type_name: "integer",
                            comment: Some(
                                "component => Component of field (if tensor) to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => Path to the target field",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "reflectivity",
                            type_name: "real32",
                            comment: Some(
                                "reflectivity => Desired reflectivity of the PML region, used to compute the damping profile",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => Name of sets that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "thicknessMaxXYZ",
                            type_name: "R1Tensor32",
                            comment: Some(
                                "thicknessMaxXYZ => Thickness of the PML region, at right, back, and bottom sides, used to compute the damping profile",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "thicknessMinXYZ",
                            type_name: "R1Tensor32",
                            comment: Some(
                                "thicknessMinXYZ => Thickness of the PML region, at left, front, and top sides, used to compute the damping profile",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waveSpeedMaxXYZ",
                            type_name: "R1Tensor32",
                            comment: Some(
                                "waveSpeedMaxXYZ => Wave speed in the PML, at right, back, and bottom sides, used to compute the damping profile",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waveSpeedMinXYZ",
                            type_name: "R1Tensor32",
                            comment: Some(
                                "waveSpeedMinXYZ => Wave speed in the PML, at left, front, and top sides, used to compute the damping profile",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "xMax",
                            type_name: "R1Tensor32",
                            comment: Some(
                                "xMax => Maximum (x,y,z) coordinates of the inner PML boundaries",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "xMin",
                            type_name: "R1Tensor32",
                            comment: Some(
                                "xMin => Minimum (x,y,z) coordinates of the inner PML boundaries",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SourceFluxType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "component",
                            type_name: "integer",
                            comment: Some(
                                "component => Component of field (if tensor) to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialCondition",
                            type_name: "integer",
                            comment: Some(
                                "initialCondition => Boundary condition is applied as an initial condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => Path to the target field",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => Name of sets that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TractionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "bcApplicationTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "bcApplicationTableName => Name of table that specifies the on/off application of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "beginTime",
                            type_name: "real64",
                            comment: Some(
                                "beginTime => Time at which the boundary condition will start being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "direction",
                            type_name: "R1Tensor",
                            comment: Some(
                                "direction => Direction to apply boundary condition to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "endTime",
                            type_name: "real64",
                            comment: Some(
                                "endTime => Time at which the boundary condition will stop being applied.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "functionName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "functionName => Name of function that specifies variation of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialCondition",
                            type_name: "integer",
                            comment: Some(
                                "initialCondition => Boundary condition is applied as an initial condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "inputStress",
                            type_name: "R2SymTensor",
                            comment: Some(
                                "inputStress => Input stress for tractionType = stress",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => Path to the target field",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scale",
                            type_name: "real64",
                            comment: Some(
                                "scale => Scale factor for value of the boundary condition.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => Name of sets that boundary condition is applied to.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tractionType",
                            type_name: "geos_TractionBoundaryCondition_TractionType",
                            comment: Some(
                                "tractionType => Type of traction boundary condition. Options are:\nvector - traction is applied to the faces as specified from the scale and direction,\nnormal - traction is applied to the faces as a pressure specified from the product of scale and the outward face normal,\nstress - traction is applied to the faces as specified by the inner product of input stress and face normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_TractionBoundaryCondition_TractionType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|vector|normal|stress",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "FunctionsTypeChoice",
                cases: [
                    EnumCase {
                        name: "MultivariableTableFunction",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MultivariableTableFunctionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TableFunction",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TableFunctionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "FunctionsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "FunctionsTypeChoice",
                                        type_name: "FunctionsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "MultivariableTableFunctionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "inputVarNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "inputVarNames => Name of fields are input to function.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TableFunctionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "coordinateFiles",
                            type_name: "path_array",
                            comment: Some(
                                "coordinateFiles => List of coordinate file names for ND Table",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "coordinates",
                            type_name: "real64_array",
                            comment: Some(
                                "coordinates => Coordinates inputs for 1D tables",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "inputVarNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "inputVarNames => Name of fields are input to function.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "interpolation",
                            type_name: "geos_TableFunction_InterpolationType",
                            comment: Some(
                                "interpolation => Interpolation method. Valid options:\n* linear\n* nearest\n* upper\n* lower",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "values",
                            type_name: "real64_array",
                            comment: Some(
                                "values => Values for 1D tables",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "voxelFile",
                            type_name: "path",
                            comment: Some(
                                "voxelFile => Voxel file name for ND Table",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_TableFunction_InterpolationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|linear|nearest|upper|lower",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "GeometryTypeChoice",
                cases: [
                    EnumCase {
                        name: "Box",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BoxType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CustomPolarObject",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CustomPolarObjectType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Cylinder",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CylinderType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Disc",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DiscType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Rectangle",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "RectangleType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ThickPlane",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ThickPlaneType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "GeometryType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "GeometryTypeChoice",
                                        type_name: "GeometryTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "BoxType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "strike",
                            type_name: "real64",
                            comment: Some(
                                "strike => The strike angle of the box",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "xMax",
                            type_name: "R1Tensor",
                            comment: Some(
                                "xMax => Maximum (x,y,z) coordinates of the box",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "xMin",
                            type_name: "R1Tensor",
                            comment: Some(
                                "xMin => Minimum (x,y,z) coordinates of the box",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CustomPolarObjectType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "center",
                            type_name: "R1Tensor",
                            comment: Some(
                                "center => (x,y,z) coordinates of the center of the CustomPolarObject",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "coefficients",
                            type_name: "real64_array",
                            comment: Some(
                                "coefficients => Coefficients of the CustomPolarObject function relating the localradius to the angle theta.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "lengthVector",
                            type_name: "R1Tensor",
                            comment: Some(
                                "lengthVector => Tangent vector defining the orthonormal basis along with the normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "normal",
                            type_name: "R1Tensor",
                            comment: Some(
                                "normal => Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tolerance",
                            type_name: "real64",
                            comment: Some(
                                "tolerance => Tolerance to determine if a point sits on the CustomPolarObject or not. It is relative to the maximum dimension of the CustomPolarObject.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "widthVector",
                            type_name: "R1Tensor",
                            comment: Some(
                                "widthVector => Tangent vector defining the orthonormal basis along with the normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CylinderType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "firstFaceCenter",
                            type_name: "R1Tensor",
                            comment: Some(
                                "firstFaceCenter => Center point of the first face of the cylinder",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "innerRadius",
                            type_name: "real64",
                            comment: Some(
                                "innerRadius => Inner radius of the annulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outerRadius",
                            type_name: "real64",
                            comment: Some(
                                "outerRadius => Outer radius of the cylinder",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "secondFaceCenter",
                            type_name: "R1Tensor",
                            comment: Some(
                                "secondFaceCenter => Center point of the second face of the cylinder",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DiscType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "center",
                            type_name: "R1Tensor",
                            comment: Some(
                                "center => (x,y,z) coordinates of the center of the disc",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "lengthVector",
                            type_name: "R1Tensor",
                            comment: Some(
                                "lengthVector => Tangent vector defining the orthonormal basis along with the normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "normal",
                            type_name: "R1Tensor",
                            comment: Some(
                                "normal => Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "radius",
                            type_name: "real64",
                            comment: Some(
                                "radius => Radius of the disc.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tolerance",
                            type_name: "real64",
                            comment: Some(
                                "tolerance => Tolerance to determine if a point sits on the disc or not. It is relative to the maximum dimension of the disc.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "widthVector",
                            type_name: "R1Tensor",
                            comment: Some(
                                "widthVector => Tangent vector defining the orthonormal basis along with the normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "RectangleType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "dimensions",
                            type_name: "real64_array",
                            comment: Some(
                                "dimensions => Length and width of the bounded plane",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "lengthVector",
                            type_name: "R1Tensor",
                            comment: Some(
                                "lengthVector => Tangent vector defining the orthonormal basis along with the normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "normal",
                            type_name: "R1Tensor",
                            comment: Some(
                                "normal => Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "origin",
                            type_name: "R1Tensor",
                            comment: Some(
                                "origin => Origin point (x,y,z) of the plane (basically, any point on the plane)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tolerance",
                            type_name: "real64",
                            comment: Some(
                                "tolerance => Tolerance to determine if a point sits on the plane or not. It is relative to the maximum dimension of the plane.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "widthVector",
                            type_name: "R1Tensor",
                            comment: Some(
                                "widthVector => Tangent vector defining the orthonormal basis along with the normal.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ThickPlaneType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "normal",
                            type_name: "R1Tensor",
                            comment: Some(
                                "normal => Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "origin",
                            type_name: "R1Tensor",
                            comment: Some(
                                "origin => Origin point (x,y,z) of the plane (basically, any point on the plane)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "thickness",
                            type_name: "real64",
                            comment: Some(
                                "thickness => The total thickness of the plane (with half to each side)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "MeshTypeChoice",
                cases: [
                    EnumCase {
                        name: "InternalMesh",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "InternalMeshType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "InternalWellbore",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "InternalWellboreType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ParticleMesh",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParticleMeshType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VTKMesh",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VTKMeshType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "MeshType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "MeshTypeChoice",
                                        type_name: "MeshTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "InternalMeshTypeChoice",
                cases: [
                    EnumCase {
                        name: "InternalWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "InternalWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VTKWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VTKWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "InternalMeshType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cellBlockNames",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "cellBlockNames => Names of each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "elementTypes",
                                        type_name: "string_array",
                                        comment: Some(
                                            "elementTypes => Element types of each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "nx",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "nx => Number of elements in the x-direction within each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "ny",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "ny => Number of elements in the y-direction within each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "nz",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "nz => Number of elements in the z-direction within each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "positionTolerance",
                                        type_name: "real64",
                                        comment: Some(
                                            "positionTolerance => A position tolerance to verify if a node belong to a nodeset",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "trianglePattern",
                                        type_name: "integer",
                                        comment: Some(
                                            "trianglePattern => Pattern by which to decompose the hex mesh into wedges",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "xBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "xBias => Bias of element sizes in the x-direction within each mesh block (dx_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "xCoords",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "xCoords => x-coordinates of each mesh block vertex",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "yBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "yBias => Bias of element sizes in the y-direction within each mesh block (dy_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "yCoords",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "yCoords => y-coordinates of each mesh block vertex",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "zBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "zBias => Bias of element sizes in the z-direction within each mesh block (dz_left=(1+b)*L/N, dz_right=(1-b)*L/N)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "zCoords",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "zCoords => z-coordinates of each mesh block vertex",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "InternalMeshTypeChoice",
                                        type_name: "InternalMeshTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "InternalWellTypeChoice",
                cases: [
                    EnumCase {
                        name: "Perforation",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PerforationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "InternalWellType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "minElementLength",
                                        type_name: "real64",
                                        comment: Some(
                                            "minElementLength => Minimum length of a well element, computed as (segment length / number of elements per segment ) [m]",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "minSegmentLength",
                                        type_name: "real64",
                                        comment: Some(
                                            "minSegmentLength => Minimum length of a well segment [m]",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "numElementsPerSegment",
                                        type_name: "integer",
                                        comment: Some(
                                            "numElementsPerSegment => Number of well elements per polyline segment",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "polylineNodeCoords",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "polylineNodeCoords => Physical coordinates of the well polyline nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "polylineSegmentConn",
                                        type_name: "globalIndex_array2d",
                                        comment: Some(
                                            "polylineSegmentConn => Connectivity of the polyline segments",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "radius",
                                        type_name: "real64",
                                        comment: Some(
                                            "radius => Radius of the well [m]",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellControlsName",
                                        type_name: "string",
                                        comment: Some(
                                            "wellControlsName => Name of the set of constraints associated with this well",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellRegionName",
                                        type_name: "string",
                                        comment: Some(
                                            "wellRegionName => Name of the well element region",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "InternalWellTypeChoice",
                                        type_name: "InternalWellTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "PerforationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "distanceFromHead",
                            type_name: "real64",
                            comment: Some(
                                "distanceFromHead => Linear distance from well head to the perforation",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "skinFactor",
                            type_name: "real64",
                            comment: Some(
                                "skinFactor => Perforation skin factor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "transmissibility",
                            type_name: "real64",
                            comment: Some(
                                "transmissibility => Perforation transmissibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "VTKWellTypeChoice",
                cases: [
                    EnumCase {
                        name: "Perforation",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PerforationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "VTKWellType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "file",
                                        type_name: "path",
                                        comment: Some(
                                            "file => Path to the well file",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "minElementLength",
                                        type_name: "real64",
                                        comment: Some(
                                            "minElementLength => Minimum length of a well element, computed as (segment length / number of elements per segment ) [m]",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "minSegmentLength",
                                        type_name: "real64",
                                        comment: Some(
                                            "minSegmentLength => Minimum length of a well segment [m]",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "numElementsPerSegment",
                                        type_name: "integer",
                                        comment: Some(
                                            "numElementsPerSegment => Number of well elements per polyline segment",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "radius",
                                        type_name: "real64",
                                        comment: Some(
                                            "radius => Radius of the well [m]",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellControlsName",
                                        type_name: "string",
                                        comment: Some(
                                            "wellControlsName => Name of the set of constraints associated with this well",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellRegionName",
                                        type_name: "string",
                                        comment: Some(
                                            "wellRegionName => Name of the well element region",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "VTKWellTypeChoice",
                                        type_name: "VTKWellTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "InternalWellboreTypeChoice",
                cases: [
                    EnumCase {
                        name: "InternalWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "InternalWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VTKWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VTKWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "InternalWellboreType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "autoSpaceRadialElems",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "autoSpaceRadialElems => Automatically set number and spacing of elements in the radial direction. This overrides the values of nr!Value in each block indicates factor to scale the radial increment.Larger numbers indicate larger radial elements.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cartesianMappingInnerRadius",
                                        type_name: "real64",
                                        comment: Some(
                                            "cartesianMappingInnerRadius => If using a Cartesian aligned outer boundary, this is inner radius at which to start the mapping.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cellBlockNames",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "cellBlockNames => Names of each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "elementTypes",
                                        type_name: "string_array",
                                        comment: Some(
                                            "elementTypes => Element types of each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "hardRadialCoords",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "hardRadialCoords => Sets the radial spacing to specified values",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "nr",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "nr => Number of elements in the radial direction",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "nt",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "nt => Number of elements in the tangent direction",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "nz",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "nz => Number of elements in the z-direction within each mesh block",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "positionTolerance",
                                        type_name: "real64",
                                        comment: Some(
                                            "positionTolerance => A position tolerance to verify if a node belong to a nodeset",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "rBias => Bias of element sizes in the radial direction",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "radius",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "radius => Wellbore radius",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "theta",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "theta => Tangent angle defining geometry size: 90 for quarter, 180 for half and 360 for full wellbore geometry",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "trajectory",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "trajectory => Coordinates defining the wellbore trajectory",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "trianglePattern",
                                        type_name: "integer",
                                        comment: Some(
                                            "trianglePattern => Pattern by which to decompose the hex mesh into wedges",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useCartesianOuterBoundary",
                                        type_name: "integer",
                                        comment: Some(
                                            "useCartesianOuterBoundary => Enforce a Cartesian aligned outer boundary on the outer block starting with the radial block specified in this value",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "xBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "xBias => Bias of element sizes in the x-direction within each mesh block (dx_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "yBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "yBias => Bias of element sizes in the y-direction within each mesh block (dy_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "zBias",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "zBias => Bias of element sizes in the z-direction within each mesh block (dz_left=(1+b)*L/N, dz_right=(1-b)*L/N)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "zCoords",
                                        type_name: "real64_array",
                                        comment: Some(
                                            "zCoords => z-coordinates of each mesh block vertex",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "InternalWellboreTypeChoice",
                                        type_name: "InternalWellboreTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "ParticleMeshType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "headerFile",
                            type_name: "path",
                            comment: Some(
                                "headerFile => path to the header file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "particleBlockNames",
                            type_name: "string_array",
                            comment: Some(
                                "particleBlockNames => Names of each particle block",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "particleFile",
                            type_name: "path",
                            comment: Some(
                                "particleFile => path to the particle file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "particleTypes",
                            type_name: "string_array",
                            comment: Some(
                                "particleTypes => Particle types of each particle block",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "VTKMeshTypeChoice",
                cases: [
                    EnumCase {
                        name: "InternalWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "InternalWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VTKWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VTKWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "VTKMeshType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "faceBlocks",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "faceBlocks => For multi-block files, names of the face mesh block.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "fieldNamesInGEOSX",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "fieldNamesInGEOSX => Names of the volumic fields in GEOSX to import into",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "fieldsToImport",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "fieldsToImport => Volumic fields to be imported from the external mesh file",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "file",
                                        type_name: "path",
                                        comment: Some(
                                            "file => Path to the mesh file",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "mainBlockName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "mainBlockName => For multi-block files, name of the 3d mesh block.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "nodesetNames",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "nodesetNames => Names of the VTK nodesets to import",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "partitionMethod",
                                        type_name: "geos_vtk_PartitionMethod",
                                        comment: Some(
                                            "partitionMethod => Method (library) used to partition the mesh",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "partitionRefinement",
                                        type_name: "integer",
                                        comment: Some(
                                            "partitionRefinement => Number of partitioning refinement iterations (defaults to 1, recommended value).A value of 0 disables graph partitioning and keeps simple kd-tree partitions (not recommended). Values higher than 1 may lead to slightly improved partitioning, but yield diminishing returns.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "regionAttribute",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "regionAttribute => Name of the VTK cell attribute to use as region marker",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "scale",
                                        type_name: "R1Tensor",
                                        comment: Some(
                                            "scale => Scale the coordinates of the vertices by given scale factors (after translation)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "surfacicFieldsInGEOSX",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "surfacicFieldsInGEOSX => Names of the surfacic fields in GEOSX to import into",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "surfacicFieldsToImport",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "surfacicFieldsToImport => Surfacic fields to be imported from the external mesh file",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "translate",
                                        type_name: "R1Tensor",
                                        comment: Some(
                                            "translate => Translate the coordinates of the vertices by a given vector (prior to scaling)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useGlobalIds",
                                        type_name: "integer",
                                        comment: Some(
                                            "useGlobalIds => Controls the use of global IDs in the input file for cells and points. If set to 0 (default value), the GlobalId arrays in the input mesh are used if available, and generated otherwise. If set to a negative value, the GlobalId arrays in the input mesh are not used, and generated global Ids are automatically generated. If set to a positive value, the GlobalId arrays in the input mesh are used and required, and the simulation aborts if they are not available",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "VTKMeshTypeChoice",
                                        type_name: "VTKMeshTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_vtk_PartitionMethod",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|parmetis|ptscotch",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "NumericalMethodsTypeChoice",
                cases: [
                    EnumCase {
                        name: "FiniteElements",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FiniteElementsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "FiniteVolume",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FiniteVolumeType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "NumericalMethodsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "NumericalMethodsTypeChoice",
                                        type_name: "NumericalMethodsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "FiniteElementsTypeChoice",
                cases: [
                    EnumCase {
                        name: "FiniteElementSpace",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FiniteElementSpaceType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "FiniteElementsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "FiniteElementsTypeChoice",
                                        type_name: "FiniteElementsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "FiniteElementSpaceType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "formulation",
                            type_name: "geos_FiniteElementDiscretization_Formulation",
                            comment: Some(
                                "formulation => Specifier to indicate any specialized formuations. For instance, one of the many enhanced assumed strain methods of the Hexahedron parent shape would be indicated here",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "order",
                            type_name: "integer",
                            comment: Some(
                                "order => The order of the finite element basis.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "useVirtualElements",
                            type_name: "integer",
                            comment: Some(
                                "useVirtualElements => Specifier to indicate whether to force the use of VEM",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_FiniteElementDiscretization_Formulation",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|default|SEM",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "LinearSolverParametersType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "amgAggressiveCoarseningLevels",
                            type_name: "integer",
                            comment: Some(
                                "amgAggressiveCoarseningLevels => AMG number of levels for aggressive coarsening",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgAggressiveCoarseningPaths",
                            type_name: "integer",
                            comment: Some(
                                "amgAggressiveCoarseningPaths => AMG number of paths for aggressive coarsening",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgAggressiveInterpType",
                            type_name: "geos_LinearSolverParameters_AMG_AggInterpType",
                            comment: Some(
                                "amgAggressiveInterpType => AMG aggressive interpolation algorithm. Available options are: ``default|extendedIStage2|standardStage2|extendedStage2|multipass|modifiedExtended|modifiedExtendedI|modifiedExtendedE|modifiedMultipass``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgCoarseSolver",
                            type_name: "geos_LinearSolverParameters_AMG_CoarseType",
                            comment: Some(
                                "amgCoarseSolver => AMG coarsest level solver/smoother type. Available options are: ``default|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|direct|bgs``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgCoarseningType",
                            type_name: "geos_LinearSolverParameters_AMG_CoarseningType",
                            comment: Some(
                                "amgCoarseningType => AMG coarsening algorithm. Available options are: ``default|CLJP|RugeStueben|Falgout|PMIS|HMIS``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgInterpolationMaxNonZeros",
                            type_name: "integer",
                            comment: Some(
                                "amgInterpolationMaxNonZeros => AMG interpolation maximum number of nonzeros per row",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgInterpolationType",
                            type_name: "geos_LinearSolverParameters_AMG_InterpType",
                            comment: Some(
                                "amgInterpolationType => AMG interpolation algorithm. Available options are: ``default|modifiedClassical|direct|multipass|extendedI|standard|extended|directBAMG|modifiedExtended|modifiedExtendedI|modifiedExtendedE``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgNullSpaceType",
                            type_name: "geos_LinearSolverParameters_AMG_NullSpaceType",
                            comment: Some(
                                "amgNullSpaceType => AMG near null space approximation. Available options are:``constantModes|rigidBodyModes``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgNumFunctions",
                            type_name: "integer",
                            comment: Some(
                                "amgNumFunctions => AMG number of functions",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgNumSweeps",
                            type_name: "integer",
                            comment: Some(
                                "amgNumSweeps => AMG smoother sweeps",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgRelaxWeight",
                            type_name: "real64",
                            comment: Some(
                                "amgRelaxWeight => AMG relaxation factor for the smoother",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgSeparateComponents",
                            type_name: "integer",
                            comment: Some(
                                "amgSeparateComponents => AMG apply separate component filter for multi-variable problems",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgSmootherType",
                            type_name: "geos_LinearSolverParameters_AMG_SmootherType",
                            comment: Some(
                                "amgSmootherType => AMG smoother type. Available options are: ``default|jacobi|l1jacobi|fgs|bgs|sgs|l1sgs|chebyshev|ilu0|ilut|ic0|ict``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "amgThreshold",
                            type_name: "real64",
                            comment: Some(
                                "amgThreshold => AMG strength-of-connection threshold",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directCheckResidual",
                            type_name: "integer",
                            comment: Some(
                                "directCheckResidual => Whether to check the linear system solution residual",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directColPerm",
                            type_name: "geos_LinearSolverParameters_Direct_ColPerm",
                            comment: Some(
                                "directColPerm => How to permute the columns. Available options are: ``none|MMD_AtplusA|MMD_AtA|colAMD|metis|parmetis``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directEquil",
                            type_name: "integer",
                            comment: Some(
                                "directEquil => Whether to scale the rows and columns of the matrix",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directIterRef",
                            type_name: "integer",
                            comment: Some(
                                "directIterRef => Whether to perform iterative refinement",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directParallel",
                            type_name: "integer",
                            comment: Some(
                                "directParallel => Whether to use a parallel solver (instead of a serial one)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directReplTinyPivot",
                            type_name: "integer",
                            comment: Some(
                                "directReplTinyPivot => Whether to replace tiny pivots by sqrt(epsilon)*norm(A)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "directRowPerm",
                            type_name: "geos_LinearSolverParameters_Direct_RowPerm",
                            comment: Some(
                                "directRowPerm => How to permute the rows. Available options are: ``none|mc64``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "iluFill",
                            type_name: "integer",
                            comment: Some(
                                "iluFill => ILU(K) fill factor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "iluThreshold",
                            type_name: "real64",
                            comment: Some(
                                "iluThreshold => ILU(T) threshold factor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "krylovAdaptiveTol",
                            type_name: "integer",
                            comment: Some(
                                "krylovAdaptiveTol => Use Eisenstat-Walker adaptive linear tolerance",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "krylovMaxIter",
                            type_name: "integer",
                            comment: Some(
                                "krylovMaxIter => Maximum iterations allowed for an iterative solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "krylovMaxRestart",
                            type_name: "integer",
                            comment: Some(
                                "krylovMaxRestart => Maximum iterations before restart (GMRES only)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "krylovTol",
                            type_name: "real64",
                            comment: Some(
                                "krylovTol => Relative convergence tolerance of the iterative method\nIf the method converges, the iterative solution :math:`\\mathsf{x}_k` is such that\nthe relative residual norm satisfies:\n:math:`\\left\\lVert \\mathsf{b} - \\mathsf{A} \\mathsf{x}_k \\right\\rVert_2` < ``krylovTol`` * :math:`\\left\\lVert\\mathsf{b}\\right\\rVert_2`",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "krylovWeakestTol",
                            type_name: "real64",
                            comment: Some(
                                "krylovWeakestTol => Weakest-allowed tolerance for adaptive method",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "preconditionerType",
                            type_name: "geos_LinearSolverParameters_PreconditionerType",
                            comment: Some(
                                "preconditionerType => Preconditioner type. Available options are: ``none|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|iluk|ilut|icc|ict|amg|mgr|block|direct|bgs``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solverType",
                            type_name: "geos_LinearSolverParameters_SolverType",
                            comment: Some(
                                "solverType => Linear solver type. Available options are: ``direct|cg|gmres|fgmres|bicgstab|preconditioner``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "stopIfError",
                            type_name: "integer",
                            comment: Some(
                                "stopIfError => Whether to stop the simulation if the linear solver reports an error",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_AMG_AggInterpType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|default|extendedIStage2|standardStage2|extendedStage2|multipass|modifiedExtended|modifiedExtendedI|modifiedExtendedE|modifiedMultipass",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_AMG_CoarseType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|default|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|direct|bgs",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_AMG_CoarseningType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|default|CLJP|RugeStueben|Falgout|PMIS|HMIS",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_AMG_InterpType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|default|modifiedClassical|direct|multipass|extendedI|standard|extended|directBAMG|modifiedExtended|modifiedExtendedI|modifiedExtendedE",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_AMG_NullSpaceType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|constantModes|rigidBodyModes",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_AMG_SmootherType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|default|jacobi|l1jacobi|fgs|bgs|sgs|l1sgs|chebyshev|ilu0|ilut|ic0|ict",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_Direct_ColPerm",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|none|MMD_AtplusA|MMD_AtA|colAMD|metis|parmetis",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_Direct_RowPerm",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|none|mc64",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_PreconditionerType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|none|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|iluk|ilut|icc|ict|amg|mgr|block|direct|bgs",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LinearSolverParameters_SolverType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|direct|cg|gmres|fgmres|bicgstab|preconditioner",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "NonlinearSolverParametersType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "allowNonConverged",
                            type_name: "integer",
                            comment: Some(
                                "allowNonConverged => Allow non-converged solution to be accepted. (i.e. exit from the Newton loop without achieving the desired tolerance)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "configurationTolerance",
                            type_name: "real64",
                            comment: Some(
                                "configurationTolerance => Configuration tolerance",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "couplingType",
                            type_name: "geos_NonlinearSolverParameters_CouplingType",
                            comment: Some(
                                "couplingType => Type of coupling. Valid options:\n* FullyImplicit\n* Sequential",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lineSearchAction",
                            type_name: "geos_NonlinearSolverParameters_LineSearchAction",
                            comment: Some(
                                "lineSearchAction => How the line search is to be used. Options are: \n * None    - Do not use line search.\n* Attempt - Use line search. Allow exit from line search without achieving smaller residual than starting residual.\n* Require - Use line search. If smaller residual than starting resdual is not achieved, cut time step.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lineSearchCutFactor",
                            type_name: "real64",
                            comment: Some(
                                "lineSearchCutFactor => Line search cut factor. For instance, a value of 0.5 will result in the effective application of the last solution by a factor of (0.5, 0.25, 0.125, ...)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lineSearchInterpolationType",
                            type_name: "geos_NonlinearSolverParameters_LineSearchInterpolationType",
                            comment: Some(
                                "lineSearchInterpolationType => Strategy to cut the solution update during the line search. Options are: \n * Linear\n* Parabolic",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lineSearchMaxCuts",
                            type_name: "integer",
                            comment: Some(
                                "lineSearchMaxCuts => Maximum number of line search cuts.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lineSearchResidualFactor",
                            type_name: "real64",
                            comment: Some(
                                "lineSearchResidualFactor => Factor to determine residual increase (recommended values: 1.1 (conservative), 2.0 (relaxed), 10.0 (aggressive)).",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lineSearchStartingIteration",
                            type_name: "integer",
                            comment: Some(
                                "lineSearchStartingIteration => Iteration when line search starts.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxAllowedResidualNorm",
                            type_name: "real64",
                            comment: Some(
                                "maxAllowedResidualNorm => Maximum value of residual norm that is allowed in a Newton loop",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxNumConfigurationAttempts",
                            type_name: "integer",
                            comment: Some(
                                "maxNumConfigurationAttempts => Max number of times that the configuration can be changed",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxSubSteps",
                            type_name: "integer",
                            comment: Some(
                                "maxSubSteps => Maximum number of time sub-steps allowed for the solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxTimeStepCuts",
                            type_name: "integer",
                            comment: Some(
                                "maxTimeStepCuts => Max number of time step cuts",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "minNormalizer",
                            type_name: "real64",
                            comment: Some(
                                "minNormalizer => Value used to make sure that residual normalizers are not too small when computing residual norm.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "newtonMaxIter",
                            type_name: "integer",
                            comment: Some(
                                "newtonMaxIter => Maximum number of iterations that are allowed in a Newton loop.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "newtonMinIter",
                            type_name: "integer",
                            comment: Some(
                                "newtonMinIter => Minimum number of iterations that are required before exiting the Newton loop.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "newtonTol",
                            type_name: "real64",
                            comment: Some(
                                "newtonTol => The required tolerance in order to exit the Newton iteration loop.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "nonlinearAccelerationType",
                            type_name: "geos_NonlinearSolverParameters_NonlinearAccelerationType",
                            comment: Some(
                                "nonlinearAccelerationType => Nonlinear acceleration type for sequential solver.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "sequentialConvergenceCriterion",
                            type_name: "geos_NonlinearSolverParameters_SequentialConvergenceCriterion",
                            comment: Some(
                                "sequentialConvergenceCriterion => Criterion used to check outer-loop convergence in sequential schemes. Valid options:\n* ResidualNorm\n* NumberOfNonlinearIterations\n* SolutionIncrements",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "subcycling",
                            type_name: "integer",
                            comment: Some(
                                "subcycling => Flag to decide whether to iterate between sequentially coupled solvers or not.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "timeStepCutFactor",
                            type_name: "real64",
                            comment: Some(
                                "timeStepCutFactor => Factor by which the time step will be cut if a timestep cut is required.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "timeStepDecreaseFactor",
                            type_name: "real64",
                            comment: Some(
                                "timeStepDecreaseFactor => Factor by which the time step is decreased when the number of Newton iterations is large.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "timeStepDecreaseIterLimit",
                            type_name: "real64",
                            comment: Some(
                                "timeStepDecreaseIterLimit => Fraction of the max Newton iterations above which the solver asks for the time-step to be decreased for the next time step.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "timeStepIncreaseFactor",
                            type_name: "real64",
                            comment: Some(
                                "timeStepIncreaseFactor => Factor by which the time step is increased when the number of Newton iterations is small.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "timeStepIncreaseIterLimit",
                            type_name: "real64",
                            comment: Some(
                                "timeStepIncreaseIterLimit => Fraction of the max Newton iterations below which the solver asks for the time-step to be increased for the next time step.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "normType",
                            type_name: "geos_solverBaseKernels_NormType",
                            comment: Some(
                                "normType => Norm used by the flow solver to check nonlinear convergence. Valid options:\n* Linfinity\n* L2",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_NonlinearSolverParameters_CouplingType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|FullyImplicit|Sequential",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_NonlinearSolverParameters_LineSearchAction",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|None|Attempt|Require",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_NonlinearSolverParameters_LineSearchInterpolationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Linear|Parabolic",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_NonlinearSolverParameters_NonlinearAccelerationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|None|Aitken",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_NonlinearSolverParameters_SequentialConvergenceCriterion",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|ResidualNorm|NumberOfNonlinearIterations|SolutionIncrements",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "FiniteVolumeTypeChoice",
                cases: [
                    EnumCase {
                        name: "HybridMimeticDiscretization",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HybridMimeticDiscretizationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TwoPointFluxApproximation",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TwoPointFluxApproximationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "FiniteVolumeType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "FiniteVolumeTypeChoice",
                                        type_name: "FiniteVolumeTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "HybridMimeticDiscretizationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "innerProductType",
                            type_name: "string",
                            comment: Some(
                                "innerProductType => Type of inner product used in the hybrid FVM solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TwoPointFluxApproximationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "areaRelTol",
                            type_name: "real64",
                            comment: Some(
                                "areaRelTol => Relative tolerance for area calculations.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "meanPermCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "meanPermCoefficient => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "upwindingScheme",
                            type_name: "geos_UpwindingScheme",
                            comment: Some(
                                "upwindingScheme => Type of upwinding scheme. Valid options:\n* PPU\n* C1PPU\n* IHU",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "usePEDFM",
                            type_name: "integer",
                            comment: Some(
                                "usePEDFM => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_UpwindingScheme",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|PPU|C1PPU|IHU",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "OutputsTypeChoice",
                cases: [
                    EnumCase {
                        name: "Blueprint",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BlueprintType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ChomboIO",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ChomboIOType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Python",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PythonType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Restart",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "RestartType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Silo",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SiloType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TimeHistory",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TimeHistoryType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VTK",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VTKType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "OutputsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "OutputsTypeChoice",
                                        type_name: "OutputsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "BlueprintType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outputFullQuadratureData",
                            type_name: "integer",
                            comment: Some(
                                "outputFullQuadratureData => If true writes out data associated with every quadrature point.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "plotLevel",
                            type_name: "geos_dataRepository_PlotLevel",
                            comment: Some(
                                "plotLevel => Determines which fields to write.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ChomboIOType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "beginCycle",
                            type_name: "real64",
                            comment: Some(
                                "beginCycle => Cycle at which the coupling will commence.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "inputPath",
                            type_name: "string",
                            comment: Some(
                                "inputPath => Path at which the chombo to geosx file will be written.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outputPath",
                            type_name: "string",
                            comment: Some(
                                "outputPath => Path at which the geosx to chombo file will be written.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "useChomboPressures",
                            type_name: "integer",
                            comment: Some(
                                "useChomboPressures => True iff geosx should use the pressures chombo writes out.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waitForInput",
                            type_name: "integer",
                            comment: Some(
                                "waitForInput => True iff geosx should wait for chombo to write out a file. When true the inputPath must be set.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PythonType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "RestartType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SiloType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "fieldNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "fieldNames => Names of the fields to output. If this attribute is specified, GEOSX outputs all (and only) the fields specified by the user, regardless of their plotLevel",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "onlyPlotSpecifiedFieldNames",
                            type_name: "integer",
                            comment: Some(
                                "onlyPlotSpecifiedFieldNames => If this flag is equal to 1, then we only plot the fields listed in `fieldNames`. Otherwise, we plot all the fields with the required `plotLevel`, plus the fields listed in `fieldNames`",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "plotFileRoot",
                            type_name: "string",
                            comment: Some(
                                "plotFileRoot => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "plotLevel",
                            type_name: "integer",
                            comment: Some(
                                "plotLevel => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeCellElementMesh",
                            type_name: "integer",
                            comment: Some(
                                "writeCellElementMesh => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeEdgeMesh",
                            type_name: "integer",
                            comment: Some(
                                "writeEdgeMesh => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeFEMFaces",
                            type_name: "integer",
                            comment: Some(
                                "writeFEMFaces => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeFaceElementMesh",
                            type_name: "integer",
                            comment: Some(
                                "writeFaceElementMesh => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TimeHistoryType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "filename",
                            type_name: "string",
                            comment: Some(
                                "filename => The filename to which to write time history output.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "format",
                            type_name: "string",
                            comment: Some(
                                "format => The output file format for time history output.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "sources",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "sources => A list of collectors from which to collect and output time history information.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "VTKType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "childDirectory",
                            type_name: "string",
                            comment: Some(
                                "childDirectory => Child directory path",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "fieldNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "fieldNames => Names of the fields to output. If this attribute is specified, GEOSX outputs all the fields specified by the user, regardless of their `plotLevel`",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "format",
                            type_name: "geos_vtk_VTKOutputMode",
                            comment: Some(
                                "format => Output data format.  Valid options: ``binary``, ``ascii``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "levelNames",
                            type_name: "string_array",
                            comment: Some(
                                "levelNames => Names of mesh levels to output.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "onlyPlotSpecifiedFieldNames",
                            type_name: "integer",
                            comment: Some(
                                "onlyPlotSpecifiedFieldNames => If this flag is equal to 1, then we only plot the fields listed in `fieldNames`. Otherwise, we plot all the fields with the required `plotLevel`, plus the fields listed in `fieldNames`",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outputRegionType",
                            type_name: "geos_vtk_VTKRegionTypes",
                            comment: Some(
                                "outputRegionType => Output region types.  Valid options: ``cell``, ``well``, ``surface``, ``particle``, ``all``",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "parallelThreads",
                            type_name: "integer",
                            comment: Some(
                                "parallelThreads => Number of plot files.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "plotFileRoot",
                            type_name: "string",
                            comment: Some(
                                "plotFileRoot => Name of the root file for this output.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "plotLevel",
                            type_name: "integer",
                            comment: Some(
                                "plotLevel => Level detail plot. Only fields with lower of equal plot level will be output.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeFEMFaces",
                            type_name: "integer",
                            comment: Some(
                                "writeFEMFaces => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeGhostCells",
                            type_name: "integer",
                            comment: Some(
                                "writeGhostCells => Should the vtk files contain the ghost cells or not.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_vtk_VTKOutputMode",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|binary|ascii",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_vtk_VTKRegionTypes",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|cell|well|surface|particle|all",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "SolversTypeChoice",
                cases: [
                    EnumCase {
                        name: "AcousticElasticSEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "AcousticElasticSEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "AcousticFirstOrderSEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "AcousticFirstOrderSEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "AcousticSEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "AcousticSEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "AcousticVTISEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "AcousticVTISEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseFVM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseFVMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseHybridFVM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseHybridFVMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseReservoir",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseReservoirType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseReservoirPoromechanics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseReservoirPoromechanicsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElasticFirstOrderSEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElasticFirstOrderSEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElasticSEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElasticSEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "EmbeddedSurfaceGenerator",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "EmbeddedSurfaceGeneratorType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "FlowProppantTransport",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FlowProppantTransportType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Hydrofracture",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HydrofractureType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "LaplaceFEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LaplaceFEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "MultiphasePoromechanics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MultiphasePoromechanicsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "MultiphasePoromechanicsReservoir",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MultiphasePoromechanicsReservoirType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PhaseFieldDamageFEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PhaseFieldDamageFEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PhaseFieldFracture",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PhaseFieldFractureType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ProppantTransport",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ProppantTransportType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ReactiveCompositionalMultiphaseOBL",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ReactiveCompositionalMultiphaseOBLType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SeismicityRate",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SeismicityRateType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseFVM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseFVMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseHybridFVM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseHybridFVMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhasePoromechanics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhasePoromechanicsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhasePoromechanicsConformingFractures",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhasePoromechanicsConformingFracturesType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhasePoromechanicsEmbeddedFractures",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhasePoromechanicsEmbeddedFracturesType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhasePoromechanicsReservoir",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhasePoromechanicsReservoirType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseProppantFVM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseProppantFVMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseReservoir",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseReservoirType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseReservoirPoromechanics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseReservoirPoromechanicsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseWell",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseWellType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanicsEmbeddedFractures",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanicsEmbeddedFracturesType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanicsLagrangeContact",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanicsLagrangeContactType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanicsLagrangianSSLE",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanicsLagrangianSSLEType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanics_LagrangianFEM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanics_LagrangianFEMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanics_MPM",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanics_MPMType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SurfaceGenerator",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SurfaceGeneratorType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SolversType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "gravityVector",
                                        type_name: "R1Tensor",
                                        comment: Some(
                                            "gravityVector => Gravity vector used in the physics solvers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "SolversTypeChoice",
                                        type_name: "SolversTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "AcousticElasticSEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "AcousticElasticSEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "acousticSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "acousticSolverName => Name of the acoustic solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "elasticSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "elasticSolverName => Name of the elastic solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "AcousticElasticSEMTypeChoice",
                                        type_name: "AcousticElasticSEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "AcousticFirstOrderSEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "AcousticFirstOrderSEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "attenuationType",
                                        type_name: "geos_WaveSolverUtils_AttenuationType",
                                        comment: Some(
                                            "attenuationType => Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "dtSeismoTrace",
                                        type_name: "real64",
                                        comment: Some(
                                            "dtSeismoTrace => Time step for output pressure at receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "enableLifo",
                                        type_name: "integer",
                                        comment: Some(
                                            "enableLifo => Set to 1 to enable LIFO storage feature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forward",
                                        type_name: "integer",
                                        comment: Some(
                                            "forward => Set to 1 to compute forward propagation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnDevice",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnDevice => Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnHost",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnHost => Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoSize",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoSize => Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASGeometry",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "linearDASGeometry => Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASSamples",
                                        type_name: "integer",
                                        comment: Some(
                                            "linearDASSamples => Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "outputSeismoTrace",
                                        type_name: "integer",
                                        comment: Some(
                                            "outputSeismoTrace => Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "receiverCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "receiverCoordinates => Coordinates (x,y,z) of the receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rickerOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "rickerOrder => Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "saveFields",
                                        type_name: "integer",
                                        comment: Some(
                                            "saveFields => Set to 1 to save fields during forward and restore them during backward",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "shotIndex",
                                        type_name: "integer",
                                        comment: Some(
                                            "shotIndex => Set the current shot for temporary files",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsAnelasticityCoefficients",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsAnelasticityCoefficients => Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsReferenceAngularFrequencies",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsReferenceAngularFrequencies => Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "sourceCoordinates => Coordinates (x,y,z) of the sources",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceDelay",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceDelay => Source time delay (1 / f0 by default)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceFrequency",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceFrequency => Central frequency for the time source",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDAS",
                                        type_name: "geos_WaveSolverUtils_DASType",
                                        comment: Some(
                                            "useDAS => Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "AcousticFirstOrderSEMTypeChoice",
                                        type_name: "AcousticFirstOrderSEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_WaveSolverUtils_AttenuationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|none|sls",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_WaveSolverUtils_DASType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|none|dipole|strainIntegration",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "AcousticSEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "AcousticSEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "attenuationType",
                                        type_name: "geos_WaveSolverUtils_AttenuationType",
                                        comment: Some(
                                            "attenuationType => Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "dtSeismoTrace",
                                        type_name: "real64",
                                        comment: Some(
                                            "dtSeismoTrace => Time step for output pressure at receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "enableLifo",
                                        type_name: "integer",
                                        comment: Some(
                                            "enableLifo => Set to 1 to enable LIFO storage feature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forward",
                                        type_name: "integer",
                                        comment: Some(
                                            "forward => Set to 1 to compute forward propagation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnDevice",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnDevice => Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnHost",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnHost => Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoSize",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoSize => Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASGeometry",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "linearDASGeometry => Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASSamples",
                                        type_name: "integer",
                                        comment: Some(
                                            "linearDASSamples => Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "outputSeismoTrace",
                                        type_name: "integer",
                                        comment: Some(
                                            "outputSeismoTrace => Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "receiverCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "receiverCoordinates => Coordinates (x,y,z) of the receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rickerOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "rickerOrder => Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "saveFields",
                                        type_name: "integer",
                                        comment: Some(
                                            "saveFields => Set to 1 to save fields during forward and restore them during backward",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "shotIndex",
                                        type_name: "integer",
                                        comment: Some(
                                            "shotIndex => Set the current shot for temporary files",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsAnelasticityCoefficients",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsAnelasticityCoefficients => Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsReferenceAngularFrequencies",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsReferenceAngularFrequencies => Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "sourceCoordinates => Coordinates (x,y,z) of the sources",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceDelay",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceDelay => Source time delay (1 / f0 by default)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceFrequency",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceFrequency => Central frequency for the time source",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDAS",
                                        type_name: "geos_WaveSolverUtils_DASType",
                                        comment: Some(
                                            "useDAS => Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "AcousticSEMTypeChoice",
                                        type_name: "AcousticSEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "AcousticVTISEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "AcousticVTISEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "attenuationType",
                                        type_name: "geos_WaveSolverUtils_AttenuationType",
                                        comment: Some(
                                            "attenuationType => Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "dtSeismoTrace",
                                        type_name: "real64",
                                        comment: Some(
                                            "dtSeismoTrace => Time step for output pressure at receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "enableLifo",
                                        type_name: "integer",
                                        comment: Some(
                                            "enableLifo => Set to 1 to enable LIFO storage feature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forward",
                                        type_name: "integer",
                                        comment: Some(
                                            "forward => Set to 1 to compute forward propagation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnDevice",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnDevice => Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnHost",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnHost => Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoSize",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoSize => Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASGeometry",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "linearDASGeometry => Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASSamples",
                                        type_name: "integer",
                                        comment: Some(
                                            "linearDASSamples => Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "outputSeismoTrace",
                                        type_name: "integer",
                                        comment: Some(
                                            "outputSeismoTrace => Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "receiverCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "receiverCoordinates => Coordinates (x,y,z) of the receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rickerOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "rickerOrder => Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "saveFields",
                                        type_name: "integer",
                                        comment: Some(
                                            "saveFields => Set to 1 to save fields during forward and restore them during backward",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "shotIndex",
                                        type_name: "integer",
                                        comment: Some(
                                            "shotIndex => Set the current shot for temporary files",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsAnelasticityCoefficients",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsAnelasticityCoefficients => Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsReferenceAngularFrequencies",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsReferenceAngularFrequencies => Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "sourceCoordinates => Coordinates (x,y,z) of the sources",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceDelay",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceDelay => Source time delay (1 / f0 by default)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceFrequency",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceFrequency => Central frequency for the time source",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDAS",
                                        type_name: "geos_WaveSolverUtils_DASType",
                                        comment: Some(
                                            "useDAS => Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "AcousticVTISEMTypeChoice",
                                        type_name: "AcousticVTISEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "CompositionalMultiphaseFVMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "CompositionalMultiphaseFVMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowLocalCompDensityChopping",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowLocalCompDensityChopping => Flag indicating whether local (cell-wise) chopping of negative compositions is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "contMultiplierDBC",
                                        type_name: "real64",
                                        comment: Some(
                                            "contMultiplierDBC => Factor by which continuation parameter is changed every newton when DBC is used",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "continuationDBC",
                                        type_name: "integer",
                                        comment: Some(
                                            "continuationDBC => Flag for enabling continuation parameter",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "kappaminDBC",
                                        type_name: "real64",
                                        comment: Some(
                                            "kappaminDBC => Factor that controls how much dissipation is kept in the system when continuation is used",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxCompFractionChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxCompFractionChange => Maximum (absolute) change in a component fraction in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxRelativePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxRelativePressureChange => Maximum (relative) change in pressure in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxRelativeTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxRelativeTemperatureChange => Maximum (relative) change in temperature in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialCompDensChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialCompDensChange => Maximum (absolute) component density change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "minCompDens",
                                        type_name: "real64",
                                        comment: Some(
                                            "minCompDens => Minimum allowed global component density",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "miscibleDBC",
                                        type_name: "integer",
                                        comment: Some(
                                            "miscibleDBC => Flag for enabling DBC formulation with/without miscibility",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "omegaDBC",
                                        type_name: "real64",
                                        comment: Some(
                                            "omegaDBC => Factor by which DBC flux is multiplied",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "scalingType",
                                        type_name: "geos_CompositionalMultiphaseFVM_ScalingType",
                                        comment: Some(
                                            "scalingType => Solution scaling type.Valid options:\n* Global\n* Local",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solutionChangeScalingFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "solutionChangeScalingFactor => Damping factor for solution change targets",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetFlowCFL",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetFlowCFL => Target CFL condition `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_when computing the next timestep.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetPhaseVolFractionChangeInTimeStep",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetPhaseVolFractionChangeInTimeStep => Target (absolute) change in phase volume fraction in a time step",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRelativePressureChangeInTimeStep",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetRelativePressureChangeInTimeStep => Target (relative) change in pressure in a time step (expected value between 0 and 1)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRelativeTemperatureChangeInTimeStep",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetRelativeTemperatureChangeInTimeStep => Target (relative) change in temperature in a time step (expected value between 0 and 1)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "temperature",
                                        type_name: "real64",
                                        comment: Some(
                                            "temperature => Temperature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "useDBC",
                                        type_name: "integer",
                                        comment: Some(
                                            "useDBC => Enable Dissipation-based continuation flux",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useMass",
                                        type_name: "integer",
                                        comment: Some(
                                            "useMass => Use mass formulation instead of molar",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useSimpleAccumulation",
                                        type_name: "integer",
                                        comment: Some(
                                            "useSimpleAccumulation => Flag indicating whether simple accumulation form is used",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useTotalMassEquation",
                                        type_name: "integer",
                                        comment: Some(
                                            "useTotalMassEquation => Flag indicating whether total mass equation is used",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "CompositionalMultiphaseFVMTypeChoice",
                                        type_name: "CompositionalMultiphaseFVMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_solverBaseKernels_NormType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Linfinity|L2",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_CompositionalMultiphaseFVM_ScalingType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Global|Local",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "CompositionalMultiphaseHybridFVMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "CompositionalMultiphaseHybridFVMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowLocalCompDensityChopping",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowLocalCompDensityChopping => Flag indicating whether local (cell-wise) chopping of negative compositions is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxCompFractionChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxCompFractionChange => Maximum (absolute) change in a component fraction in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxRelativePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxRelativePressureChange => Maximum (relative) change in pressure in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxRelativeTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxRelativeTemperatureChange => Maximum (relative) change in temperature in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialCompDensChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialCompDensChange => Maximum (absolute) component density change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "minCompDens",
                                        type_name: "real64",
                                        comment: Some(
                                            "minCompDens => Minimum allowed global component density",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solutionChangeScalingFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "solutionChangeScalingFactor => Damping factor for solution change targets",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetFlowCFL",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetFlowCFL => Target CFL condition `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_when computing the next timestep.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetPhaseVolFractionChangeInTimeStep",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetPhaseVolFractionChangeInTimeStep => Target (absolute) change in phase volume fraction in a time step",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRelativePressureChangeInTimeStep",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetRelativePressureChangeInTimeStep => Target (relative) change in pressure in a time step (expected value between 0 and 1)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRelativeTemperatureChangeInTimeStep",
                                        type_name: "real64",
                                        comment: Some(
                                            "targetRelativeTemperatureChangeInTimeStep => Target (relative) change in temperature in a time step (expected value between 0 and 1)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "temperature",
                                        type_name: "real64",
                                        comment: Some(
                                            "temperature => Temperature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "useMass",
                                        type_name: "integer",
                                        comment: Some(
                                            "useMass => Use mass formulation instead of molar",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useSimpleAccumulation",
                                        type_name: "integer",
                                        comment: Some(
                                            "useSimpleAccumulation => Flag indicating whether simple accumulation form is used",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useTotalMassEquation",
                                        type_name: "integer",
                                        comment: Some(
                                            "useTotalMassEquation => Flag indicating whether total mass equation is used",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "CompositionalMultiphaseHybridFVMTypeChoice",
                                        type_name: "CompositionalMultiphaseHybridFVMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "CompositionalMultiphaseReservoirTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "CompositionalMultiphaseReservoirType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "wellSolverName => Name of the well solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "CompositionalMultiphaseReservoirTypeChoice",
                                        type_name: "CompositionalMultiphaseReservoirTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "CompositionalMultiphaseReservoirPoromechanicsTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "CompositionalMultiphaseReservoirPoromechanicsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "reservoirAndWellsSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "reservoirAndWellsSolverName => Name of the reservoirAndWells solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationMultiplier",
                                        type_name: "real64",
                                        comment: Some(
                                            "stabilizationMultiplier => Constant multiplier of stabilization strength.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationRegionNames",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "stabilizationRegionNames => Regions where stabilization is applied.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationType",
                                        type_name: "geos_stabilization_StabilizationType",
                                        comment: Some(
                                            "stabilizationType => Stabilization type. Options are:\nNone - Add no stabilization to mass equation,\nGlobal - Add stabilization to all faces,\nLocal - Add stabilization only to interiors of macro elements.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "CompositionalMultiphaseReservoirPoromechanicsTypeChoice",
                                        type_name: "CompositionalMultiphaseReservoirPoromechanicsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_stabilization_StabilizationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|None|Global|Local",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "CompositionalMultiphaseWellTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "WellControls",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "WellControlsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "CompositionalMultiphaseWellType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowLocalCompDensityChopping",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowLocalCompDensityChopping => Flag indicating whether local (cell-wise) chopping of negative compositions is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxCompFractionChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxCompFractionChange => Maximum (absolute) change in a component fraction between two Newton iterations",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxRelativePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxRelativePressureChange => Maximum (relative) change in pressure between two Newton iterations (recommended with rate control)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "useMass",
                                        type_name: "integer",
                                        comment: Some(
                                            "useMass => Use total mass equation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "writeCSV",
                                        type_name: "integer",
                                        comment: Some(
                                            "writeCSV => Write rates into a CSV file",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "CompositionalMultiphaseWellTypeChoice",
                                        type_name: "CompositionalMultiphaseWellTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "WellControlsType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "control",
                            type_name: "geos_WellControls_Control",
                            comment: Some(
                                "control => Well control. Valid options:\n* BHP\n* phaseVolRate\n* totalVolRate\n* massRate\n* uninitialized",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "enableCrossflow",
                            type_name: "integer",
                            comment: Some(
                                "enableCrossflow => Flag to enable crossflow. Currently only supported for injectors: \n - If the flag is set to 1, both reservoir-to-well flow and well-to-reservoir flow are allowed at the perforations. \n - If the flag is set to 0, we only allow well-to-reservoir flow at the perforations.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialPressureCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "initialPressureCoefficient => Tuning coefficient for the initial well pressure of rate-controlled wells: \n - Injector pressure at reference depth initialized as: (1+initialPressureCoefficient)*reservoirPressureAtClosestPerforation + density*g*( zRef - zPerf ) \n - Producer pressure at reference depth initialized as: (1-initialPressureCoefficient)*reservoirPressureAtClosestPerforation + density*g*( zRef - zPerf ) ",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "injectionStream",
                            type_name: "real64_array",
                            comment: Some(
                                "injectionStream => Global component densities of the injection stream [moles/m^3 or kg/m^3]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "injectionTemperature",
                            type_name: "real64",
                            comment: Some(
                                "injectionTemperature => Temperature of the injection stream [K]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceElevation",
                            type_name: "real64",
                            comment: Some(
                                "referenceElevation => Reference elevation where BHP control is enforced [m]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "statusTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "statusTableName => Name of the well status table when the status of the well is a time dependent function. \nIf the status function evaluates to a positive value at the current time, the well will be open otherwise the well will be shut.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "surfacePressure",
                            type_name: "real64",
                            comment: Some(
                                "surfacePressure => Surface pressure used to compute volumetric rates when surface conditions are used [Pa]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "surfaceTemperature",
                            type_name: "real64",
                            comment: Some(
                                "surfaceTemperature => Surface temperature used to compute volumetric rates when surface conditions are used [K]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetBHP",
                            type_name: "real64",
                            comment: Some(
                                "targetBHP => Target bottom-hole pressure [Pa]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetBHPTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "targetBHPTableName => Name of the BHP table when the rate is a time dependent function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetMassRate",
                            type_name: "real64",
                            comment: Some(
                                "targetMassRate => Target Mass Rate rate ( [kg^3/s])",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetMassRateTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "targetMassRateTableName => Name of the mass rate table when the rate is a time dependent function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetPhaseName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "targetPhaseName => Name of the target phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetPhaseRate",
                            type_name: "real64",
                            comment: Some(
                                "targetPhaseRate => Target phase volumetric rate (if useSurfaceConditions: [surface m^3/s]; else [reservoir m^3/s])",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetPhaseRateTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "targetPhaseRateTableName => Name of the phase rate table when the rate is a time dependent function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetTotalRate",
                            type_name: "real64",
                            comment: Some(
                                "targetTotalRate => Target total volumetric rate (if useSurfaceConditions: [surface m^3/s]; else [reservoir m^3/s])",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "targetTotalRateTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "targetTotalRateTableName => Name of the total rate table when the rate is a time dependent function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "type",
                            type_name: "geos_WellControls_Type",
                            comment: Some(
                                "type => Well type. Valid options:\n* producer\n* injector",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "useSurfaceConditions",
                            type_name: "integer",
                            comment: Some(
                                "useSurfaceConditions => Flag to specify whether rates are checked at surface or reservoir conditions.\nEqual to 1 for surface conditions, and to 0 for reservoir conditions",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_WellControls_Control",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|BHP|phaseVolRate|totalVolRate|massRate|uninitialized",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_WellControls_Type",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|producer|injector",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "ElasticFirstOrderSEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ElasticFirstOrderSEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "attenuationType",
                                        type_name: "geos_WaveSolverUtils_AttenuationType",
                                        comment: Some(
                                            "attenuationType => Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "dtSeismoTrace",
                                        type_name: "real64",
                                        comment: Some(
                                            "dtSeismoTrace => Time step for output pressure at receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "enableLifo",
                                        type_name: "integer",
                                        comment: Some(
                                            "enableLifo => Set to 1 to enable LIFO storage feature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forward",
                                        type_name: "integer",
                                        comment: Some(
                                            "forward => Set to 1 to compute forward propagation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnDevice",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnDevice => Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnHost",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnHost => Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoSize",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoSize => Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASGeometry",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "linearDASGeometry => Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASSamples",
                                        type_name: "integer",
                                        comment: Some(
                                            "linearDASSamples => Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "outputSeismoTrace",
                                        type_name: "integer",
                                        comment: Some(
                                            "outputSeismoTrace => Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "receiverCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "receiverCoordinates => Coordinates (x,y,z) of the receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rickerOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "rickerOrder => Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "saveFields",
                                        type_name: "integer",
                                        comment: Some(
                                            "saveFields => Set to 1 to save fields during forward and restore them during backward",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "shotIndex",
                                        type_name: "integer",
                                        comment: Some(
                                            "shotIndex => Set the current shot for temporary files",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsAnelasticityCoefficients",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsAnelasticityCoefficients => Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsReferenceAngularFrequencies",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsReferenceAngularFrequencies => Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "sourceCoordinates => Coordinates (x,y,z) of the sources",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceDelay",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceDelay => Source time delay (1 / f0 by default)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceFrequency",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceFrequency => Central frequency for the time source",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDAS",
                                        type_name: "geos_WaveSolverUtils_DASType",
                                        comment: Some(
                                            "useDAS => Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "ElasticFirstOrderSEMTypeChoice",
                                        type_name: "ElasticFirstOrderSEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "ElasticSEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ElasticSEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "attenuationType",
                                        type_name: "geos_WaveSolverUtils_AttenuationType",
                                        comment: Some(
                                            "attenuationType => Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "dtSeismoTrace",
                                        type_name: "real64",
                                        comment: Some(
                                            "dtSeismoTrace => Time step for output pressure at receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "enableLifo",
                                        type_name: "integer",
                                        comment: Some(
                                            "enableLifo => Set to 1 to enable LIFO storage feature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "forward",
                                        type_name: "integer",
                                        comment: Some(
                                            "forward => Set to 1 to compute forward propagation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnDevice",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnDevice => Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoOnHost",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoOnHost => Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "lifoSize",
                                        type_name: "integer",
                                        comment: Some(
                                            "lifoSize => Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASGeometry",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "linearDASGeometry => Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "linearDASSamples",
                                        type_name: "integer",
                                        comment: Some(
                                            "linearDASSamples => Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "outputSeismoTrace",
                                        type_name: "integer",
                                        comment: Some(
                                            "outputSeismoTrace => Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "receiverCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "receiverCoordinates => Coordinates (x,y,z) of the receivers",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rickerOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "rickerOrder => Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "saveFields",
                                        type_name: "integer",
                                        comment: Some(
                                            "saveFields => Set to 1 to save fields during forward and restore them during backward",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "shotIndex",
                                        type_name: "integer",
                                        comment: Some(
                                            "shotIndex => Set the current shot for temporary files",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsAnelasticityCoefficients",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsAnelasticityCoefficients => Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "slsReferenceAngularFrequencies",
                                        type_name: "real32_array",
                                        comment: Some(
                                            "slsReferenceAngularFrequencies => Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceCoordinates",
                                        type_name: "real64_array2d",
                                        comment: Some(
                                            "sourceCoordinates => Coordinates (x,y,z) of the sources",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceForce",
                                        type_name: "R1Tensor",
                                        comment: Some(
                                            "sourceForce => Force of the source: 3 real values for a vector source, and 6 real values for a tensor source (in Voigt notation).The default value is { 0, 0, 0 } (no net force).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "sourceMoment",
                                        type_name: "R2SymTensor",
                                        comment: Some(
                                            "sourceMoment => Moment of the source: 6 real values describing a symmetric tensor in Voigt notation.The default value is { 1, 1, 1, 0, 0, 0 } (diagonal moment, corresponding to a pure explosion).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceDelay",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceDelay => Source time delay (1 / f0 by default)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "timeSourceFrequency",
                                        type_name: "real32",
                                        comment: Some(
                                            "timeSourceFrequency => Central frequency for the time source",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDAS",
                                        type_name: "geos_WaveSolverUtils_DASType",
                                        comment: Some(
                                            "useDAS => Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useVTI",
                                        type_name: "integer",
                                        comment: Some(
                                            "useVTI => Flag to apply VTI anisotropy. The default is to use isotropic physic.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "ElasticSEMTypeChoice",
                                        type_name: "ElasticSEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "EmbeddedSurfaceGeneratorTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "EmbeddedSurfaceGeneratorType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "fractureRegion",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "fractureRegion => (no description available)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "mpiCommOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "mpiCommOrder => Flag to enable MPI consistent communication ordering",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetObjects",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetObjects => List of geometric objects that will be used to initialized the embedded surfaces/fractures.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "EmbeddedSurfaceGeneratorTypeChoice",
                                        type_name: "EmbeddedSurfaceGeneratorTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "FlowProppantTransportTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "FlowProppantTransportType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "proppantSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "proppantSolverName => Name of the proppant solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "FlowProppantTransportTypeChoice",
                                        type_name: "FlowProppantTransportTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "HydrofractureTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "HydrofractureType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "contactRelationName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "contactRelationName => Name of contact relation to enforce constraints on fracture boundary.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isMatrixPoroelastic",
                                        type_name: "integer",
                                        comment: Some(
                                            "isMatrixPoroelastic => (no description available)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxNumResolves",
                                        type_name: "integer",
                                        comment: Some(
                                            "maxNumResolves => Value to indicate how many resolves may be executed to perform surface generation after the execution of flow and mechanics solver. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newFractureInitializationType",
                                        type_name: "geos_HydrofractureSolver_lt_geos_SinglePhasePoromechanics_lt_geos_SinglePhaseBase_cm_-geos_SolidMechanicsLagrangianFEM_gt_-_gt__InitializationType",
                                        comment: Some(
                                            "newFractureInitializationType => Type of new fracture element initialization. Can be Pressure or Displacement. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "surfaceGeneratorName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "surfaceGeneratorName => Name of the surface generator to use in the hydrofracture solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "useQuasiNewton",
                                        type_name: "integer",
                                        comment: Some(
                                            "useQuasiNewton => (no description available)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "HydrofractureTypeChoice",
                                        type_name: "HydrofractureTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_HydrofractureSolver_lt_geos_SinglePhasePoromechanics_lt_geos_SinglePhaseBase_cm_-geos_SolidMechanicsLagrangianFEM_gt_-_gt__InitializationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Pressure|Displacement",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "LaplaceFEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "LaplaceFEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "fieldName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "fieldName => Name of field variable",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_LaplaceBaseH1_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => Time integration method. Options are:\n* SteadyState\n* ImplicitTransient",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "LaplaceFEMTypeChoice",
                                        type_name: "LaplaceFEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_LaplaceBaseH1_TimeIntegrationOption",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|SteadyState|ImplicitTransient",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "MultiphasePoromechanicsTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "MultiphasePoromechanicsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationMultiplier",
                                        type_name: "real64",
                                        comment: Some(
                                            "stabilizationMultiplier => Constant multiplier of stabilization strength.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationRegionNames",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "stabilizationRegionNames => Regions where stabilization is applied.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationType",
                                        type_name: "geos_stabilization_StabilizationType",
                                        comment: Some(
                                            "stabilizationType => Stabilization type. Options are:\nNone - Add no stabilization to mass equation,\nGlobal - Add stabilization to all faces,\nLocal - Add stabilization only to interiors of macro elements.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "MultiphasePoromechanicsTypeChoice",
                                        type_name: "MultiphasePoromechanicsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "MultiphasePoromechanicsReservoirTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "MultiphasePoromechanicsReservoirType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "poromechanicsSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "poromechanicsSolverName => Name of the poromechanics solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "wellSolverName => Name of the well solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "MultiphasePoromechanicsReservoirTypeChoice",
                                        type_name: "MultiphasePoromechanicsReservoirTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "PhaseFieldDamageFEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "PhaseFieldDamageFEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "damageUpperBound",
                                        type_name: "real64",
                                        comment: Some(
                                            "damageUpperBound => The upper bound of the damage",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "fieldName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "fieldName => name of field variable",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "irreversibilityFlag",
                                        type_name: "integer",
                                        comment: Some(
                                            "irreversibilityFlag => The flag to indicate whether to apply the irreversibility constraint",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "localDissipation",
                                        type_name: "geos_PhaseFieldDamageFEM_LocalDissipation",
                                        comment: Some(
                                            "localDissipation => Type of local dissipation function. Can be Linear or Quadratic",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_PhaseFieldDamageFEM_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => option for default time integration method",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "PhaseFieldDamageFEMTypeChoice",
                                        type_name: "PhaseFieldDamageFEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_PhaseFieldDamageFEM_LocalDissipation",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Linear|Quadratic",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_PhaseFieldDamageFEM_TimeIntegrationOption",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|SteadyState|ImplicitTransient|ExplicitTransient",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "PhaseFieldFractureTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "PhaseFieldFractureType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "damageSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "damageSolverName => Name of the damage solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "PhaseFieldFractureTypeChoice",
                                        type_name: "PhaseFieldFractureTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "ProppantTransportTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ProppantTransportType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "bridgingFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "bridgingFactor => Bridging factor used for bridging/screen-out calculation",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "criticalShieldsNumber",
                                        type_name: "real64",
                                        comment: Some(
                                            "criticalShieldsNumber => Critical Shields number",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "frictionCoefficient",
                                        type_name: "real64",
                                        comment: Some(
                                            "frictionCoefficient => Friction coefficient",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxProppantConcentration",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxProppantConcentration => Maximum proppant concentration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "proppantDensity",
                                        type_name: "real64",
                                        comment: Some(
                                            "proppantDensity => Proppant density",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "proppantDiameter",
                                        type_name: "real64",
                                        comment: Some(
                                            "proppantDiameter => Proppant diameter",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "updateProppantPacking",
                                        type_name: "integer",
                                        comment: Some(
                                            "updateProppantPacking => Flag that enables/disables proppant-packing update",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "ProppantTransportTypeChoice",
                                        type_name: "ProppantTransportTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "ReactiveCompositionalMultiphaseOBLTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ReactiveCompositionalMultiphaseOBLType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "OBLOperatorsTableFile",
                                        type_name: "path",
                                        comment: Some(
                                            "OBLOperatorsTableFile => File containing OBL operator values",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "allowLocalOBLChopping",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowLocalOBLChopping => Allow keeping solution within OBL limits",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "componentNames",
                                        type_name: "string_array",
                                        comment: Some(
                                            "componentNames => List of component names",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "enableEnergyBalance",
                                        type_name: "integer",
                                        comment: Some(
                                            "enableEnergyBalance => Enable energy balance calculation and temperature degree of freedom",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxCompFractionChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxCompFractionChange => Maximum (absolute) change in a component fraction between two Newton iterations",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "numComponents",
                                        type_name: "integer",
                                        comment: Some(
                                            "numComponents => Number of components",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "numPhases",
                                        type_name: "integer",
                                        comment: Some(
                                            "numPhases => Number of phases",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "phaseNames",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "phaseNames => List of fluid phases",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "transMultExp",
                                        type_name: "real64",
                                        comment: Some(
                                            "transMultExp => Exponent of dynamic transmissibility multiplier",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDARTSL2Norm",
                                        type_name: "integer",
                                        comment: Some(
                                            "useDARTSL2Norm => Use L2 norm calculation similar to one used DARTS",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "ReactiveCompositionalMultiphaseOBLTypeChoice",
                                        type_name: "ReactiveCompositionalMultiphaseOBLTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SeismicityRateTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SeismicityRateType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "backgroundStressingRate",
                                        type_name: "real64",
                                        comment: Some(
                                            "backgroundStressingRate => Background stressing rate",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "directEffect",
                                        type_name: "real64",
                                        comment: Some(
                                            "directEffect => Rate-and-state friction direct effect parameter",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "faultNormalDirection",
                                        type_name: "R1Tensor",
                                        comment: Some(
                                            "faultNormalDirection => Fault normal direction",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "faultShearDirection",
                                        type_name: "R1Tensor",
                                        comment: Some(
                                            "faultShearDirection => Fault shear direction",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stressSolverName",
                                        type_name: "string",
                                        comment: Some(
                                            "stressSolverName => Name of solver for computing stress",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SeismicityRateTypeChoice",
                                        type_name: "SeismicityRateTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhaseFVMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhaseFVMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "temperature",
                                        type_name: "real64",
                                        comment: Some(
                                            "temperature => Temperature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhaseFVMTypeChoice",
                                        type_name: "SinglePhaseFVMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhaseHybridFVMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhaseHybridFVMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "temperature",
                                        type_name: "real64",
                                        comment: Some(
                                            "temperature => Temperature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhaseHybridFVMTypeChoice",
                                        type_name: "SinglePhaseHybridFVMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhasePoromechanicsTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhasePoromechanicsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhasePoromechanicsTypeChoice",
                                        type_name: "SinglePhasePoromechanicsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhasePoromechanicsConformingFracturesTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhasePoromechanicsConformingFracturesType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhasePoromechanicsConformingFracturesTypeChoice",
                                        type_name: "SinglePhasePoromechanicsConformingFracturesTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhasePoromechanicsEmbeddedFracturesTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhasePoromechanicsEmbeddedFracturesType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhasePoromechanicsEmbeddedFracturesTypeChoice",
                                        type_name: "SinglePhasePoromechanicsEmbeddedFracturesTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhasePoromechanicsReservoirTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhasePoromechanicsReservoirType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "poromechanicsSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "poromechanicsSolverName => Name of the poromechanics solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "wellSolverName => Name of the well solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhasePoromechanicsReservoirTypeChoice",
                                        type_name: "SinglePhasePoromechanicsReservoirTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhaseProppantFVMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhaseProppantFVMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "allowNegativePressure",
                                        type_name: "integer",
                                        comment: Some(
                                            "allowNegativePressure => Flag indicating if negative pressure is allowed",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxAbsolutePressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxAbsolutePressureChange => Maximum (absolute) pressure change in a Newton iteration",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialPressureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialPressureChange => Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxSequentialTemperatureChange",
                                        type_name: "real64",
                                        comment: Some(
                                            "maxSequentialTemperatureChange => Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "temperature",
                                        type_name: "real64",
                                        comment: Some(
                                            "temperature => Temperature",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhaseProppantFVMTypeChoice",
                                        type_name: "SinglePhaseProppantFVMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhaseReservoirTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhaseReservoirType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "flowSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "flowSolverName => Name of the flow solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "wellSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "wellSolverName => Name of the well solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhaseReservoirTypeChoice",
                                        type_name: "SinglePhaseReservoirTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhaseReservoirPoromechanicsTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhaseReservoirPoromechanicsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isThermal",
                                        type_name: "integer",
                                        comment: Some(
                                            "isThermal => Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "reservoirAndWellsSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "reservoirAndWellsSolverName => Name of the reservoirAndWells solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "solidSolverName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "solidSolverName => Name of the solid solver used by the coupled solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhaseReservoirPoromechanicsTypeChoice",
                                        type_name: "SinglePhaseReservoirPoromechanicsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SinglePhaseWellTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "WellControls",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "WellControlsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SinglePhaseWellType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "writeCSV",
                                        type_name: "integer",
                                        comment: Some(
                                            "writeCSV => Write rates into a CSV file",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SinglePhaseWellTypeChoice",
                                        type_name: "SinglePhaseWellTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SolidMechanicsEmbeddedFracturesTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SolidMechanicsEmbeddedFracturesType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "massDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "massDamping => Value of mass based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxNumResolves",
                                        type_name: "integer",
                                        comment: Some(
                                            "maxNumResolves => Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkBeta",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkBeta => Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkGamma",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkGamma => Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stiffnessDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "stiffnessDamping => Value of stiffness based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "strainTheory",
                                        type_name: "integer",
                                        comment: Some(
                                            "strainTheory => Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useStaticCondensation",
                                        type_name: "integer",
                                        comment: Some(
                                            "useStaticCondensation => Defines whether to use static condensation or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SolidMechanicsEmbeddedFracturesTypeChoice",
                                        type_name: "SolidMechanicsEmbeddedFracturesTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "SolidMechanicsLagrangeContactTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SolidMechanicsLagrangeContactType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "massDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "massDamping => Value of mass based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxNumResolves",
                                        type_name: "integer",
                                        comment: Some(
                                            "maxNumResolves => Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkBeta",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkBeta => Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkGamma",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkGamma => Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "stabilizationName => Name of the stabilization to use in the lagrangian contact solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "stabilizationScalingCoefficient",
                                        type_name: "real64",
                                        comment: Some(
                                            "stabilizationScalingCoefficient => It be used to increase the scale of the stabilization entries. A value < 1.0 results in larger entries in the stabilization matrix.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stiffnessDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "stiffnessDamping => Value of stiffness based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "strainTheory",
                                        type_name: "integer",
                                        comment: Some(
                                            "strainTheory => Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SolidMechanicsLagrangeContactTypeChoice",
                                        type_name: "SolidMechanicsLagrangeContactTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SolidMechanicsLagrangianSSLETypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SolidMechanicsLagrangianSSLEType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "contactRelationName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "contactRelationName => Name of contact relation to enforce constraints on fracture boundary.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "massDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "massDamping => Value of mass based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxNumResolves",
                                        type_name: "integer",
                                        comment: Some(
                                            "maxNumResolves => Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkBeta",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkBeta => Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkGamma",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkGamma => Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stiffnessDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "stiffnessDamping => Value of stiffness based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "strainTheory",
                                        type_name: "integer",
                                        comment: Some(
                                            "strainTheory => Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "surfaceGeneratorName",
                                        type_name: "string",
                                        comment: Some(
                                            "surfaceGeneratorName => Name of the surface generator to use",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SolidMechanicsLagrangianSSLETypeChoice",
                                        type_name: "SolidMechanicsLagrangianSSLETypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SolidMechanics_LagrangianFEMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SolidMechanics_LagrangianFEMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "contactRelationName",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "contactRelationName => Name of contact relation to enforce constraints on fracture boundary.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "massDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "massDamping => Value of mass based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "maxNumResolves",
                                        type_name: "integer",
                                        comment: Some(
                                            "maxNumResolves => Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkBeta",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkBeta => Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "newmarkGamma",
                                        type_name: "real64",
                                        comment: Some(
                                            "newmarkGamma => Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "stiffnessDamping",
                                        type_name: "real64",
                                        comment: Some(
                                            "stiffnessDamping => Value of stiffness based damping coefficient. ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "strainTheory",
                                        type_name: "integer",
                                        comment: Some(
                                            "strainTheory => Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "surfaceGeneratorName",
                                        type_name: "string",
                                        comment: Some(
                                            "surfaceGeneratorName => Name of the surface generator to use",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SolidMechanics_LagrangianFEMTypeChoice",
                                        type_name: "SolidMechanics_LagrangianFEMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "SolidMechanics_MPMTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SolidMechanics_MPMType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "boundaryConditionTypes",
                                        type_name: "integer_array",
                                        comment: Some(
                                            "boundaryConditionTypes => Boundary conditions on x-, x+, y-, y+, z- and z+ faces. Options are:\n* Outflow\n* Symmetry",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "boxAverageHistory",
                                        type_name: "integer",
                                        comment: Some(
                                            "boxAverageHistory => Flag for whether to output box average history",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "contactGapCorrection",
                                        type_name: "integer",
                                        comment: Some(
                                            "contactGapCorrection => Flag for mitigating contact gaps",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "cpdiDomainScaling",
                                        type_name: "integer",
                                        comment: Some(
                                            "cpdiDomainScaling => Option for CPDI domain scaling",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "damageFieldPartitioning",
                                        type_name: "integer",
                                        comment: Some(
                                            "damageFieldPartitioning => Flag for using the gradient of the particle damage field to partition material into separate velocity fields",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "discretization",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "fTableInterpType",
                                        type_name: "integer",
                                        comment: Some(
                                            "fTableInterpType => The type of F table interpolation. Options are 0 (linear), 1 (cosine), 2 (quintic polynomial).",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "fTablePath",
                                        type_name: "path",
                                        comment: Some(
                                            "fTablePath => Path to f-table",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "frictionCoefficient",
                                        type_name: "real64",
                                        comment: Some(
                                            "frictionCoefficient => Coefficient of friction, currently assumed to be the same everywhere",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "needsNeighborList",
                                        type_name: "integer",
                                        comment: Some(
                                            "needsNeighborList => Flag for whether to construct neighbor list",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "neighborRadius",
                                        type_name: "real64",
                                        comment: Some(
                                            "neighborRadius => Neighbor radius for SPH-type calculations",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "planeStrain",
                                        type_name: "integer",
                                        comment: Some(
                                            "planeStrain => Flag for performing plane strain calculations",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "prescribedBcTable",
                                        type_name: "integer",
                                        comment: Some(
                                            "prescribedBcTable => Flag for whether to have time-dependent boundary condition types",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "prescribedBoundaryFTable",
                                        type_name: "integer",
                                        comment: Some(
                                            "prescribedBoundaryFTable => Flag for whether to have time-dependent boundary conditions described by a global background grid F",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "reactionHistory",
                                        type_name: "integer",
                                        comment: Some(
                                            "reactionHistory => Flag for whether to output face reaction history",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "separabilityMinDamage",
                                        type_name: "real64",
                                        comment: Some(
                                            "separabilityMinDamage => Damage threshold for field separability",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "solverProfiling",
                                        type_name: "integer",
                                        comment: Some(
                                            "solverProfiling => Flag for timing subroutines in the solver",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "surfaceDetection",
                                        type_name: "integer",
                                        comment: Some(
                                            "surfaceDetection => Flag for automatic surface detection on the 1st cycle",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "timeIntegrationOption",
                                        type_name: "geos_SolidMechanicsMPM_TimeIntegrationOption",
                                        comment: Some(
                                            "timeIntegrationOption => Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "treatFullyDamagedAsSingleField",
                                        type_name: "integer",
                                        comment: Some(
                                            "treatFullyDamagedAsSingleField => Whether to consolidate fully damaged fields into a single field. Nice for modeling damaged mush.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "useDamageAsSurfaceFlag",
                                        type_name: "integer",
                                        comment: Some(
                                            "useDamageAsSurfaceFlag => Indicates whether particle damage at the beginning of the simulation should be interpreted as a surface flag",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SolidMechanics_MPMTypeChoice",
                                        type_name: "SolidMechanics_MPMTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_SolidMechanicsMPM_TimeIntegrationOption",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "SurfaceGeneratorTypeChoice",
                cases: [
                    EnumCase {
                        name: "LinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NonlinearSolverParameters",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NonlinearSolverParametersType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "SurfaceGeneratorType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "cflFactor",
                                        type_name: "real64",
                                        comment: Some(
                                            "cflFactor => Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "fractureRegion",
                                        type_name: "groupNameRef",
                                        comment: Some(
                                            "fractureRegion => (no description available)",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "initialDt",
                                        type_name: "real64",
                                        comment: Some(
                                            "initialDt => Initial time-step value required by the solver to the event manager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "isPoroelastic",
                                        type_name: "integer",
                                        comment: Some(
                                            "isPoroelastic => Flag that defines whether the material is poroelastic or not.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "logLevel",
                                        type_name: "integer",
                                        comment: Some(
                                            "logLevel => Log level",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "mpiCommOrder",
                                        type_name: "integer",
                                        comment: Some(
                                            "mpiCommOrder => Flag to enable MPI consistent communication ordering",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "nodeBasedSIF",
                                        type_name: "integer",
                                        comment: Some(
                                            "nodeBasedSIF => Flag for choosing between node or edge based criteria: 1 for node based criterion",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            Option,
                                        ],
                                    },
                                    StructField {
                                        name: "rockToughness",
                                        type_name: "real64",
                                        comment: Some(
                                            "rockToughness => Rock toughness of the solid material",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "targetRegions",
                                        type_name: "groupNameRef_array",
                                        comment: Some(
                                            "targetRegions => Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "name",
                                        type_name: "groupName",
                                        comment: Some(
                                            "name => A name is required for any non-unique nodes",
                                        ),
                                        subtypes: [],
                                        source: Attribute,
                                        type_modifiers: [
                                            None,
                                        ],
                                    },
                                    StructField {
                                        name: "SurfaceGeneratorTypeChoice",
                                        type_name: "SurfaceGeneratorTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "TasksTypeChoice",
                cases: [
                    EnumCase {
                        name: "CompositionalMultiphaseReservoirPoromechanicsInitialization",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseReservoirPoromechanicsInitializationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseStatistics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseStatisticsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "HydrofractureInitialization",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "HydrofractureInitializationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "MultiphasePoromechanicsInitialization",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MultiphasePoromechanicsInitializationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PVTDriver",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PVTDriverType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PackCollection",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PackCollectionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ReactiveFluidDriver",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ReactiveFluidDriverType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "RelpermDriver",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "RelpermDriverType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhasePoromechanicsInitialization",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhasePoromechanicsInitializationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseReservoirPoromechanicsInitialization",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseReservoirPoromechanicsInitializationType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseStatistics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseStatisticsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanicsStateReset",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanicsStateResetType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidMechanicsStatistics",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidMechanicsStatisticsType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TriaxialDriver",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TriaxialDriverType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "TasksType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "TasksTypeChoice",
                                        type_name: "TasksTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "CompositionalMultiphaseReservoirPoromechanicsInitializationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "poromechanicsSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "poromechanicsSolverName => Name of the poromechanics solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidMechanicsStatisticsName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidMechanicsStatisticsName => Name of the solid mechanics statistics",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompositionalMultiphaseStatisticsType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "computeCFLNumbers",
                            type_name: "integer",
                            comment: Some(
                                "computeCFLNumbers => Flag to decide whether CFL numbers are computed or not",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "computeRegionStatistics",
                            type_name: "integer",
                            comment: Some(
                                "computeRegionStatistics => Flag to decide whether region statistics are computed or not",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flowSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "flowSolverName => Name of the flow solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "relpermThreshold",
                            type_name: "real64",
                            comment: Some(
                                "relpermThreshold => Flag to decide whether a phase is considered mobile (when the relperm is above the threshold) or immobile (when the relperm is below the threshold) in metric 2",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeCSV",
                            type_name: "integer",
                            comment: Some(
                                "writeCSV => Write statistics into a CSV file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "HydrofractureInitializationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "poromechanicsSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "poromechanicsSolverName => Name of the poromechanics solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidMechanicsStatisticsName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidMechanicsStatisticsName => Name of the solid mechanics statistics",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "MultiphasePoromechanicsInitializationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "poromechanicsSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "poromechanicsSolverName => Name of the poromechanics solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidMechanicsStatisticsName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidMechanicsStatisticsName => Name of the solid mechanics statistics",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PVTDriverType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "baseline",
                            type_name: "path",
                            comment: Some(
                                "baseline => Baseline file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "feedComposition",
                            type_name: "real64_array",
                            comment: Some(
                                "feedComposition => Feed composition array [mol fraction]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "fluid",
                            type_name: "groupNameRef",
                            comment: Some(
                                "fluid => Fluid to test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "output",
                            type_name: "string",
                            comment: Some(
                                "output => Output file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outputCompressibility",
                            type_name: "integer",
                            comment: Some(
                                "outputCompressibility => Flag to indicate that the total compressibility should be output",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outputMassDensity",
                            type_name: "integer",
                            comment: Some(
                                "outputMassDensity => Flag to indicate that the mass density of each phase should be output",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "outputPhaseComposition",
                            type_name: "integer",
                            comment: Some(
                                "outputPhaseComposition => Flag to indicate that phase compositions should be output",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "pressureControl",
                            type_name: "groupNameRef",
                            comment: Some(
                                "pressureControl => Function controlling pressure time history",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "steps",
                            type_name: "integer",
                            comment: Some(
                                "steps => Number of load steps to take",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "temperatureControl",
                            type_name: "groupNameRef",
                            comment: Some(
                                "temperatureControl => Function controlling temperature time history",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PackCollectionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "disableCoordCollection",
                            type_name: "integer",
                            comment: Some(
                                "disableCoordCollection => Whether or not to create coordinate meta-collectors if collected objects are mesh objects.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "fieldName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "fieldName => The name of the (packable) field associated with the specified object to retrieve data from",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "objectPath",
                            type_name: "groupNameRef",
                            comment: Some(
                                "objectPath => The name of the object from which to retrieve field values.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "onlyOnSetChange",
                            type_name: "integer",
                            comment: Some(
                                "onlyOnSetChange => Whether or not to only collect when the collected sets of indices change in any way.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "setNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "setNames => The set(s) for which to retrieve data.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ReactiveFluidDriverType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "baseline",
                            type_name: "path",
                            comment: Some(
                                "baseline => Baseline file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "feedComposition",
                            type_name: "real64_array",
                            comment: Some(
                                "feedComposition => Feed composition array: total concentration of the primary species ",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "fluid",
                            type_name: "groupNameRef",
                            comment: Some(
                                "fluid => Fluid to test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "output",
                            type_name: "string",
                            comment: Some(
                                "output => Output file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "pressureControl",
                            type_name: "groupNameRef",
                            comment: Some(
                                "pressureControl => Function controlling pressure time history",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "steps",
                            type_name: "integer",
                            comment: Some(
                                "steps => Number of load steps to take",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "temperatureControl",
                            type_name: "groupNameRef",
                            comment: Some(
                                "temperatureControl => Function controlling temperature time history",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "RelpermDriverType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "baseline",
                            type_name: "path",
                            comment: Some(
                                "baseline => Baseline file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "output",
                            type_name: "string",
                            comment: Some(
                                "output => Output file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "relperm",
                            type_name: "groupNameRef",
                            comment: Some(
                                "relperm => Relperm model to test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "steps",
                            type_name: "integer",
                            comment: Some(
                                "steps => Number of saturation steps to take",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SinglePhasePoromechanicsInitializationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "poromechanicsSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "poromechanicsSolverName => Name of the poromechanics solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidMechanicsStatisticsName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidMechanicsStatisticsName => Name of the solid mechanics statistics",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SinglePhaseReservoirPoromechanicsInitializationType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "poromechanicsSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "poromechanicsSolverName => Name of the poromechanics solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidMechanicsStatisticsName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidMechanicsStatisticsName => Name of the solid mechanics statistics",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SinglePhaseStatisticsType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "flowSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "flowSolverName => Name of the flow solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "writeCSV",
                            type_name: "integer",
                            comment: Some(
                                "writeCSV => Write statistics into a CSV file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SolidMechanicsStateResetType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "disableInelasticity",
                            type_name: "integer",
                            comment: Some(
                                "disableInelasticity => Flag to enable/disable inelastic behavior",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "resetDisplacements",
                            type_name: "integer",
                            comment: Some(
                                "resetDisplacements => Flag to reset displacements (and velocities)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidSolverName => Name of the solid mechanics solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SolidMechanicsStatisticsType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidSolverName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidSolverName => Name of the solid solver",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "writeCSV",
                            type_name: "integer",
                            comment: Some(
                                "writeCSV => Write statistics into a CSV file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TriaxialDriverType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "axialControl",
                            type_name: "groupNameRef",
                            comment: Some(
                                "axialControl => Function controlling axial stress or strain (depending on test mode)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "baseline",
                            type_name: "path",
                            comment: Some(
                                "baseline => Baseline file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "initialStress",
                            type_name: "real64",
                            comment: Some(
                                "initialStress => Initial stress (scalar used to set an isotropic stress state)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "material",
                            type_name: "groupNameRef",
                            comment: Some(
                                "material => Solid material to test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "mode",
                            type_name: "geos_TriaxialDriver_Mode",
                            comment: Some(
                                "mode => Test mode [stressControl, strainControl, mixedControl]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "output",
                            type_name: "string",
                            comment: Some(
                                "output => Output file",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "radialControl",
                            type_name: "groupNameRef",
                            comment: Some(
                                "radialControl => Function controlling radial stress or strain (depending on test mode)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "steps",
                            type_name: "integer",
                            comment: Some(
                                "steps => Number of load steps to take",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_TriaxialDriver_Mode",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|mixedControl|strainControl|stressControl",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Enum(
            Enum {
                name: "ConstitutiveTypeChoice",
                cases: [
                    EnumCase {
                        name: "BiotPorosity",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BiotPorosityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "BlackOilFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BlackOilFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "BrooksCoreyBakerRelativePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BrooksCoreyBakerRelativePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "BrooksCoreyCapillaryPressure",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BrooksCoreyCapillaryPressureType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "BrooksCoreyRelativePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BrooksCoreyRelativePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "BrooksCoreyStone2RelativePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "BrooksCoreyStone2RelativePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CO2BrineEzrokhiFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CO2BrineEzrokhiFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CO2BrineEzrokhiThermalFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CO2BrineEzrokhiThermalFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CO2BrinePhillipsFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CO2BrinePhillipsFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CO2BrinePhillipsThermalFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CO2BrinePhillipsThermalFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CarmanKozenyPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CarmanKozenyPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CeramicDamage",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CeramicDamageType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalMultiphaseFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalMultiphaseFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalTwoPhaseFluidPengRobinson",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalTwoPhaseFluidPengRobinsonType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalTwoPhaseFluidPengRobinsonLBC",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalTwoPhaseFluidPengRobinsonLBCType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalTwoPhaseFluidSoaveRedlichKwong",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalTwoPhaseFluidSoaveRedlichKwongType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompositionalTwoPhaseFluidSoaveRedlichKwongLBC",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompositionalTwoPhaseFluidSoaveRedlichKwongLBCType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSinglePhaseFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSinglePhaseFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidCarmanKozenyPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidCarmanKozenyPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidConstantPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidConstantPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidExponentialDecayPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidExponentialDecayPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidParallelPlatesPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidParallelPlatesPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidPressurePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidPressurePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidSlipDependentPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidSlipDependentPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "CompressibleSolidWillisRichardsPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CompressibleSolidWillisRichardsPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ConstantDiffusion",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ConstantDiffusionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ConstantPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ConstantPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "Coulomb",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CoulombType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "DamageElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DamageElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "DamageSpectralElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DamageSpectralElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "DamageVolDevElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DamageVolDevElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "DeadOilFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DeadOilFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "DelftEgg",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DelftEggType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "DruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "DruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElasticIsotropicPressureDependent",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElasticIsotropicPressureDependentType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElasticOrthotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElasticOrthotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ElasticTransverseIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ElasticTransverseIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ExponentialDecayPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ExponentialDecayPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ExtendedDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ExtendedDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "FrictionlessContact",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FrictionlessContactType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "JFunctionCapillaryPressure",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "JFunctionCapillaryPressureType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "LinearIsotropicDispersion",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "LinearIsotropicDispersionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ModifiedCamClay",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ModifiedCamClayType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "MultiPhaseConstantThermalConductivity",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MultiPhaseConstantThermalConductivityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "MultiPhaseVolumeWeightedThermalConductivity",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "MultiPhaseVolumeWeightedThermalConductivityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "NullModel",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "NullModelType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ParallelPlatesPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParallelPlatesPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ParticleFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParticleFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PerfectlyPlastic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PerfectlyPlasticType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousDamageElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousDamageElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousDamageSpectralElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousDamageSpectralElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousDamageVolDevElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousDamageVolDevElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousDelftEgg",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousDelftEggType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousElasticIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousElasticIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousElasticOrthotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousElasticOrthotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousElasticTransverseIsotropic",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousElasticTransverseIsotropicType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousExtendedDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousExtendedDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousModifiedCamClay",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousModifiedCamClayType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousViscoDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousViscoDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousViscoExtendedDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousViscoExtendedDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PorousViscoModifiedCamClay",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PorousViscoModifiedCamClayType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PressurePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PressurePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "PressurePorosity",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "PressurePorosityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ProppantPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ProppantPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ProppantPorosity",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ProppantPorosityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ProppantSlurryFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ProppantSlurryFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ProppantSolidProppantPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ProppantSolidProppantPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ReactiveBrine",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ReactiveBrineType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ReactiveBrineThermal",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ReactiveBrineThermalType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SinglePhaseConstantThermalConductivity",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SinglePhaseConstantThermalConductivityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SlipDependentPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SlipDependentPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SolidInternalEnergy",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SolidInternalEnergyType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TableCapillaryPressure",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TableCapillaryPressureType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TableRelativePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TableRelativePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "TableRelativePermeabilityHysteresis",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "TableRelativePermeabilityHysteresisType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ThermalCompressibleSinglePhaseFluid",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ThermalCompressibleSinglePhaseFluidType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VanGenuchtenBakerRelativePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VanGenuchtenBakerRelativePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VanGenuchtenCapillaryPressure",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VanGenuchtenCapillaryPressureType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "VanGenuchtenStone2RelativePermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "VanGenuchtenStone2RelativePermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ViscoDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ViscoDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ViscoExtendedDruckerPrager",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ViscoExtendedDruckerPragerType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "ViscoModifiedCamClay",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ViscoModifiedCamClayType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "WillisRichardsPermeability",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "WillisRichardsPermeabilityType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ConstitutiveType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "ConstitutiveTypeChoice",
                                        type_name: "ConstitutiveTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "BiotPorosityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultGrainBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultGrainBulkModulus => Grain bulk modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultPorosityTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultPorosityTEC => Default thermal expansion coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultReferencePorosity",
                            type_name: "real64",
                            comment: Some(
                                "defaultReferencePorosity => Default value of the reference porosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "useUniaxialFixedStress",
                            type_name: "integer",
                            comment: Some(
                                "useUniaxialFixedStress => Flag enabling uniaxial approximation in fixed stress update",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "BlackOilFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "hydrocarbonFormationVolFactorTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "hydrocarbonFormationVolFactorTableNames => List of formation volume factor TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "hydrocarbonViscosityTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "hydrocarbonViscosityTableNames => List of viscosity TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "surfaceDensities",
                            type_name: "real64_array",
                            comment: Some(
                                "surfaceDensities => List of surface mass densities for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tableFiles",
                            type_name: "path_array",
                            comment: Some(
                                "tableFiles => List of filenames with input PVT tables (one per phase)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterCompressibility",
                            type_name: "real64",
                            comment: Some(
                                "waterCompressibility => Water compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterFormationVolumeFactor",
                            type_name: "real64",
                            comment: Some(
                                "waterFormationVolumeFactor => Water formation volume factor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterReferencePressure",
                            type_name: "real64",
                            comment: Some(
                                "waterReferencePressure => Water reference pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterViscosity",
                            type_name: "real64",
                            comment: Some(
                                "waterViscosity => Water viscosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "BrooksCoreyBakerRelativePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "gasOilRelPermExponent",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermExponent => Rel perm power law exponent for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "gasOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermMaxValue => Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermExponent",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermExponent => Rel perm power law exponent for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermMaxValue => Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "BrooksCoreyCapillaryPressureType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "capPressureEpsilon",
                            type_name: "real64",
                            comment: Some(
                                "capPressureEpsilon => Wetting-phase saturation at which the max cap. pressure is attained; used to avoid infinite cap. pressure values for saturations close to zero",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseCapPressureExponentInv",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseCapPressureExponentInv => Inverse of capillary power law exponent for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseEntryPressure",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseEntryPressure => Entry pressure value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "BrooksCoreyRelativePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "phaseRelPermExponent",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseRelPermExponent => Minimum relative permeability power law exponent for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseRelPermMaxValue => Maximum relative permeability value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "BrooksCoreyStone2RelativePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "gasOilRelPermExponent",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermExponent => Rel perm power law exponent for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "gasOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermMaxValue => Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermExponent",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermExponent => Rel perm power law exponent for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermMaxValue => Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CO2BrineEzrokhiFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flashModelParaFile",
                            type_name: "path",
                            comment: Some(
                                "flashModelParaFile => Name of the file defining the parameters of the flash model",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phasePVTParaFiles",
                            type_name: "path_array",
                            comment: Some(
                                "phasePVTParaFiles => Names of the files defining the parameters of the viscosity and density models",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solubilityTableNames",
                            type_name: "string_array",
                            comment: Some(
                                "solubilityTableNames => Names of solubility tables for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CO2BrineEzrokhiThermalFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flashModelParaFile",
                            type_name: "path",
                            comment: Some(
                                "flashModelParaFile => Name of the file defining the parameters of the flash model",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phasePVTParaFiles",
                            type_name: "path_array",
                            comment: Some(
                                "phasePVTParaFiles => Names of the files defining the parameters of the viscosity and density models",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solubilityTableNames",
                            type_name: "string_array",
                            comment: Some(
                                "solubilityTableNames => Names of solubility tables for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CO2BrinePhillipsFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flashModelParaFile",
                            type_name: "path",
                            comment: Some(
                                "flashModelParaFile => Name of the file defining the parameters of the flash model",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phasePVTParaFiles",
                            type_name: "path_array",
                            comment: Some(
                                "phasePVTParaFiles => Names of the files defining the parameters of the viscosity and density models",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solubilityTableNames",
                            type_name: "string_array",
                            comment: Some(
                                "solubilityTableNames => Names of solubility tables for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CO2BrinePhillipsThermalFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flashModelParaFile",
                            type_name: "path",
                            comment: Some(
                                "flashModelParaFile => Name of the file defining the parameters of the flash model",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "logLevel",
                            type_name: "integer",
                            comment: Some(
                                "logLevel => Log level",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phasePVTParaFiles",
                            type_name: "path_array",
                            comment: Some(
                                "phasePVTParaFiles => Names of the files defining the parameters of the viscosity and density models",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solubilityTableNames",
                            type_name: "string_array",
                            comment: Some(
                                "solubilityTableNames => Names of solubility tables for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CarmanKozenyPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "anisotropy",
                            type_name: "R1Tensor",
                            comment: Some(
                                "anisotropy => Anisotropy factors for three permeability components.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "particleDiameter",
                            type_name: "real64",
                            comment: Some(
                                "particleDiameter => Diameter of the spherical particles.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "sphericity",
                            type_name: "real64",
                            comment: Some(
                                "sphericity => Sphericity of the particles.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CeramicDamageType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressiveStrength",
                            type_name: "real64",
                            comment: Some(
                                "compressiveStrength => Compressive strength",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "crackSpeed",
                            type_name: "real64",
                            comment: Some(
                                "crackSpeed => Crack speed",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maximumStrength",
                            type_name: "real64",
                            comment: Some(
                                "maximumStrength => Maximum theoretical strength",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tensileStrength",
                            type_name: "real64",
                            comment: Some(
                                "tensileStrength => Tensile strength",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompositionalMultiphaseFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentAcentricFactor",
                            type_name: "real64_array",
                            comment: Some(
                                "componentAcentricFactor => Component acentric factors",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentBinaryCoeff",
                            type_name: "real64_array2d",
                            comment: Some(
                                "componentBinaryCoeff => Table of binary interaction coefficients",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentCriticalPressure",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalPressure => Component critical pressures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalTemperature",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalTemperature => Component critical temperatures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentVolumeShift",
                            type_name: "real64_array",
                            comment: Some(
                                "componentVolumeShift => Component volume shifts",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "constantPhaseViscosity",
                            type_name: "real64_array",
                            comment: Some(
                                "constantPhaseViscosity => Viscosity for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "equationsOfState",
                            type_name: "string_array",
                            comment: Some(
                                "equationsOfState => List of equation of state types for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompositionalTwoPhaseFluidPengRobinsonType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentAcentricFactor",
                            type_name: "real64_array",
                            comment: Some(
                                "componentAcentricFactor => Component acentric factors",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentBinaryCoeff",
                            type_name: "real64_array2d",
                            comment: Some(
                                "componentBinaryCoeff => Table of binary interaction coefficients",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentCriticalPressure",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalPressure => Component critical pressures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalTemperature",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalTemperature => Component critical temperatures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalVolume",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalVolume => Component critical volumnes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentVolumeShift",
                            type_name: "real64_array",
                            comment: Some(
                                "componentVolumeShift => Component volume shifts",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompositionalTwoPhaseFluidPengRobinsonLBCType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentAcentricFactor",
                            type_name: "real64_array",
                            comment: Some(
                                "componentAcentricFactor => Component acentric factors",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentBinaryCoeff",
                            type_name: "real64_array2d",
                            comment: Some(
                                "componentBinaryCoeff => Table of binary interaction coefficients",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentCriticalPressure",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalPressure => Component critical pressures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalTemperature",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalTemperature => Component critical temperatures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalVolume",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalVolume => Component critical volumnes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentVolumeShift",
                            type_name: "real64_array",
                            comment: Some(
                                "componentVolumeShift => Component volume shifts",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompositionalTwoPhaseFluidSoaveRedlichKwongType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentAcentricFactor",
                            type_name: "real64_array",
                            comment: Some(
                                "componentAcentricFactor => Component acentric factors",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentBinaryCoeff",
                            type_name: "real64_array2d",
                            comment: Some(
                                "componentBinaryCoeff => Table of binary interaction coefficients",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentCriticalPressure",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalPressure => Component critical pressures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalTemperature",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalTemperature => Component critical temperatures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalVolume",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalVolume => Component critical volumnes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentVolumeShift",
                            type_name: "real64_array",
                            comment: Some(
                                "componentVolumeShift => Component volume shifts",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompositionalTwoPhaseFluidSoaveRedlichKwongLBCType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentAcentricFactor",
                            type_name: "real64_array",
                            comment: Some(
                                "componentAcentricFactor => Component acentric factors",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentBinaryCoeff",
                            type_name: "real64_array2d",
                            comment: Some(
                                "componentBinaryCoeff => Table of binary interaction coefficients",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentCriticalPressure",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalPressure => Component critical pressures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalTemperature",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalTemperature => Component critical temperatures",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentCriticalVolume",
                            type_name: "real64_array",
                            comment: Some(
                                "componentCriticalVolume => Component critical volumnes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentVolumeShift",
                            type_name: "real64_array",
                            comment: Some(
                                "componentVolumeShift => Component volume shifts",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSinglePhaseFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressibility",
                            type_name: "real64",
                            comment: Some(
                                "compressibility => Fluid compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default value for density.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultViscosity",
                            type_name: "real64",
                            comment: Some(
                                "defaultViscosity => Default value for viscosity.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "densityModelType",
                            type_name: "geos_constitutive_ExponentApproximationType",
                            comment: Some(
                                "densityModelType => Type of density model. Valid options:\n* exponential\n* linear\n* quadratic",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceDensity",
                            type_name: "real64",
                            comment: Some(
                                "referenceDensity => Reference fluid density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referencePressure",
                            type_name: "real64",
                            comment: Some(
                                "referencePressure => Reference pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceViscosity",
                            type_name: "real64",
                            comment: Some(
                                "referenceViscosity => Reference fluid viscosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "viscosibility",
                            type_name: "real64",
                            comment: Some(
                                "viscosibility => Fluid viscosity exponential coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "viscosityModelType",
                            type_name: "geos_constitutive_ExponentApproximationType",
                            comment: Some(
                                "viscosityModelType => Type of viscosity model. Valid options:\n* exponential\n* linear\n* quadratic",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_constitutive_ExponentApproximationType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|exponential|linear|quadratic",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidCarmanKozenyPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidConstantPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidExponentialDecayPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidParallelPlatesPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidPressurePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidSlipDependentPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CompressibleSolidWillisRichardsPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ConstantDiffusionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultPhaseDiffusivityMultipliers",
                            type_name: "real64_array",
                            comment: Some(
                                "defaultPhaseDiffusivityMultipliers => List of phase diffusivity multipliers",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "diffusivityComponents",
                            type_name: "real64_array",
                            comment: Some(
                                "diffusivityComponents => xx, yy, and zz components of a diffusivity tensor [m^2/s]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "string_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ConstantPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityComponents",
                            type_name: "R1Tensor",
                            comment: Some(
                                "permeabilityComponents => xx, yy and zz components of a diagonal permeability tensor.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "CoulombType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "apertureTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "apertureTableName => Name of the aperture table",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "apertureTolerance",
                            type_name: "real64",
                            comment: Some(
                                "apertureTolerance => Value to be used to avoid floating point errors in expressions involving aperture. For example in the case of dividing by the actual aperture (not the effective aperture that results from the aperture function) this value may be used to avoid the 1/0 error. Note that this value may have some physical significance in its usage, as it may be used to smooth out highly nonlinear behavior associated with 1/0 in addition to avoiding the 1/0 error.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "cohesion",
                            type_name: "real64",
                            comment: Some(
                                "cohesion => Cohesion",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "displacementJumpThreshold",
                            type_name: "real64",
                            comment: Some(
                                "displacementJumpThreshold => A threshold valued to determine whether a fracture is open or not.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "frictionCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "frictionCoefficient => Friction coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "penaltyStiffness",
                            type_name: "real64",
                            comment: Some(
                                "penaltyStiffness => Value of the penetration penalty stiffness. Units of Pressure/length",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "shearStiffness",
                            type_name: "real64",
                            comment: Some(
                                "shearStiffness => Value of the shear elastic stiffness. Units of Pressure/length",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DamageElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressiveStrength",
                            type_name: "real64",
                            comment: Some(
                                "compressiveStrength => Compressive strength from the uniaxial compression test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "criticalFractureEnergy",
                            type_name: "real64",
                            comment: Some(
                                "criticalFractureEnergy => Critical fracture energy",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "criticalStrainEnergy",
                            type_name: "real64",
                            comment: Some(
                                "criticalStrainEnergy => Critical stress in a 1d tension test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "degradationLowerLimit",
                            type_name: "real64",
                            comment: Some(
                                "degradationLowerLimit => The lower limit of the degradation function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "deltaCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "deltaCoefficient => Coefficient in the calculation of the external driving force",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "extDrivingForceFlag",
                            type_name: "integer",
                            comment: Some(
                                "extDrivingForceFlag => Whether to have external driving force. Can be 0 or 1",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lengthScale",
                            type_name: "real64",
                            comment: Some(
                                "lengthScale => Length scale l in the phase-field equation",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tensileStrength",
                            type_name: "real64",
                            comment: Some(
                                "tensileStrength => Tensile strength from the uniaxial tension test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DamageSpectralElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressiveStrength",
                            type_name: "real64",
                            comment: Some(
                                "compressiveStrength => Compressive strength from the uniaxial compression test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "criticalFractureEnergy",
                            type_name: "real64",
                            comment: Some(
                                "criticalFractureEnergy => Critical fracture energy",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "criticalStrainEnergy",
                            type_name: "real64",
                            comment: Some(
                                "criticalStrainEnergy => Critical stress in a 1d tension test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "degradationLowerLimit",
                            type_name: "real64",
                            comment: Some(
                                "degradationLowerLimit => The lower limit of the degradation function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "deltaCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "deltaCoefficient => Coefficient in the calculation of the external driving force",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "extDrivingForceFlag",
                            type_name: "integer",
                            comment: Some(
                                "extDrivingForceFlag => Whether to have external driving force. Can be 0 or 1",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lengthScale",
                            type_name: "real64",
                            comment: Some(
                                "lengthScale => Length scale l in the phase-field equation",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tensileStrength",
                            type_name: "real64",
                            comment: Some(
                                "tensileStrength => Tensile strength from the uniaxial tension test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DamageVolDevElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressiveStrength",
                            type_name: "real64",
                            comment: Some(
                                "compressiveStrength => Compressive strength from the uniaxial compression test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "criticalFractureEnergy",
                            type_name: "real64",
                            comment: Some(
                                "criticalFractureEnergy => Critical fracture energy",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "criticalStrainEnergy",
                            type_name: "real64",
                            comment: Some(
                                "criticalStrainEnergy => Critical stress in a 1d tension test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "degradationLowerLimit",
                            type_name: "real64",
                            comment: Some(
                                "degradationLowerLimit => The lower limit of the degradation function",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "deltaCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "deltaCoefficient => Coefficient in the calculation of the external driving force",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "extDrivingForceFlag",
                            type_name: "integer",
                            comment: Some(
                                "extDrivingForceFlag => Whether to have external driving force. Can be 0 or 1",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "lengthScale",
                            type_name: "real64",
                            comment: Some(
                                "lengthScale => Length scale l in the phase-field equation",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tensileStrength",
                            type_name: "real64",
                            comment: Some(
                                "tensileStrength => Tensile strength from the uniaxial tension test",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DeadOilFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "hydrocarbonFormationVolFactorTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "hydrocarbonFormationVolFactorTableNames => List of formation volume factor TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "hydrocarbonViscosityTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "hydrocarbonViscosityTableNames => List of viscosity TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "surfaceDensities",
                            type_name: "real64_array",
                            comment: Some(
                                "surfaceDensities => List of surface mass densities for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "tableFiles",
                            type_name: "path_array",
                            comment: Some(
                                "tableFiles => List of filenames with input PVT tables (one per phase)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterCompressibility",
                            type_name: "real64",
                            comment: Some(
                                "waterCompressibility => Water compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterFormationVolumeFactor",
                            type_name: "real64",
                            comment: Some(
                                "waterFormationVolumeFactor => Water formation volume factor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterReferencePressure",
                            type_name: "real64",
                            comment: Some(
                                "waterReferencePressure => Water reference pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterViscosity",
                            type_name: "real64",
                            comment: Some(
                                "waterViscosity => Water viscosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DelftEggType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultCslSlope",
                            type_name: "real64",
                            comment: Some(
                                "defaultCslSlope => Slope of the critical state line",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPreConsolidationPressure",
                            type_name: "real64",
                            comment: Some(
                                "defaultPreConsolidationPressure => Initial preconsolidation pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRecompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultRecompressionIndex => Recompresion Index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShapeParameter",
                            type_name: "real64",
                            comment: Some(
                                "defaultShapeParameter => Shape parameter for the yield surface",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultVirginCompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultVirginCompressionIndex => Virgin compression index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "DruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultCohesion",
                            type_name: "real64",
                            comment: Some(
                                "defaultCohesion => Initial cohesion",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDilationAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultDilationAngle => Dilation angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultFrictionAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultFrictionAngle => Friction angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultHardeningRate",
                            type_name: "real64",
                            comment: Some(
                                "defaultHardeningRate => Cohesion hardening/softening rate",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ElasticIsotropicPressureDependentType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRecompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultRecompressionIndex => Recompresion Index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRefPressure",
                            type_name: "real64",
                            comment: Some(
                                "defaultRefPressure => Reference Pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRefStrainVol",
                            type_name: "real64",
                            comment: Some(
                                "defaultRefStrainVol => Reference Volumetric Strain",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Elastic Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ElasticOrthotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultC11",
                            type_name: "real64",
                            comment: Some(
                                "defaultC11 => Default C11 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC12",
                            type_name: "real64",
                            comment: Some(
                                "defaultC12 => Default C12 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC13",
                            type_name: "real64",
                            comment: Some(
                                "defaultC13 => Default C13 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC22",
                            type_name: "real64",
                            comment: Some(
                                "defaultC22 => Default C22 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC23",
                            type_name: "real64",
                            comment: Some(
                                "defaultC23 => Default C23 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC33",
                            type_name: "real64",
                            comment: Some(
                                "defaultC33 => Default C33 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC44",
                            type_name: "real64",
                            comment: Some(
                                "defaultC44 => Default C44 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC55",
                            type_name: "real64",
                            comment: Some(
                                "defaultC55 => Default C55 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC66",
                            type_name: "real64",
                            comment: Some(
                                "defaultC66 => Default C66 Component of Voigt Stiffness Tensor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultE1",
                            type_name: "real64",
                            comment: Some(
                                "defaultE1 => Default Young's Modulus E1",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultE2",
                            type_name: "real64",
                            comment: Some(
                                "defaultE2 => Default Young's Modulus E2",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultE3",
                            type_name: "real64",
                            comment: Some(
                                "defaultE3 => Default Young's Modulus E3",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultG12",
                            type_name: "real64",
                            comment: Some(
                                "defaultG12 => Default Shear Modulus G12",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultG13",
                            type_name: "real64",
                            comment: Some(
                                "defaultG13 => Default Shear Modulus G13",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultG23",
                            type_name: "real64",
                            comment: Some(
                                "defaultG23 => Default Shear Modulus G23",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultNu12",
                            type_name: "real64",
                            comment: Some(
                                "defaultNu12 => Default Poission's Ratio Nu12",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultNu13",
                            type_name: "real64",
                            comment: Some(
                                "defaultNu13 => Default Poission's Ratio Nu13",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultNu23",
                            type_name: "real64",
                            comment: Some(
                                "defaultNu23 => Default Poission's Ratio Nu23",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ElasticTransverseIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultC11",
                            type_name: "real64",
                            comment: Some(
                                "defaultC11 => Default Stiffness Parameter C11",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC13",
                            type_name: "real64",
                            comment: Some(
                                "defaultC13 => Default Stiffness Parameter C13",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC33",
                            type_name: "real64",
                            comment: Some(
                                "defaultC33 => Default Stiffness Parameter C33",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC44",
                            type_name: "real64",
                            comment: Some(
                                "defaultC44 => Default Stiffness Parameter C44",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultC66",
                            type_name: "real64",
                            comment: Some(
                                "defaultC66 => Default Stiffness Parameter C66",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatioAxialTransverse",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatioAxialTransverse => Default Axial-Transverse Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatioTransverse",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatioTransverse => Default Transverse Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulusAxialTransverse",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulusAxialTransverse => Default Axial-Transverse Shear Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulusAxial",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulusAxial => Default Axial Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulusTransverse",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulusTransverse => Default Transverse Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ExponentialDecayPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "empiricalConstant",
                            type_name: "real64",
                            comment: Some(
                                "empiricalConstant => an empirical constant.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "initialPermeability",
                            type_name: "R1Tensor",
                            comment: Some(
                                "initialPermeability =>  initial permeability of the fracture.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ExtendedDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultCohesion",
                            type_name: "real64",
                            comment: Some(
                                "defaultCohesion => Initial cohesion",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDilationRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultDilationRatio => Dilation ratio [0,1] (ratio = tan dilationAngle / tan frictionAngle)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultHardening",
                            type_name: "real64",
                            comment: Some(
                                "defaultHardening => Hardening parameter (hardening rate is faster for smaller values)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultInitialFrictionAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultInitialFrictionAngle => Initial friction angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultResidualFrictionAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultResidualFrictionAngle => Residual friction angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "FrictionlessContactType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "apertureTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "apertureTableName => Name of the aperture table",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "apertureTolerance",
                            type_name: "real64",
                            comment: Some(
                                "apertureTolerance => Value to be used to avoid floating point errors in expressions involving aperture. For example in the case of dividing by the actual aperture (not the effective aperture that results from the aperture function) this value may be used to avoid the 1/0 error. Note that this value may have some physical significance in its usage, as it may be used to smooth out highly nonlinear behavior associated with 1/0 in addition to avoiding the 1/0 error.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "displacementJumpThreshold",
                            type_name: "real64",
                            comment: Some(
                                "displacementJumpThreshold => A threshold valued to determine whether a fracture is open or not.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "penaltyStiffness",
                            type_name: "real64",
                            comment: Some(
                                "penaltyStiffness => Value of the penetration penalty stiffness. Units of Pressure/length",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "shearStiffness",
                            type_name: "real64",
                            comment: Some(
                                "shearStiffness => Value of the shear elastic stiffness. Units of Pressure/length",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "JFunctionCapillaryPressureType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "nonWettingIntermediateJFunctionTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "nonWettingIntermediateJFunctionTableName => J-function table (dimensionless) for the pair (non-wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingJFunctionTableName to specify the table names.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "nonWettingIntermediateSurfaceTension",
                            type_name: "real64",
                            comment: Some(
                                "nonWettingIntermediateSurfaceTension => Surface tension [N/m] for the pair (non-wetting phase, intermediate phase)\nIf you have a value in [dyne/cm], divide it by 1000 to obtain the value in [N/m]\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingSurfaceTension to specify the surface tensions.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "permeabilityDirection",
                            type_name: "geos_constitutive_JFunctionCapillaryPressure_PermeabilityDirection",
                            comment: Some(
                                "permeabilityDirection => Permeability direction. Options are:\nXY - use the average of the permeabilities in the x and y directions,\nX - only use the permeability in the x direction,\nY - only use the permeability in the y direction,\nZ - only use the permeability in the z direction.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "permeabilityExponent",
                            type_name: "real64",
                            comment: Some(
                                "permeabilityExponent => Permeability exponent",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityExponent",
                            type_name: "real64",
                            comment: Some(
                                "porosityExponent => Porosity exponent",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingIntermediateJFunctionTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "wettingIntermediateJFunctionTableName => J-function table (dimensionless) for the pair (wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingJFunctionTableName to specify the table names.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingIntermediateSurfaceTension",
                            type_name: "real64",
                            comment: Some(
                                "wettingIntermediateSurfaceTension => Surface tension [N/m] for the pair (wetting phase, intermediate phase)\nIf you have a value in [dyne/cm], divide it by 1000 to obtain the value in [N/m]\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingSurfaceTension to specify the surface tensions.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingNonWettingJFunctionTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "wettingNonWettingJFunctionTableName => J-function table (dimensionless) for the pair (wetting phase, non-wetting phase)\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateJFunctionTableName and nonWettingIntermediateJFunctionTableName to specify the table names.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingNonWettingSurfaceTension",
                            type_name: "real64",
                            comment: Some(
                                "wettingNonWettingSurfaceTension => Surface tension [N/m] for the pair (wetting phase, non-wetting phase)\nIf you have a value in [dyne/cm], divide it by 1000 to obtain the value in [N/m]\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateSurfaceTension and nonWettingIntermediateSurfaceTension to specify the surface tensions.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_constitutive_JFunctionCapillaryPressure_PermeabilityDirection",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|XY|X|Y|Z",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "LinearIsotropicDispersionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "longitudinalDispersivity",
                            type_name: "real64",
                            comment: Some(
                                "longitudinalDispersivity => Longitudinal dispersivity [m]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ModifiedCamClayType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultCslSlope",
                            type_name: "real64",
                            comment: Some(
                                "defaultCslSlope => Slope of the critical state line",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPreConsolidationPressure",
                            type_name: "real64",
                            comment: Some(
                                "defaultPreConsolidationPressure => Initial preconsolidation pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRecompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultRecompressionIndex => Recompresion Index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRefPressure",
                            type_name: "real64",
                            comment: Some(
                                "defaultRefPressure => Reference Pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRefStrainVol",
                            type_name: "real64",
                            comment: Some(
                                "defaultRefStrainVol => Reference Volumetric Strain",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Elastic Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultVirginCompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultVirginCompressionIndex => Virgin compression index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "MultiPhaseConstantThermalConductivityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "thermalConductivityComponents",
                            type_name: "R1Tensor",
                            comment: Some(
                                "thermalConductivityComponents => xx, yy, and zz components of a diagonal thermal conductivity tensor [J/(s.m.K)]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "MultiPhaseVolumeWeightedThermalConductivityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "phaseThermalConductivity",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseThermalConductivity => Phase thermal conductivity [W/(m.K)]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "rockThermalConductivityComponents",
                            type_name: "R1Tensor",
                            comment: Some(
                                "rockThermalConductivityComponents => xx, yy, and zz components of a diagonal rock thermal conductivity tensor [W/(m.K)]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "NullModelType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ParallelPlatesPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "transversalPermeability",
                            type_name: "real64",
                            comment: Some(
                                "transversalPermeability => Default value of the permeability normal to the surface. If not specified the permeability is updated using the cubic law. ",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ParticleFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "collisionAlpha",
                            type_name: "real64",
                            comment: Some(
                                "collisionAlpha => Collision alpha coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "collisionBeta",
                            type_name: "real64",
                            comment: Some(
                                "collisionBeta => Collision beta coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "fluidViscosity",
                            type_name: "real64",
                            comment: Some(
                                "fluidViscosity => Fluid viscosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "hinderedSettlingCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "hinderedSettlingCoefficient => Hindered settling coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "isCollisionalSlip",
                            type_name: "integer",
                            comment: Some(
                                "isCollisionalSlip => Whether the collisional component of the slip velocity is considered",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxProppantConcentration",
                            type_name: "real64",
                            comment: Some(
                                "maxProppantConcentration => Max proppant concentration",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "particleSettlingModel",
                            type_name: "geos_constitutive_ParticleSettlingModel",
                            comment: Some(
                                "particleSettlingModel => Particle settling velocity model. Valid options:\n* Stokes\n* Intermediate\n* Turbulence",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "proppantDensity",
                            type_name: "real64",
                            comment: Some(
                                "proppantDensity => Proppant density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "proppantDiameter",
                            type_name: "real64",
                            comment: Some(
                                "proppantDiameter => Proppant diameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "slipConcentration",
                            type_name: "real64",
                            comment: Some(
                                "slipConcentration => Slip concentration",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "sphericity",
                            type_name: "real64",
                            comment: Some(
                                "sphericity => Sphericity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_constitutive_ParticleSettlingModel",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Stokes|Intermediate|Turbulence",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "PerfectlyPlasticType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYieldStress",
                            type_name: "real64",
                            comment: Some(
                                "defaultYieldStress => Default yield stress",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousDamageElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousDamageSpectralElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousDamageVolDevElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousDelftEggType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousElasticIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousElasticOrthotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousElasticTransverseIsotropicType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousExtendedDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousModifiedCamClayType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousViscoDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousViscoExtendedDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PorousViscoModifiedCamClayType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "PressurePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "maxPermeability",
                            type_name: "real64",
                            comment: Some(
                                "maxPermeability => Max. permeability can be reached.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "pressureDependenceConstants",
                            type_name: "R1Tensor",
                            comment: Some(
                                "pressureDependenceConstants => Pressure dependence coefficients for each permeability component.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "pressureModelType",
                            type_name: "geos_constitutive_PressureModelType",
                            comment: Some(
                                "pressureModelType => Type of the pressure dependence model. ",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referencePermeabilityComponents",
                            type_name: "R1Tensor",
                            comment: Some(
                                "referencePermeabilityComponents => Reference xx, yy and zz components of a diagonal permeability tensor.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "referencePressure",
                            type_name: "real64",
                            comment: Some(
                                "referencePressure => Reference pressure for the pressure permeability model",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_constitutive_PressureModelType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|Exponential|Hyperbolic",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "PressurePorosityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressibility",
                            type_name: "real64",
                            comment: Some(
                                "compressibility => Solid compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultReferencePorosity",
                            type_name: "real64",
                            comment: Some(
                                "defaultReferencePorosity => Default value of the reference porosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "referencePressure",
                            type_name: "real64",
                            comment: Some(
                                "referencePressure => Reference pressure for solid compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ProppantPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "maxProppantConcentration",
                            type_name: "real64",
                            comment: Some(
                                "maxProppantConcentration => Maximum proppant concentration.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "proppantDiameter",
                            type_name: "real64",
                            comment: Some(
                                "proppantDiameter => Proppant diameter.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ProppantPorosityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultReferencePorosity",
                            type_name: "real64",
                            comment: Some(
                                "defaultReferencePorosity => Default value of the reference porosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "maxProppantConcentration",
                            type_name: "real64",
                            comment: Some(
                                "maxProppantConcentration => Maximum proppant concentration ",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ProppantSlurryFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of fluid component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "compressibility",
                            type_name: "real64",
                            comment: Some(
                                "compressibility => Fluid compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultComponentDensity",
                            type_name: "real64_array",
                            comment: Some(
                                "defaultComponentDensity => Default value for the component density.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultComponentViscosity",
                            type_name: "real64_array",
                            comment: Some(
                                "defaultComponentViscosity => Default value for the component viscosity.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultCompressibility",
                            type_name: "real64_array",
                            comment: Some(
                                "defaultCompressibility => Default value for the component compressibility.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flowBehaviorIndex",
                            type_name: "real64_array",
                            comment: Some(
                                "flowBehaviorIndex => Flow behavior index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "flowConsistencyIndex",
                            type_name: "real64_array",
                            comment: Some(
                                "flowConsistencyIndex => Flow consistency index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "maxProppantConcentration",
                            type_name: "real64",
                            comment: Some(
                                "maxProppantConcentration => Maximum proppant concentration",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceDensity",
                            type_name: "real64",
                            comment: Some(
                                "referenceDensity => Reference fluid density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referencePressure",
                            type_name: "real64",
                            comment: Some(
                                "referencePressure => Reference pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceProppantDensity",
                            type_name: "real64",
                            comment: Some(
                                "referenceProppantDensity => Reference proppant density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceViscosity",
                            type_name: "real64",
                            comment: Some(
                                "referenceViscosity => Reference fluid viscosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ProppantSolidProppantPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "permeabilityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "permeabilityModelName => Name of the permeability model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "porosityModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "porosityModelName => Name of the porosity model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "solidInternalEnergyModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidInternalEnergyModelName => Name of the solid internal energy model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "solidModelName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "solidModelName => Name of the solid model.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ReactiveBrineType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phasePVTParaFiles",
                            type_name: "path_array",
                            comment: Some(
                                "phasePVTParaFiles => Names of the files defining the parameters of the viscosity and density models",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ReactiveBrineThermalType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "checkPVTTablesRanges",
                            type_name: "integer",
                            comment: Some(
                                "checkPVTTablesRanges => Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentMolarWeight",
                            type_name: "real64_array",
                            comment: Some(
                                "componentMolarWeight => Component molar weights",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "componentNames",
                            type_name: "string_array",
                            comment: Some(
                                "componentNames => List of component names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phasePVTParaFiles",
                            type_name: "path_array",
                            comment: Some(
                                "phasePVTParaFiles => Names of the files defining the parameters of the viscosity and density models",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SinglePhaseConstantThermalConductivityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "thermalConductivityComponents",
                            type_name: "R1Tensor",
                            comment: Some(
                                "thermalConductivityComponents => xx, yy, and zz components of a diagonal thermal conductivity tensor [J/(s.m.K)]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SlipDependentPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "initialPermeability",
                            type_name: "R1Tensor",
                            comment: Some(
                                "initialPermeability =>  initial permeability of the fracture.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "maxPermMultiplier",
                            type_name: "real64",
                            comment: Some(
                                "maxPermMultiplier => Maximum permeability multiplier.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "shearDispThreshold",
                            type_name: "real64",
                            comment: Some(
                                "shearDispThreshold => Threshold of shear displacement.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SolidInternalEnergyType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "referenceInternalEnergy",
                            type_name: "real64",
                            comment: Some(
                                "referenceInternalEnergy => Internal energy at the reference temperature [J/kg]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "referenceTemperature",
                            type_name: "real64",
                            comment: Some(
                                "referenceTemperature => Reference temperature [K]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "volumetricHeatCapacity",
                            type_name: "real64",
                            comment: Some(
                                "volumetricHeatCapacity => Solid volumetric heat capacity [J/(kg.K)]",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TableCapillaryPressureType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "nonWettingIntermediateCapPressureTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "nonWettingIntermediateCapPressureTableName => Capillary pressure table [Pa] for the pair (non-wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingCapPressureTableName to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "wettingIntermediateCapPressureTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "wettingIntermediateCapPressureTableName => Capillary pressure table [Pa] for the pair (wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingCapPressureTableName to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingNonWettingCapPressureTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "wettingNonWettingCapPressureTableName => Capillary pressure table [Pa] for the pair (wetting phase, non-wetting phase)\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateCapPressureTableName and nonWettingIntermediateCapPressureTableName to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "TableRelativePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "nonWettingIntermediateRelPermTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "nonWettingIntermediateRelPermTableNames => List of relative permeability tables for the pair (non-wetting phase, intermediate phase)\nThe expected format is \"{ nonWettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingRelPermTableNames to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "threePhaseInterpolator",
                            type_name: "geos_constitutive_ThreePhaseInterpolator",
                            comment: Some(
                                "threePhaseInterpolator => Type of Three phase interpolator.Valid options \n* BAKER\n* STONEII",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingIntermediateRelPermTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "wettingIntermediateRelPermTableNames => List of relative permeability tables for the pair (wetting phase, intermediate phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingRelPermTableNames to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "wettingNonWettingRelPermTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "wettingNonWettingRelPermTableNames => List of relative permeability tables for the pair (wetting phase, non-wetting phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, nonWettingPhaseRelPermTableName }\", in that order\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateRelPermTableNames and nonWettingIntermediateRelPermTableNames to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_constitutive_ThreePhaseInterpolator",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|BAKER|STONEII",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "TableRelativePermeabilityHysteresisType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "drainageNonWettingIntermediateRelPermTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "drainageNonWettingIntermediateRelPermTableNames => List of drainage relative permeability tables for the pair (non-wetting phase, intermediate phase)\nThe expected format is \"{ nonWettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead drainageWettingNonWettingRelPermTableNames to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "drainageWettingIntermediateRelPermTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "drainageWettingIntermediateRelPermTableNames => List of drainage relative permeability tables for the pair (wetting phase, intermediate phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead drainageWettingNonWettingRelPermTableNames to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "drainageWettingNonWettingRelPermTableNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "drainageWettingNonWettingRelPermTableNames => List of drainage relative permeability tables for the pair (wetting phase, non-wetting phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, nonWettingPhaseRelPermTableName }\", in that order\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead drainageWettingIntermediateRelPermTableNames and drainageNonWettingIntermediateRelPermTableNames to specify the table names",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "imbibitionNonWettingRelPermTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "imbibitionNonWettingRelPermTableName => Imbibition relative permeability table name for the non-wetting phase.\nTo neglect hysteresis on this phase, just use the same table name for the drainage and imbibition curves",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "imbibitionWettingRelPermTableName",
                            type_name: "groupNameRef",
                            comment: Some(
                                "imbibitionWettingRelPermTableName => Imbibition relative permeability table name for the wetting phase.\nTo neglect hysteresis on this phase, just use the same table name for the drainage and imbibition curves",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "jerauldParameterA",
                            type_name: "real64",
                            comment: Some(
                                "jerauldParameterA => First parameter (modification parameter) introduced by Jerauld in the Land trapping model (see RTD documentation).",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "jerauldParameterB",
                            type_name: "real64",
                            comment: Some(
                                "jerauldParameterB => Second parameter introduced by Jerauld in the Land trapping model (see RTD documentation).",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "killoughCurvatureParameter",
                            type_name: "real64",
                            comment: Some(
                                "killoughCurvatureParameter => Curvature parameter introduced by Killough for wetting-phase hysteresis (see RTD documentation).",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "threePhaseInterpolator",
                            type_name: "geos_constitutive_ThreePhaseInterpolator",
                            comment: Some(
                                "threePhaseInterpolator => Type of Three phase interpolator.Valid options \n* BAKER\n* STONEII",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ThermalCompressibleSinglePhaseFluidType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "compressibility",
                            type_name: "real64",
                            comment: Some(
                                "compressibility => Fluid compressibility",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default value for density.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultViscosity",
                            type_name: "real64",
                            comment: Some(
                                "defaultViscosity => Default value for viscosity.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "densityModelType",
                            type_name: "geos_constitutive_ExponentApproximationType",
                            comment: Some(
                                "densityModelType => Type of density model. Valid options:\n* exponential\n* linear\n* quadratic",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "internalEnergyModelType",
                            type_name: "geos_constitutive_ExponentApproximationType",
                            comment: Some(
                                "internalEnergyModelType => Type of internal energy model. Valid options:\n* exponential\n* linear\n* quadratic",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceDensity",
                            type_name: "real64",
                            comment: Some(
                                "referenceDensity => Reference fluid density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceInternalEnergy",
                            type_name: "real64",
                            comment: Some(
                                "referenceInternalEnergy => Reference fluid internal energy",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referencePressure",
                            type_name: "real64",
                            comment: Some(
                                "referencePressure => Reference pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceTemperature",
                            type_name: "real64",
                            comment: Some(
                                "referenceTemperature => Reference temperature",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "referenceViscosity",
                            type_name: "real64",
                            comment: Some(
                                "referenceViscosity => Reference fluid viscosity",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "specificHeatCapacity",
                            type_name: "real64",
                            comment: Some(
                                "specificHeatCapacity => Fluid heat capacity. Unit: J/kg/K",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "thermalExpansionCoeff",
                            type_name: "real64",
                            comment: Some(
                                "thermalExpansionCoeff => Fluid thermal expansion coefficient. Unit: 1/K",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "viscosibility",
                            type_name: "real64",
                            comment: Some(
                                "viscosibility => Fluid viscosity exponential coefficient",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "viscosityModelType",
                            type_name: "geos_constitutive_ExponentApproximationType",
                            comment: Some(
                                "viscosityModelType => Type of viscosity model. Valid options:\n* exponential\n* linear\n* quadratic",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "VanGenuchtenBakerRelativePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "gasOilRelPermExponentInv",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermExponentInv => Rel perm power law exponent inverse for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "gasOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermMaxValue => Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermExponentInv",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermExponentInv => Rel perm power law exponent inverse for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermMaxValue => Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "VanGenuchtenCapillaryPressureType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "capPressureEpsilon",
                            type_name: "real64",
                            comment: Some(
                                "capPressureEpsilon => Saturation at which the extremum capillary pressure is attained; used to avoid infinite capillary pressure values for saturations close to 0 and 1",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseCapPressureExponentInv",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseCapPressureExponentInv => Inverse of capillary power law exponent for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseCapPressureMultiplier",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseCapPressureMultiplier => Entry pressure value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "VanGenuchtenStone2RelativePermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "gasOilRelPermExponentInv",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermExponentInv => Rel perm power law exponent inverse for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "gasOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "gasOilRelPermMaxValue => Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseMinVolumeFraction",
                            type_name: "real64_array",
                            comment: Some(
                                "phaseMinVolumeFraction => Minimum volume fraction value for each phase",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "phaseNames",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "phaseNames => List of fluid phases",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermExponentInv",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermExponentInv => Rel perm power law exponent inverse for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "waterOilRelPermMaxValue",
                            type_name: "real64_array",
                            comment: Some(
                                "waterOilRelPermMaxValue => Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ViscoDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultCohesion",
                            type_name: "real64",
                            comment: Some(
                                "defaultCohesion => Initial cohesion",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDilationAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultDilationAngle => Dilation angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultFrictionAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultFrictionAngle => Friction angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultHardeningRate",
                            type_name: "real64",
                            comment: Some(
                                "defaultHardeningRate => Cohesion hardening/softening rate",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "relaxationTime",
                            type_name: "real64",
                            comment: Some(
                                "relaxationTime => Relaxation time",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ViscoExtendedDruckerPragerType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultBulkModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultBulkModulus => Default Bulk Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultCohesion",
                            type_name: "real64",
                            comment: Some(
                                "defaultCohesion => Initial cohesion",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDilationRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultDilationRatio => Dilation ratio [0,1] (ratio = tan dilationAngle / tan frictionAngle)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultHardening",
                            type_name: "real64",
                            comment: Some(
                                "defaultHardening => Hardening parameter (hardening rate is faster for smaller values)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultInitialFrictionAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultInitialFrictionAngle => Initial friction angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPoissonRatio",
                            type_name: "real64",
                            comment: Some(
                                "defaultPoissonRatio => Default Poisson's Ratio",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultResidualFrictionAngle",
                            type_name: "real64",
                            comment: Some(
                                "defaultResidualFrictionAngle => Residual friction angle (degrees)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Default Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultYoungModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultYoungModulus => Default Young's Modulus",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "relaxationTime",
                            type_name: "real64",
                            comment: Some(
                                "relaxationTime => Relaxation time",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "ViscoModifiedCamClayType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultCslSlope",
                            type_name: "real64",
                            comment: Some(
                                "defaultCslSlope => Slope of the critical state line",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultDensity",
                            type_name: "real64",
                            comment: Some(
                                "defaultDensity => Default Material Density",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "defaultDrainedLinearTEC",
                            type_name: "real64",
                            comment: Some(
                                "defaultDrainedLinearTEC => Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultPreConsolidationPressure",
                            type_name: "real64",
                            comment: Some(
                                "defaultPreConsolidationPressure => Initial preconsolidation pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRecompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultRecompressionIndex => Recompresion Index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRefPressure",
                            type_name: "real64",
                            comment: Some(
                                "defaultRefPressure => Reference Pressure",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultRefStrainVol",
                            type_name: "real64",
                            comment: Some(
                                "defaultRefStrainVol => Reference Volumetric Strain",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultShearModulus",
                            type_name: "real64",
                            comment: Some(
                                "defaultShearModulus => Elastic Shear Modulus Parameter",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "defaultVirginCompressionIndex",
                            type_name: "real64",
                            comment: Some(
                                "defaultVirginCompressionIndex => Virgin compression index",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "relaxationTime",
                            type_name: "real64",
                            comment: Some(
                                "relaxationTime => Relaxation time",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "WillisRichardsPermeabilityType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "dilationCoefficient",
                            type_name: "real64",
                            comment: Some(
                                "dilationCoefficient => Dilation coefficient (tan of dilation angle).",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "maxFracAperture",
                            type_name: "real64",
                            comment: Some(
                                "maxFracAperture => Maximum fracture aperture at zero contact stress.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "refClosureStress",
                            type_name: "real64",
                            comment: Some(
                                "refClosureStress => Effective normal stress causes 90% reduction in aperture.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "ElementRegionsTypeChoice",
                cases: [
                    EnumCase {
                        name: "CellElementRegion",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "CellElementRegionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "SurfaceElementRegion",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "SurfaceElementRegionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "WellElementRegion",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "WellElementRegionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ElementRegionsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "ElementRegionsTypeChoice",
                                        type_name: "ElementRegionsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "CellElementRegionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "cellBlocks",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "cellBlocks => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "coarseningRatio",
                            type_name: "real64",
                            comment: Some(
                                "coarseningRatio => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "materialList",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "materialList => List of materials present in this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "meshBody",
                            type_name: "groupNameRef",
                            comment: Some(
                                "meshBody => Mesh body that contains this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Struct(
            Struct {
                name: "SurfaceElementRegionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "defaultAperture",
                            type_name: "real64",
                            comment: Some(
                                "defaultAperture => The default aperture of newly formed surface elements.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "faceBlock",
                            type_name: "groupNameRef",
                            comment: Some(
                                "faceBlock => The name of the face block in the mesh, or the embedded surface.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "materialList",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "materialList => List of materials present in this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "meshBody",
                            type_name: "groupNameRef",
                            comment: Some(
                                "meshBody => Mesh body that contains this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "subRegionType",
                            type_name: "geos_SurfaceElementRegion_SurfaceSubRegionType",
                            comment: Some(
                                "subRegionType => Type of surface element subregion. Valid options: {faceElement, embeddedElement}.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        TupleStruct(
            TupleStruct {
                name: "geos_SurfaceElementRegion_SurfaceSubRegionType",
                comment: None,
                type_name: "xsd:string",
                subtypes: [],
                type_modifiers: [],
                facets: [
                    Facet {
                        facet_type: Pattern(
                            ".*[\\[\\]`$].*|faceElement|embeddedElement",
                        ),
                        comment: None,
                    },
                ],
            },
        ),
        Struct(
            Struct {
                name: "WellElementRegionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "materialList",
                            type_name: "groupNameRef_array",
                            comment: Some(
                                "materialList => List of materials present in this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "meshBody",
                            type_name: "groupNameRef",
                            comment: Some(
                                "meshBody => Mesh body that contains this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "ParticleRegionsTypeChoice",
                cases: [
                    EnumCase {
                        name: "ParticleRegion",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParticleRegionType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ParticleRegionsType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "ParticleRegionsTypeChoice",
                                        type_name: "ParticleRegionsTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "ParticleRegionType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "materialList",
                            type_name: "string_array",
                            comment: Some(
                                "materialList => List of materials present in this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "meshBody",
                            type_name: "string",
                            comment: Some(
                                "meshBody => Mesh body that contains this region",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "particleBlocks",
                            type_name: "string_array",
                            comment: Some(
                                "particleBlocks => (no description available)",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "IncludedTypeChoice",
                cases: [
                    EnumCase {
                        name: "File",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "FileType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "IncludedType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "IncludedTypeChoice",
                                        type_name: "IncludedTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "FileType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "name",
                            type_name: "path",
                            comment: Some(
                                "name => The relative file path.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "ParametersTypeChoice",
                cases: [
                    EnumCase {
                        name: "Parameter",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "ParameterType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "ParametersType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "ParametersTypeChoice",
                                        type_name: "ParametersTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "ParameterType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "value",
                            type_name: "string",
                            comment: Some(
                                "value => Input parameter definition for the preprocessor",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "groupName",
                            comment: Some(
                                "name => A name is required for any non-unique nodes",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "BenchmarksTypeChoice",
                cases: [
                    EnumCase {
                        name: "crusher",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "crusherType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "lassen",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "lassenType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                    EnumCase {
                        name: "quartz",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "quartzType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "BenchmarksType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "BenchmarksTypeChoice",
                                        type_name: "BenchmarksTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "crusherTypeChoice",
                cases: [
                    EnumCase {
                        name: "Run",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "RunType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "crusherType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "crusherTypeChoice",
                                        type_name: "crusherTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Struct(
            Struct {
                name: "RunType",
                comment: None,
                fields: RefCell {
                    value: [
                        StructField {
                            name: "args",
                            type_name: "string",
                            comment: Some(
                                "args => Any extra command line arguments to pass to GEOSX.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "autoPartition",
                            type_name: "string",
                            comment: Some(
                                "autoPartition => May be 'Off' or 'On', if 'On' partitioning arguments are created automatically. Default is Off.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "meshSizes",
                            type_name: "integer_array",
                            comment: Some(
                                "meshSizes => The target number of elements in the internal mesh (per-process for weak scaling, globally for strong scaling) default doesn't modify the internalMesh.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "name",
                            type_name: "string",
                            comment: Some(
                                "name => The name of this benchmark.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "nodes",
                            type_name: "integer",
                            comment: Some(
                                "nodes => The number of nodes needed to run the base benchmark, default is 1.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scaleList",
                            type_name: "integer_array",
                            comment: Some(
                                "scaleList => The scales at which to run the problem ( scale * nodes * tasksPerNode ).",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "scaling",
                            type_name: "string",
                            comment: Some(
                                "scaling => Whether to run a scaling, and which type of scaling to run.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "tasksPerNode",
                            type_name: "integer",
                            comment: Some(
                                "tasksPerNode => The number of tasks per node to run the benchmark with.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                None,
                            ],
                        },
                        StructField {
                            name: "threadsPerTask",
                            type_name: "integer",
                            comment: Some(
                                "threadsPerTask => The number of threads per task to run the benchmark with.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                        StructField {
                            name: "timeLimit",
                            type_name: "integer",
                            comment: Some(
                                "timeLimit => The time limit of the benchmark.",
                            ),
                            subtypes: [],
                            source: Attribute,
                            type_modifiers: [
                                Option,
                            ],
                        },
                    ],
                },
                attribute_groups: RefCell {
                    value: [],
                },
                subtypes: [],
            },
        ),
        Enum(
            Enum {
                name: "lassenTypeChoice",
                cases: [
                    EnumCase {
                        name: "Run",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "RunType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "lassenType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "lassenTypeChoice",
                                        type_name: "lassenTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
        Enum(
            Enum {
                name: "quartzTypeChoice",
                cases: [
                    EnumCase {
                        name: "Run",
                        comment: None,
                        value: "",
                        type_name: Some(
                            "RunType",
                        ),
                        type_modifiers: [
                            None,
                        ],
                        source: Choice,
                    },
                ],
                comment: None,
                type_name: "String",
                subtypes: [
                    Struct(
                        Struct {
                            name: "quartzType",
                            comment: None,
                            fields: RefCell {
                                value: [
                                    StructField {
                                        name: "quartzTypeChoice",
                                        type_name: "quartzTypeChoice",
                                        comment: None,
                                        subtypes: [],
                                        source: Choice,
                                        type_modifiers: [],
                                    },
                                ],
                            },
                            attribute_groups: RefCell {
                                value: [],
                            },
                            subtypes: [],
                        },
                    ),
                ],
                source: Choice,
            },
        ),
    ],
    attribute_groups: [],
    target_ns: None,
    xsd_ns: Some(
        Namespace {
            name: Some(
                "xsd",
            ),
            uri: Borrowed(
                "http://www.w3.org/2001/XMLSchema",
            ),
        },
    ),
}XmlSchema {
    simple_types: [
        SimpleType {
            name: "R1Tensor",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*){2}[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "R1Tensor32",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*){2}[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "R2SymTensor",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*){5}[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "geos_dataRepository_PlotLevel",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[+-]?[\\d]+",
            ),
            options: None,
        },
        SimpleType {
            name: "globalIndex",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[+-]?[\\d]+",
            ),
            options: None,
        },
        SimpleType {
            name: "globalIndex_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "globalIndex_array2d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "globalIndex_array3d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "groupName",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[a-zA-Z0-9.\\-_]+",
            ),
            options: None,
        },
        SimpleType {
            name: "groupNameRef",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[a-zA-Z0-9.\\-_/]*",
            ),
            options: None,
        },
        SimpleType {
            name: "groupNameRef_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([a-zA-Z0-9.\\-_/]*\\s*,\\s*)*[a-zA-Z0-9.\\-_/]*\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "integer",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[+-]?[\\d]+",
            ),
            options: None,
        },
        SimpleType {
            name: "integer_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "integer_array2d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "integer_array3d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "localIndex",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[+-]?[\\d]+",
            ),
            options: None,
        },
        SimpleType {
            name: "localIndex_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "localIndex_array2d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "localIndex_array3d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]+\\s*,\\s*)*[+-]?[\\d]+\\s*)?\\}\\s*\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "mapPair",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[^,\\{\\}\\s]*\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "path",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[^*?<>\\|:\";,\\s]*\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "path_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([^*?<>\\|:\";,\\s]+\\s*,\\s*)*[^*?<>\\|:\";,\\s]+\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real32",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)",
            ),
            options: None,
        },
        SimpleType {
            name: "real32_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real32_array2d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real32_array3d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real64",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)",
            ),
            options: None,
        },
        SimpleType {
            name: "real64_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real64_array2d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real64_array3d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "real64_array4d",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*,\\s*)*\\{\\s*(\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*,\\s*)*\\{\\s*(([+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*,\\s*)*[+-]?[\\d]*([\\d]\\.?|\\.[\\d])[\\d]*([eE][-+]?[\\d]+|\\s*)\\s*)?\\}\\s*\\}\\s*\\}\\s*\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "string",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|[^,\\{\\}\\s]*\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "string_array",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|\\s*\\{\\s*(([^,\\{\\}\\s]+\\s*,\\s*)*[^,\\{\\}\\s]+\\s*)?\\}\\s*",
            ),
            options: None,
        },
        SimpleType {
            name: "geos_EventManager_TimeOutputFormat",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|seconds|minutes|hours|days|years|full",
            ),
            options: Some(
                [
                    "seconds",
                    "minutes",
                    "hours",
                    "days",
                    "years",
                    "full",
                ],
            ),
        },
        SimpleType {
            name: "geos_TractionBoundaryCondition_TractionType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|vector|normal|stress",
            ),
            options: Some(
                [
                    "vector",
                    "normal",
                    "stress",
                ],
            ),
        },
        SimpleType {
            name: "geos_TableFunction_InterpolationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|linear|nearest|upper|lower",
            ),
            options: Some(
                [
                    "linear",
                    "nearest",
                    "upper",
                    "lower",
                ],
            ),
        },
        SimpleType {
            name: "geos_vtk_PartitionMethod",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|parmetis|ptscotch",
            ),
            options: Some(
                [
                    "parmetis",
                    "ptscotch",
                ],
            ),
        },
        SimpleType {
            name: "geos_FiniteElementDiscretization_Formulation",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|default|SEM",
            ),
            options: Some(
                [
                    "default",
                    "SEM",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_AMG_AggInterpType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|default|extendedIStage2|standardStage2|extendedStage2|multipass|modifiedExtended|modifiedExtendedI|modifiedExtendedE|modifiedMultipass",
            ),
            options: Some(
                [
                    "default",
                    "extendedIStage2",
                    "standardStage2",
                    "extendedStage2",
                    "multipass",
                    "modifiedExtended",
                    "modifiedExtendedI",
                    "modifiedExtendedE",
                    "modifiedMultipass",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_AMG_CoarseType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|default|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|direct|bgs",
            ),
            options: Some(
                [
                    "default",
                    "jacobi",
                    "l1jacobi",
                    "fgs",
                    "sgs",
                    "l1sgs",
                    "chebyshev",
                    "direct",
                    "bgs",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_AMG_CoarseningType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|default|CLJP|RugeStueben|Falgout|PMIS|HMIS",
            ),
            options: Some(
                [
                    "default",
                    "CLJP",
                    "RugeStueben",
                    "Falgout",
                    "PMIS",
                    "HMIS",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_AMG_InterpType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|default|modifiedClassical|direct|multipass|extendedI|standard|extended|directBAMG|modifiedExtended|modifiedExtendedI|modifiedExtendedE",
            ),
            options: Some(
                [
                    "default",
                    "modifiedClassical",
                    "direct",
                    "multipass",
                    "extendedI",
                    "standard",
                    "extended",
                    "directBAMG",
                    "modifiedExtended",
                    "modifiedExtendedI",
                    "modifiedExtendedE",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_AMG_NullSpaceType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|constantModes|rigidBodyModes",
            ),
            options: Some(
                [
                    "constantModes",
                    "rigidBodyModes",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_AMG_SmootherType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|default|jacobi|l1jacobi|fgs|bgs|sgs|l1sgs|chebyshev|ilu0|ilut|ic0|ict",
            ),
            options: Some(
                [
                    "default",
                    "jacobi",
                    "l1jacobi",
                    "fgs",
                    "bgs",
                    "sgs",
                    "l1sgs",
                    "chebyshev",
                    "ilu0",
                    "ilut",
                    "ic0",
                    "ict",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_Direct_ColPerm",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|none|MMD_AtplusA|MMD_AtA|colAMD|metis|parmetis",
            ),
            options: Some(
                [
                    "none",
                    "MMD_AtplusA",
                    "MMD_AtA",
                    "colAMD",
                    "metis",
                    "parmetis",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_Direct_RowPerm",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|none|mc64",
            ),
            options: Some(
                [
                    "none",
                    "mc64",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_PreconditionerType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|none|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|iluk|ilut|icc|ict|amg|mgr|block|direct|bgs",
            ),
            options: Some(
                [
                    "none",
                    "jacobi",
                    "l1jacobi",
                    "fgs",
                    "sgs",
                    "l1sgs",
                    "chebyshev",
                    "iluk",
                    "ilut",
                    "icc",
                    "ict",
                    "amg",
                    "mgr",
                    "block",
                    "direct",
                    "bgs",
                ],
            ),
        },
        SimpleType {
            name: "geos_LinearSolverParameters_SolverType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|direct|cg|gmres|fgmres|bicgstab|preconditioner",
            ),
            options: Some(
                [
                    "direct",
                    "cg",
                    "gmres",
                    "fgmres",
                    "bicgstab",
                    "preconditioner",
                ],
            ),
        },
        SimpleType {
            name: "geos_NonlinearSolverParameters_CouplingType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|FullyImplicit|Sequential",
            ),
            options: Some(
                [
                    "FullyImplicit",
                    "Sequential",
                ],
            ),
        },
        SimpleType {
            name: "geos_NonlinearSolverParameters_LineSearchAction",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|None|Attempt|Require",
            ),
            options: Some(
                [
                    "None",
                    "Attempt",
                    "Require",
                ],
            ),
        },
        SimpleType {
            name: "geos_NonlinearSolverParameters_LineSearchInterpolationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Linear|Parabolic",
            ),
            options: Some(
                [
                    "Linear",
                    "Parabolic",
                ],
            ),
        },
        SimpleType {
            name: "geos_NonlinearSolverParameters_NonlinearAccelerationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|None|Aitken",
            ),
            options: Some(
                [
                    "None",
                    "Aitken",
                ],
            ),
        },
        SimpleType {
            name: "geos_NonlinearSolverParameters_SequentialConvergenceCriterion",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|ResidualNorm|NumberOfNonlinearIterations|SolutionIncrements",
            ),
            options: Some(
                [
                    "ResidualNorm",
                    "NumberOfNonlinearIterations",
                    "SolutionIncrements",
                ],
            ),
        },
        SimpleType {
            name: "geos_UpwindingScheme",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|PPU|C1PPU|IHU",
            ),
            options: Some(
                [
                    "PPU",
                    "C1PPU",
                    "IHU",
                ],
            ),
        },
        SimpleType {
            name: "geos_vtk_VTKOutputMode",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|binary|ascii",
            ),
            options: Some(
                [
                    "binary",
                    "ascii",
                ],
            ),
        },
        SimpleType {
            name: "geos_vtk_VTKRegionTypes",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|cell|well|surface|particle|all",
            ),
            options: Some(
                [
                    "cell",
                    "well",
                    "surface",
                    "particle",
                    "all",
                ],
            ),
        },
        SimpleType {
            name: "geos_WaveSolverUtils_AttenuationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|none|sls",
            ),
            options: Some(
                [
                    "none",
                    "sls",
                ],
            ),
        },
        SimpleType {
            name: "geos_WaveSolverUtils_DASType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|none|dipole|strainIntegration",
            ),
            options: Some(
                [
                    "none",
                    "dipole",
                    "strainIntegration",
                ],
            ),
        },
        SimpleType {
            name: "geos_solverBaseKernels_NormType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Linfinity|L2",
            ),
            options: Some(
                [
                    "Linfinity",
                    "L2",
                ],
            ),
        },
        SimpleType {
            name: "geos_CompositionalMultiphaseFVM_ScalingType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Global|Local",
            ),
            options: Some(
                [
                    "Global",
                    "Local",
                ],
            ),
        },
        SimpleType {
            name: "geos_stabilization_StabilizationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|None|Global|Local",
            ),
            options: Some(
                [
                    "None",
                    "Global",
                    "Local",
                ],
            ),
        },
        SimpleType {
            name: "geos_WellControls_Control",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|BHP|phaseVolRate|totalVolRate|massRate|uninitialized",
            ),
            options: Some(
                [
                    "BHP",
                    "phaseVolRate",
                    "totalVolRate",
                    "massRate",
                    "uninitialized",
                ],
            ),
        },
        SimpleType {
            name: "geos_WellControls_Type",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|producer|injector",
            ),
            options: Some(
                [
                    "producer",
                    "injector",
                ],
            ),
        },
        SimpleType {
            name: "geos_HydrofractureSolver_lt_geos_SinglePhasePoromechanics_lt_geos_SinglePhaseBase_cm_-geos_SolidMechanicsLagrangianFEM_gt_-_gt__InitializationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Pressure|Displacement",
            ),
            options: Some(
                [
                    "Pressure",
                    "Displacement",
                ],
            ),
        },
        SimpleType {
            name: "geos_LaplaceBaseH1_TimeIntegrationOption",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|SteadyState|ImplicitTransient",
            ),
            options: Some(
                [
                    "SteadyState",
                    "ImplicitTransient",
                ],
            ),
        },
        SimpleType {
            name: "geos_PhaseFieldDamageFEM_LocalDissipation",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Linear|Quadratic",
            ),
            options: Some(
                [
                    "Linear",
                    "Quadratic",
                ],
            ),
        },
        SimpleType {
            name: "geos_PhaseFieldDamageFEM_TimeIntegrationOption",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|SteadyState|ImplicitTransient|ExplicitTransient",
            ),
            options: Some(
                [
                    "SteadyState",
                    "ImplicitTransient",
                    "ExplicitTransient",
                ],
            ),
        },
        SimpleType {
            name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
            ),
            options: Some(
                [
                    "QuasiStatic",
                    "ImplicitDynamic",
                    "ExplicitDynamic",
                ],
            ),
        },
        SimpleType {
            name: "geos_SolidMechanicsMPM_TimeIntegrationOption",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|QuasiStatic|ImplicitDynamic|ExplicitDynamic",
            ),
            options: Some(
                [
                    "QuasiStatic",
                    "ImplicitDynamic",
                    "ExplicitDynamic",
                ],
            ),
        },
        SimpleType {
            name: "geos_TriaxialDriver_Mode",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|mixedControl|strainControl|stressControl",
            ),
            options: Some(
                [
                    "mixedControl",
                    "strainControl",
                    "stressControl",
                ],
            ),
        },
        SimpleType {
            name: "geos_constitutive_ExponentApproximationType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|exponential|linear|quadratic",
            ),
            options: Some(
                [
                    "exponential",
                    "linear",
                    "quadratic",
                ],
            ),
        },
        SimpleType {
            name: "geos_constitutive_JFunctionCapillaryPressure_PermeabilityDirection",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|XY|X|Y|Z",
            ),
            options: Some(
                [
                    "XY",
                    "X",
                    "Y",
                    "Z",
                ],
            ),
        },
        SimpleType {
            name: "geos_constitutive_ParticleSettlingModel",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Stokes|Intermediate|Turbulence",
            ),
            options: Some(
                [
                    "Stokes",
                    "Intermediate",
                    "Turbulence",
                ],
            ),
        },
        SimpleType {
            name: "geos_constitutive_PressureModelType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|Exponential|Hyperbolic",
            ),
            options: Some(
                [
                    "Exponential",
                    "Hyperbolic",
                ],
            ),
        },
        SimpleType {
            name: "geos_constitutive_ThreePhaseInterpolator",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|BAKER|STONEII",
            ),
            options: Some(
                [
                    "BAKER",
                    "STONEII",
                ],
            ),
        },
        SimpleType {
            name: "geos_SurfaceElementRegion_SurfaceSubRegionType",
            doc: None,
            pattern: Some(
                ".*[\\[\\]`$].*|faceElement|embeddedElement",
            ),
            options: Some(
                [
                    "faceElement",
                    "embeddedElement",
                ],
            ),
        },
    ],
    complex_types: [
        ComplexType {
            name: "Problem",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Events",
                    "FieldSpecifications",
                    "Functions",
                    "Geometry",
                    "Mesh",
                    "NumericalMethods",
                    "Outputs",
                    "Solvers",
                    "Tasks",
                    "Constitutive",
                    "ElementRegions",
                    "ParticleRegions",
                    "Included",
                    "Parameters",
                    "Benchmarks",
                ],
            ),
        },
        ComplexType {
            name: "Events",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxCycle",
                    type_name: "integer",
                    doc: Some(
                        "Maximum simulation cycle for the global event loop.",
                    ),
                    required: false,
                },
                Field {
                    name: "maxTime",
                    type_name: "real64",
                    doc: Some(
                        "Maximum simulation time for the global event loop.",
                    ),
                    required: false,
                },
                Field {
                    name: "minTime",
                    type_name: "real64",
                    doc: Some(
                        "Start simulation time for the global event loop.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeOutputFormat",
                    type_name: "geos_EventManager_TimeOutputFormat",
                    doc: Some(
                        "Format of the time in the GEOS log.",
                    ),
                    required: false,
                },
            ],
            children: Some(
                [
                    "HaltEvent",
                    "PeriodicEvent",
                    "SoloEvent",
                ],
            ),
        },
        ComplexType {
            name: "HaltEvent",
            doc: None,
            fields: [
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Start time of this event.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "End time of this event.",
                    ),
                    required: false,
                },
                Field {
                    name: "finalDtStretch",
                    type_name: "real64",
                    doc: Some(
                        "Allow the final dt request for this event to grow by this percentage to match the endTime exactly.",
                    ),
                    required: false,
                },
                Field {
                    name: "forceDt",
                    type_name: "real64",
                    doc: Some(
                        "While active, this event will request this timestep value (ignoring any children/targets requests).",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxEventDt",
                    type_name: "real64",
                    doc: Some(
                        "While active, this event will request a timestep <= this value (depending upon any child/target requests).",
                    ),
                    required: false,
                },
                Field {
                    name: "maxRuntime",
                    type_name: "real64",
                    doc: Some(
                        "The maximum allowable runtime for the job.",
                    ),
                    required: true,
                },
                Field {
                    name: "target",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the object to be executed when the event criteria are met.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetExactStartStop",
                    type_name: "integer",
                    doc: Some(
                        "If this option is set, the event will reduce its timestep requests to match any specified beginTime/endTimes exactly.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "HaltEvent",
                    "PeriodicEvent",
                    "SoloEvent",
                ],
            ),
        },
        ComplexType {
            name: "PeriodicEvent",
            doc: None,
            fields: [
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Start time of this event.",
                    ),
                    required: false,
                },
                Field {
                    name: "cycleFrequency",
                    type_name: "integer",
                    doc: Some(
                        "Event application frequency (cycle, default)",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "End time of this event.",
                    ),
                    required: false,
                },
                Field {
                    name: "finalDtStretch",
                    type_name: "real64",
                    doc: Some(
                        "Allow the final dt request for this event to grow by this percentage to match the endTime exactly.",
                    ),
                    required: false,
                },
                Field {
                    name: "forceDt",
                    type_name: "real64",
                    doc: Some(
                        "While active, this event will request this timestep value (ignoring any children/targets requests).",
                    ),
                    required: false,
                },
                Field {
                    name: "function",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of an optional function to evaluate when the time/cycle criteria are met.If the result is greater than the specified eventThreshold, the function will continue to execute.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxEventDt",
                    type_name: "real64",
                    doc: Some(
                        "While active, this event will request a timestep <= this value (depending upon any child/target requests).",
                    ),
                    required: false,
                },
                Field {
                    name: "object",
                    type_name: "groupNameRef",
                    doc: Some(
                        "If the optional function requires an object as an input, specify its path here.",
                    ),
                    required: false,
                },
                Field {
                    name: "set",
                    type_name: "groupNameRef",
                    doc: Some(
                        "If the optional function is applied to an object, specify the setname to evaluate (default = everything).",
                    ),
                    required: false,
                },
                Field {
                    name: "stat",
                    type_name: "integer",
                    doc: Some(
                        "If the optional function is applied to an object, specify the statistic to compare to the eventThreshold.The current options include: min, avg, and max.",
                    ),
                    required: false,
                },
                Field {
                    name: "target",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the object to be executed when the event criteria are met.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetExactStartStop",
                    type_name: "integer",
                    doc: Some(
                        "If this option is set, the event will reduce its timestep requests to match any specified beginTime/endTimes exactly.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetExactTimestep",
                    type_name: "integer",
                    doc: Some(
                        "If this option is set, the event will reduce its timestep requests to match the specified timeFrequency perfectly: dt_request = min(dt_request, t_last + time_frequency - time)).",
                    ),
                    required: false,
                },
                Field {
                    name: "threshold",
                    type_name: "real64",
                    doc: Some(
                        "If the optional function is used, the event will execute if the value returned by the function exceeds this threshold.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeFrequency",
                    type_name: "real64",
                    doc: Some(
                        "Event application frequency (time).  Note: if this value is specified, it will override any cycle-based behavior.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "HaltEvent",
                    "PeriodicEvent",
                    "SoloEvent",
                ],
            ),
        },
        ComplexType {
            name: "SoloEvent",
            doc: None,
            fields: [
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Start time of this event.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "End time of this event.",
                    ),
                    required: false,
                },
                Field {
                    name: "finalDtStretch",
                    type_name: "real64",
                    doc: Some(
                        "Allow the final dt request for this event to grow by this percentage to match the endTime exactly.",
                    ),
                    required: false,
                },
                Field {
                    name: "forceDt",
                    type_name: "real64",
                    doc: Some(
                        "While active, this event will request this timestep value (ignoring any children/targets requests).",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxEventDt",
                    type_name: "real64",
                    doc: Some(
                        "While active, this event will request a timestep <= this value (depending upon any child/target requests).",
                    ),
                    required: false,
                },
                Field {
                    name: "target",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the object to be executed when the event criteria are met.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetCycle",
                    type_name: "integer",
                    doc: Some(
                        "Targeted cycle to execute the event.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetExactStartStop",
                    type_name: "integer",
                    doc: Some(
                        "If this option is set, the event will reduce its timestep requests to match any specified beginTime/endTimes exactly.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetExactTimestep",
                    type_name: "integer",
                    doc: Some(
                        "If this option is set, the event will reduce its timestep requests to match the specified execution time exactly: dt_request = min(dt_request, t_target - time)).",
                    ),
                    required: false,
                },
                Field {
                    name: "targetTime",
                    type_name: "real64",
                    doc: Some(
                        "Targeted time to execute the event.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "HaltEvent",
                    "PeriodicEvent",
                    "SoloEvent",
                ],
            ),
        },
        ComplexType {
            name: "FieldSpecifications",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Aquifer",
                    "Dirichlet",
                    "FieldSpecification",
                    "HydrostaticEquilibrium",
                    "PML",
                    "SourceFlux",
                    "Traction",
                ],
            ),
        },
        ComplexType {
            name: "Aquifer",
            doc: None,
            fields: [
                Field {
                    name: "allowAllPhasesIntoAquifer",
                    type_name: "integer",
                    doc: Some(
                        "Flag to allow all phases to flow into the aquifer. \nThis flag only matters for the configuration in which flow is from reservoir to aquifer. \n    - If the flag is equal to 1, then all phases, including non-aqueous phases, are allowed to flow into the aquifer. \n     - If the flag is equal to 0, then only the water phase is allowed to flow into the aquifer. \nIf you are in a configuration in which flow is from reservoir to aquifer and you expect non-aqueous phases to saturate the reservoir cells next to the aquifer, set this flag to 1. \nThis keyword is ignored for single-phase flow simulations",
                    ),
                    required: false,
                },
                Field {
                    name: "aquiferAngle",
                    type_name: "real64",
                    doc: Some(
                        "Angle subtended by the aquifer boundary from the center of the reservoir [degress]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferElevation",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer elevation (positive going upward) [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferInitialPressure",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer initial pressure [Pa]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferInnerRadius",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer inner radius [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferPermeability",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer permeability [m^2]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferPorosity",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer porosity",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferThickness",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer thickness [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferTotalCompressibility",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer total compressibility (rock and fluid) [Pa^-1]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferWaterDensity",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer water density [kg.m^-3]",
                    ),
                    required: true,
                },
                Field {
                    name: "aquiferWaterPhaseComponentFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Aquifer water phase component fraction. This keyword is ignored for single-phase flow simulations.",
                    ),
                    required: false,
                },
                Field {
                    name: "aquiferWaterPhaseComponentNames",
                    type_name: "string_array",
                    doc: Some(
                        "Aquifer water phase component names. This keyword is ignored for single-phase flow simulations.",
                    ),
                    required: false,
                },
                Field {
                    name: "aquiferWaterViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Aquifer water viscosity [Pa.s]",
                    ),
                    required: true,
                },
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialCondition",
                    type_name: "integer",
                    doc: Some(
                        "Boundary condition is applied as an initial condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "pressureInfluenceFunctionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the table describing the pressure influence function\n. If not provided, we use a default pressure influence function",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of sets that boundary condition is applied to.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Dirichlet",
            doc: None,
            fields: [
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "component",
                    type_name: "integer",
                    doc: Some(
                        "Component of field (if tensor) to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of field that boundary condition is applied to.",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialCondition",
                    type_name: "integer",
                    doc: Some(
                        "Boundary condition is applied as an initial condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Path to the target field",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of sets that boundary condition is applied to.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "FieldSpecification",
            doc: None,
            fields: [
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "component",
                    type_name: "integer",
                    doc: Some(
                        "Component of field (if tensor) to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of field that boundary condition is applied to.",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialCondition",
                    type_name: "integer",
                    doc: Some(
                        "Boundary condition is applied as an initial condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Path to the target field",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of sets that boundary condition is applied to.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "HydrostaticEquilibrium",
            doc: None,
            fields: [
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentFractionVsElevationTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of the tables specifying the (component fraction vs elevation) relationship for each component",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of the fluid components",
                    ),
                    required: false,
                },
                Field {
                    name: "datumElevation",
                    type_name: "real64",
                    doc: Some(
                        "Datum elevation [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "datumPressure",
                    type_name: "real64",
                    doc: Some(
                        "Datum pressure [Pa]",
                    ),
                    required: true,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "elevationIncrementInHydrostaticPressureTable",
                    type_name: "real64",
                    doc: Some(
                        "Elevation increment [m] in the hydrostatic pressure table constructed internally",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "equilibrationTolerance",
                    type_name: "real64",
                    doc: Some(
                        "Tolerance in the fixed-point iteration scheme used for hydrostatic initialization",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialPhaseName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the phase initially saturating the reservoir",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumberOfEquilibrationIterations",
                    type_name: "integer",
                    doc: Some(
                        "Maximum number of equilibration iterations",
                    ),
                    required: false,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Path to the target field",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "temperatureVsElevationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the table specifying the (temperature [K] vs elevation) relationship",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PML",
            doc: None,
            fields: [
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "component",
                    type_name: "integer",
                    doc: Some(
                        "Component of field (if tensor) to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Path to the target field",
                    ),
                    required: false,
                },
                Field {
                    name: "reflectivity",
                    type_name: "real32",
                    doc: Some(
                        "Desired reflectivity of the PML region, used to compute the damping profile",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of sets that boundary condition is applied to.",
                    ),
                    required: true,
                },
                Field {
                    name: "thicknessMaxXYZ",
                    type_name: "R1Tensor32",
                    doc: Some(
                        "Thickness of the PML region, at right, back, and bottom sides, used to compute the damping profile",
                    ),
                    required: false,
                },
                Field {
                    name: "thicknessMinXYZ",
                    type_name: "R1Tensor32",
                    doc: Some(
                        "Thickness of the PML region, at left, front, and top sides, used to compute the damping profile",
                    ),
                    required: false,
                },
                Field {
                    name: "waveSpeedMaxXYZ",
                    type_name: "R1Tensor32",
                    doc: Some(
                        "Wave speed in the PML, at right, back, and bottom sides, used to compute the damping profile",
                    ),
                    required: false,
                },
                Field {
                    name: "waveSpeedMinXYZ",
                    type_name: "R1Tensor32",
                    doc: Some(
                        "Wave speed in the PML, at left, front, and top sides, used to compute the damping profile",
                    ),
                    required: false,
                },
                Field {
                    name: "xMax",
                    type_name: "R1Tensor32",
                    doc: Some(
                        "Maximum (x,y,z) coordinates of the inner PML boundaries",
                    ),
                    required: false,
                },
                Field {
                    name: "xMin",
                    type_name: "R1Tensor32",
                    doc: Some(
                        "Minimum (x,y,z) coordinates of the inner PML boundaries",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SourceFlux",
            doc: None,
            fields: [
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "component",
                    type_name: "integer",
                    doc: Some(
                        "Component of field (if tensor) to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialCondition",
                    type_name: "integer",
                    doc: Some(
                        "Boundary condition is applied as an initial condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Path to the target field",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of sets that boundary condition is applied to.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Traction",
            doc: None,
            fields: [
                Field {
                    name: "bcApplicationTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of table that specifies the on/off application of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "beginTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will start being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "direction",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Direction to apply boundary condition to.",
                    ),
                    required: false,
                },
                Field {
                    name: "endTime",
                    type_name: "real64",
                    doc: Some(
                        "Time at which the boundary condition will stop being applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "functionName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of function that specifies variation of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialCondition",
                    type_name: "integer",
                    doc: Some(
                        "Boundary condition is applied as an initial condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "inputStress",
                    type_name: "R2SymTensor",
                    doc: Some(
                        "Input stress for tractionType = stress",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Path to the target field",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "real64",
                    doc: Some(
                        "Scale factor for value of the boundary condition.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of sets that boundary condition is applied to.",
                    ),
                    required: true,
                },
                Field {
                    name: "tractionType",
                    type_name: "geos_TractionBoundaryCondition_TractionType",
                    doc: Some(
                        "Type of traction boundary condition. Options are:\nvector - traction is applied to the faces as specified from the scale and direction,\nnormal - traction is applied to the faces as a pressure specified from the product of scale and the outward face normal,\nstress - traction is applied to the faces as specified by the inner product of input stress and face normal.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Functions",
            doc: None,
            fields: [],
            children: Some(
                [
                    "MultivariableTableFunction",
                    "TableFunction",
                ],
            ),
        },
        ComplexType {
            name: "MultivariableTableFunction",
            doc: None,
            fields: [
                Field {
                    name: "inputVarNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of fields are input to function.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TableFunction",
            doc: None,
            fields: [
                Field {
                    name: "coordinateFiles",
                    type_name: "path_array",
                    doc: Some(
                        "List of coordinate file names for ND Table",
                    ),
                    required: false,
                },
                Field {
                    name: "coordinates",
                    type_name: "real64_array",
                    doc: Some(
                        "Coordinates inputs for 1D tables",
                    ),
                    required: false,
                },
                Field {
                    name: "inputVarNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Name of fields are input to function.",
                    ),
                    required: false,
                },
                Field {
                    name: "interpolation",
                    type_name: "geos_TableFunction_InterpolationType",
                    doc: Some(
                        "Interpolation method. Valid options:\n* linear\n* nearest\n* upper\n* lower",
                    ),
                    required: false,
                },
                Field {
                    name: "values",
                    type_name: "real64_array",
                    doc: Some(
                        "Values for 1D tables",
                    ),
                    required: false,
                },
                Field {
                    name: "voxelFile",
                    type_name: "path",
                    doc: Some(
                        "Voxel file name for ND Table",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Geometry",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Box",
                    "CustomPolarObject",
                    "Cylinder",
                    "Disc",
                    "Rectangle",
                    "ThickPlane",
                ],
            ),
        },
        ComplexType {
            name: "Box",
            doc: None,
            fields: [
                Field {
                    name: "strike",
                    type_name: "real64",
                    doc: Some(
                        "The strike angle of the box",
                    ),
                    required: false,
                },
                Field {
                    name: "xMax",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Maximum (x,y,z) coordinates of the box",
                    ),
                    required: true,
                },
                Field {
                    name: "xMin",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Minimum (x,y,z) coordinates of the box",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CustomPolarObject",
            doc: None,
            fields: [
                Field {
                    name: "center",
                    type_name: "R1Tensor",
                    doc: Some(
                        "(x,y,z) coordinates of the center of the CustomPolarObject",
                    ),
                    required: true,
                },
                Field {
                    name: "coefficients",
                    type_name: "real64_array",
                    doc: Some(
                        "Coefficients of the CustomPolarObject function relating the localradius to the angle theta.",
                    ),
                    required: true,
                },
                Field {
                    name: "lengthVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Tangent vector defining the orthonormal basis along with the normal.",
                    ),
                    required: true,
                },
                Field {
                    name: "normal",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                    ),
                    required: true,
                },
                Field {
                    name: "tolerance",
                    type_name: "real64",
                    doc: Some(
                        "Tolerance to determine if a point sits on the CustomPolarObject or not. It is relative to the maximum dimension of the CustomPolarObject.",
                    ),
                    required: false,
                },
                Field {
                    name: "widthVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Tangent vector defining the orthonormal basis along with the normal.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Cylinder",
            doc: None,
            fields: [
                Field {
                    name: "firstFaceCenter",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Center point of the first face of the cylinder",
                    ),
                    required: true,
                },
                Field {
                    name: "innerRadius",
                    type_name: "real64",
                    doc: Some(
                        "Inner radius of the annulus",
                    ),
                    required: false,
                },
                Field {
                    name: "outerRadius",
                    type_name: "real64",
                    doc: Some(
                        "Outer radius of the cylinder",
                    ),
                    required: true,
                },
                Field {
                    name: "secondFaceCenter",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Center point of the second face of the cylinder",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Disc",
            doc: None,
            fields: [
                Field {
                    name: "center",
                    type_name: "R1Tensor",
                    doc: Some(
                        "(x,y,z) coordinates of the center of the disc",
                    ),
                    required: true,
                },
                Field {
                    name: "lengthVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Tangent vector defining the orthonormal basis along with the normal.",
                    ),
                    required: true,
                },
                Field {
                    name: "normal",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                    ),
                    required: true,
                },
                Field {
                    name: "radius",
                    type_name: "real64",
                    doc: Some(
                        "Radius of the disc.",
                    ),
                    required: true,
                },
                Field {
                    name: "tolerance",
                    type_name: "real64",
                    doc: Some(
                        "Tolerance to determine if a point sits on the disc or not. It is relative to the maximum dimension of the disc.",
                    ),
                    required: false,
                },
                Field {
                    name: "widthVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Tangent vector defining the orthonormal basis along with the normal.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Rectangle",
            doc: None,
            fields: [
                Field {
                    name: "dimensions",
                    type_name: "real64_array",
                    doc: Some(
                        "Length and width of the bounded plane",
                    ),
                    required: true,
                },
                Field {
                    name: "lengthVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Tangent vector defining the orthonormal basis along with the normal.",
                    ),
                    required: true,
                },
                Field {
                    name: "normal",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                    ),
                    required: true,
                },
                Field {
                    name: "origin",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Origin point (x,y,z) of the plane (basically, any point on the plane)",
                    ),
                    required: true,
                },
                Field {
                    name: "tolerance",
                    type_name: "real64",
                    doc: Some(
                        "Tolerance to determine if a point sits on the plane or not. It is relative to the maximum dimension of the plane.",
                    ),
                    required: false,
                },
                Field {
                    name: "widthVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Tangent vector defining the orthonormal basis along with the normal.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ThickPlane",
            doc: None,
            fields: [
                Field {
                    name: "normal",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Normal (n_x,n_y,n_z) to the plane (will be normalized automatically)",
                    ),
                    required: true,
                },
                Field {
                    name: "origin",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Origin point (x,y,z) of the plane (basically, any point on the plane)",
                    ),
                    required: true,
                },
                Field {
                    name: "thickness",
                    type_name: "real64",
                    doc: Some(
                        "The total thickness of the plane (with half to each side)",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Mesh",
            doc: None,
            fields: [],
            children: Some(
                [
                    "InternalMesh",
                    "InternalWellbore",
                    "ParticleMesh",
                    "VTKMesh",
                ],
            ),
        },
        ComplexType {
            name: "InternalMesh",
            doc: None,
            fields: [
                Field {
                    name: "cellBlockNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "elementTypes",
                    type_name: "string_array",
                    doc: Some(
                        "Element types of each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "nx",
                    type_name: "integer_array",
                    doc: Some(
                        "Number of elements in the x-direction within each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "ny",
                    type_name: "integer_array",
                    doc: Some(
                        "Number of elements in the y-direction within each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "nz",
                    type_name: "integer_array",
                    doc: Some(
                        "Number of elements in the z-direction within each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "positionTolerance",
                    type_name: "real64",
                    doc: Some(
                        "A position tolerance to verify if a node belong to a nodeset",
                    ),
                    required: false,
                },
                Field {
                    name: "trianglePattern",
                    type_name: "integer",
                    doc: Some(
                        "Pattern by which to decompose the hex mesh into wedges",
                    ),
                    required: false,
                },
                Field {
                    name: "xBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the x-direction within each mesh block (dx_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                    ),
                    required: false,
                },
                Field {
                    name: "xCoords",
                    type_name: "real64_array",
                    doc: Some(
                        "x-coordinates of each mesh block vertex",
                    ),
                    required: true,
                },
                Field {
                    name: "yBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the y-direction within each mesh block (dy_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                    ),
                    required: false,
                },
                Field {
                    name: "yCoords",
                    type_name: "real64_array",
                    doc: Some(
                        "y-coordinates of each mesh block vertex",
                    ),
                    required: true,
                },
                Field {
                    name: "zBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the z-direction within each mesh block (dz_left=(1+b)*L/N, dz_right=(1-b)*L/N)",
                    ),
                    required: false,
                },
                Field {
                    name: "zCoords",
                    type_name: "real64_array",
                    doc: Some(
                        "z-coordinates of each mesh block vertex",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "InternalWell",
                    "VTKWell",
                ],
            ),
        },
        ComplexType {
            name: "InternalWell",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "minElementLength",
                    type_name: "real64",
                    doc: Some(
                        "Minimum length of a well element, computed as (segment length / number of elements per segment ) [m]",
                    ),
                    required: false,
                },
                Field {
                    name: "minSegmentLength",
                    type_name: "real64",
                    doc: Some(
                        "Minimum length of a well segment [m]",
                    ),
                    required: false,
                },
                Field {
                    name: "numElementsPerSegment",
                    type_name: "integer",
                    doc: Some(
                        "Number of well elements per polyline segment",
                    ),
                    required: true,
                },
                Field {
                    name: "polylineNodeCoords",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Physical coordinates of the well polyline nodes",
                    ),
                    required: true,
                },
                Field {
                    name: "polylineSegmentConn",
                    type_name: "globalIndex_array2d",
                    doc: Some(
                        "Connectivity of the polyline segments",
                    ),
                    required: true,
                },
                Field {
                    name: "radius",
                    type_name: "real64",
                    doc: Some(
                        "Radius of the well [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "wellControlsName",
                    type_name: "string",
                    doc: Some(
                        "Name of the set of constraints associated with this well",
                    ),
                    required: true,
                },
                Field {
                    name: "wellRegionName",
                    type_name: "string",
                    doc: Some(
                        "Name of the well element region",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "Perforation",
                ],
            ),
        },
        ComplexType {
            name: "Perforation",
            doc: None,
            fields: [
                Field {
                    name: "distanceFromHead",
                    type_name: "real64",
                    doc: Some(
                        "Linear distance from well head to the perforation",
                    ),
                    required: true,
                },
                Field {
                    name: "skinFactor",
                    type_name: "real64",
                    doc: Some(
                        "Perforation skin factor",
                    ),
                    required: false,
                },
                Field {
                    name: "transmissibility",
                    type_name: "real64",
                    doc: Some(
                        "Perforation transmissibility",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "VTKWell",
            doc: None,
            fields: [
                Field {
                    name: "file",
                    type_name: "path",
                    doc: Some(
                        "Path to the well file",
                    ),
                    required: true,
                },
                Field {
                    name: "minElementLength",
                    type_name: "real64",
                    doc: Some(
                        "Minimum length of a well element, computed as (segment length / number of elements per segment ) [m]",
                    ),
                    required: false,
                },
                Field {
                    name: "minSegmentLength",
                    type_name: "real64",
                    doc: Some(
                        "Minimum length of a well segment [m]",
                    ),
                    required: false,
                },
                Field {
                    name: "numElementsPerSegment",
                    type_name: "integer",
                    doc: Some(
                        "Number of well elements per polyline segment",
                    ),
                    required: true,
                },
                Field {
                    name: "radius",
                    type_name: "real64",
                    doc: Some(
                        "Radius of the well [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "wellControlsName",
                    type_name: "string",
                    doc: Some(
                        "Name of the set of constraints associated with this well",
                    ),
                    required: true,
                },
                Field {
                    name: "wellRegionName",
                    type_name: "string",
                    doc: Some(
                        "Name of the well element region",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "Perforation",
                ],
            ),
        },
        ComplexType {
            name: "InternalWellbore",
            doc: None,
            fields: [
                Field {
                    name: "autoSpaceRadialElems",
                    type_name: "real64_array",
                    doc: Some(
                        "Automatically set number and spacing of elements in the radial direction. This overrides the values of nr!Value in each block indicates factor to scale the radial increment.Larger numbers indicate larger radial elements.",
                    ),
                    required: false,
                },
                Field {
                    name: "cartesianMappingInnerRadius",
                    type_name: "real64",
                    doc: Some(
                        "If using a Cartesian aligned outer boundary, this is inner radius at which to start the mapping.",
                    ),
                    required: false,
                },
                Field {
                    name: "cellBlockNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "elementTypes",
                    type_name: "string_array",
                    doc: Some(
                        "Element types of each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "hardRadialCoords",
                    type_name: "real64_array",
                    doc: Some(
                        "Sets the radial spacing to specified values",
                    ),
                    required: false,
                },
                Field {
                    name: "nr",
                    type_name: "integer_array",
                    doc: Some(
                        "Number of elements in the radial direction",
                    ),
                    required: true,
                },
                Field {
                    name: "nt",
                    type_name: "integer_array",
                    doc: Some(
                        "Number of elements in the tangent direction",
                    ),
                    required: true,
                },
                Field {
                    name: "nz",
                    type_name: "integer_array",
                    doc: Some(
                        "Number of elements in the z-direction within each mesh block",
                    ),
                    required: true,
                },
                Field {
                    name: "positionTolerance",
                    type_name: "real64",
                    doc: Some(
                        "A position tolerance to verify if a node belong to a nodeset",
                    ),
                    required: false,
                },
                Field {
                    name: "rBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the radial direction",
                    ),
                    required: false,
                },
                Field {
                    name: "radius",
                    type_name: "real64_array",
                    doc: Some(
                        "Wellbore radius",
                    ),
                    required: true,
                },
                Field {
                    name: "theta",
                    type_name: "real64_array",
                    doc: Some(
                        "Tangent angle defining geometry size: 90 for quarter, 180 for half and 360 for full wellbore geometry",
                    ),
                    required: true,
                },
                Field {
                    name: "trajectory",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates defining the wellbore trajectory",
                    ),
                    required: false,
                },
                Field {
                    name: "trianglePattern",
                    type_name: "integer",
                    doc: Some(
                        "Pattern by which to decompose the hex mesh into wedges",
                    ),
                    required: false,
                },
                Field {
                    name: "useCartesianOuterBoundary",
                    type_name: "integer",
                    doc: Some(
                        "Enforce a Cartesian aligned outer boundary on the outer block starting with the radial block specified in this value",
                    ),
                    required: false,
                },
                Field {
                    name: "xBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the x-direction within each mesh block (dx_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                    ),
                    required: false,
                },
                Field {
                    name: "yBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the y-direction within each mesh block (dy_left=(1+b)*L/N, dx_right=(1-b)*L/N)",
                    ),
                    required: false,
                },
                Field {
                    name: "zBias",
                    type_name: "real64_array",
                    doc: Some(
                        "Bias of element sizes in the z-direction within each mesh block (dz_left=(1+b)*L/N, dz_right=(1-b)*L/N)",
                    ),
                    required: false,
                },
                Field {
                    name: "zCoords",
                    type_name: "real64_array",
                    doc: Some(
                        "z-coordinates of each mesh block vertex",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "InternalWell",
                    "VTKWell",
                ],
            ),
        },
        ComplexType {
            name: "ParticleMesh",
            doc: None,
            fields: [
                Field {
                    name: "headerFile",
                    type_name: "path",
                    doc: Some(
                        "path to the header file",
                    ),
                    required: true,
                },
                Field {
                    name: "particleBlockNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of each particle block",
                    ),
                    required: true,
                },
                Field {
                    name: "particleFile",
                    type_name: "path",
                    doc: Some(
                        "path to the particle file",
                    ),
                    required: true,
                },
                Field {
                    name: "particleTypes",
                    type_name: "string_array",
                    doc: Some(
                        "Particle types of each particle block",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "VTKMesh",
            doc: None,
            fields: [
                Field {
                    name: "faceBlocks",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "For multi-block files, names of the face mesh block.",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldNamesInGEOSX",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of the volumic fields in GEOSX to import into",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldsToImport",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Volumic fields to be imported from the external mesh file",
                    ),
                    required: false,
                },
                Field {
                    name: "file",
                    type_name: "path",
                    doc: Some(
                        "Path to the mesh file",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "mainBlockName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "For multi-block files, name of the 3d mesh block.",
                    ),
                    required: false,
                },
                Field {
                    name: "nodesetNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of the VTK nodesets to import",
                    ),
                    required: false,
                },
                Field {
                    name: "partitionMethod",
                    type_name: "geos_vtk_PartitionMethod",
                    doc: Some(
                        "Method (library) used to partition the mesh",
                    ),
                    required: false,
                },
                Field {
                    name: "partitionRefinement",
                    type_name: "integer",
                    doc: Some(
                        "Number of partitioning refinement iterations (defaults to 1, recommended value).A value of 0 disables graph partitioning and keeps simple kd-tree partitions (not recommended). Values higher than 1 may lead to slightly improved partitioning, but yield diminishing returns.",
                    ),
                    required: false,
                },
                Field {
                    name: "regionAttribute",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the VTK cell attribute to use as region marker",
                    ),
                    required: false,
                },
                Field {
                    name: "scale",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Scale the coordinates of the vertices by given scale factors (after translation)",
                    ),
                    required: false,
                },
                Field {
                    name: "surfacicFieldsInGEOSX",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of the surfacic fields in GEOSX to import into",
                    ),
                    required: false,
                },
                Field {
                    name: "surfacicFieldsToImport",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Surfacic fields to be imported from the external mesh file",
                    ),
                    required: false,
                },
                Field {
                    name: "translate",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Translate the coordinates of the vertices by a given vector (prior to scaling)",
                    ),
                    required: false,
                },
                Field {
                    name: "useGlobalIds",
                    type_name: "integer",
                    doc: Some(
                        "Controls the use of global IDs in the input file for cells and points. If set to 0 (default value), the GlobalId arrays in the input mesh are used if available, and generated otherwise. If set to a negative value, the GlobalId arrays in the input mesh are not used, and generated global Ids are automatically generated. If set to a positive value, the GlobalId arrays in the input mesh are used and required, and the simulation aborts if they are not available",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "InternalWell",
                    "VTKWell",
                ],
            ),
        },
        ComplexType {
            name: "NumericalMethods",
            doc: None,
            fields: [],
            children: Some(
                [
                    "FiniteElements",
                    "FiniteVolume",
                ],
            ),
        },
        ComplexType {
            name: "FiniteElements",
            doc: None,
            fields: [],
            children: Some(
                [
                    "FiniteElementSpace",
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "FiniteElementSpace",
            doc: None,
            fields: [
                Field {
                    name: "formulation",
                    type_name: "geos_FiniteElementDiscretization_Formulation",
                    doc: Some(
                        "Specifier to indicate any specialized formuations. For instance, one of the many enhanced assumed strain methods of the Hexahedron parent shape would be indicated here",
                    ),
                    required: false,
                },
                Field {
                    name: "order",
                    type_name: "integer",
                    doc: Some(
                        "The order of the finite element basis.",
                    ),
                    required: true,
                },
                Field {
                    name: "useVirtualElements",
                    type_name: "integer",
                    doc: Some(
                        "Specifier to indicate whether to force the use of VEM",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "LinearSolverParameters",
            doc: None,
            fields: [
                Field {
                    name: "amgAggressiveCoarseningLevels",
                    type_name: "integer",
                    doc: Some(
                        "AMG number of levels for aggressive coarsening",
                    ),
                    required: false,
                },
                Field {
                    name: "amgAggressiveCoarseningPaths",
                    type_name: "integer",
                    doc: Some(
                        "AMG number of paths for aggressive coarsening",
                    ),
                    required: false,
                },
                Field {
                    name: "amgAggressiveInterpType",
                    type_name: "geos_LinearSolverParameters_AMG_AggInterpType",
                    doc: Some(
                        "AMG aggressive interpolation algorithm. Available options are: ``default|extendedIStage2|standardStage2|extendedStage2|multipass|modifiedExtended|modifiedExtendedI|modifiedExtendedE|modifiedMultipass``",
                    ),
                    required: false,
                },
                Field {
                    name: "amgCoarseSolver",
                    type_name: "geos_LinearSolverParameters_AMG_CoarseType",
                    doc: Some(
                        "AMG coarsest level solver/smoother type. Available options are: ``default|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|direct|bgs``",
                    ),
                    required: false,
                },
                Field {
                    name: "amgCoarseningType",
                    type_name: "geos_LinearSolverParameters_AMG_CoarseningType",
                    doc: Some(
                        "AMG coarsening algorithm. Available options are: ``default|CLJP|RugeStueben|Falgout|PMIS|HMIS``",
                    ),
                    required: false,
                },
                Field {
                    name: "amgInterpolationMaxNonZeros",
                    type_name: "integer",
                    doc: Some(
                        "AMG interpolation maximum number of nonzeros per row",
                    ),
                    required: false,
                },
                Field {
                    name: "amgInterpolationType",
                    type_name: "geos_LinearSolverParameters_AMG_InterpType",
                    doc: Some(
                        "AMG interpolation algorithm. Available options are: ``default|modifiedClassical|direct|multipass|extendedI|standard|extended|directBAMG|modifiedExtended|modifiedExtendedI|modifiedExtendedE``",
                    ),
                    required: false,
                },
                Field {
                    name: "amgNullSpaceType",
                    type_name: "geos_LinearSolverParameters_AMG_NullSpaceType",
                    doc: Some(
                        "AMG near null space approximation. Available options are:``constantModes|rigidBodyModes``",
                    ),
                    required: false,
                },
                Field {
                    name: "amgNumFunctions",
                    type_name: "integer",
                    doc: Some(
                        "AMG number of functions",
                    ),
                    required: false,
                },
                Field {
                    name: "amgNumSweeps",
                    type_name: "integer",
                    doc: Some(
                        "AMG smoother sweeps",
                    ),
                    required: false,
                },
                Field {
                    name: "amgRelaxWeight",
                    type_name: "real64",
                    doc: Some(
                        "AMG relaxation factor for the smoother",
                    ),
                    required: false,
                },
                Field {
                    name: "amgSeparateComponents",
                    type_name: "integer",
                    doc: Some(
                        "AMG apply separate component filter for multi-variable problems",
                    ),
                    required: false,
                },
                Field {
                    name: "amgSmootherType",
                    type_name: "geos_LinearSolverParameters_AMG_SmootherType",
                    doc: Some(
                        "AMG smoother type. Available options are: ``default|jacobi|l1jacobi|fgs|bgs|sgs|l1sgs|chebyshev|ilu0|ilut|ic0|ict``",
                    ),
                    required: false,
                },
                Field {
                    name: "amgThreshold",
                    type_name: "real64",
                    doc: Some(
                        "AMG strength-of-connection threshold",
                    ),
                    required: false,
                },
                Field {
                    name: "directCheckResidual",
                    type_name: "integer",
                    doc: Some(
                        "Whether to check the linear system solution residual",
                    ),
                    required: false,
                },
                Field {
                    name: "directColPerm",
                    type_name: "geos_LinearSolverParameters_Direct_ColPerm",
                    doc: Some(
                        "How to permute the columns. Available options are: ``none|MMD_AtplusA|MMD_AtA|colAMD|metis|parmetis``",
                    ),
                    required: false,
                },
                Field {
                    name: "directEquil",
                    type_name: "integer",
                    doc: Some(
                        "Whether to scale the rows and columns of the matrix",
                    ),
                    required: false,
                },
                Field {
                    name: "directIterRef",
                    type_name: "integer",
                    doc: Some(
                        "Whether to perform iterative refinement",
                    ),
                    required: false,
                },
                Field {
                    name: "directParallel",
                    type_name: "integer",
                    doc: Some(
                        "Whether to use a parallel solver (instead of a serial one)",
                    ),
                    required: false,
                },
                Field {
                    name: "directReplTinyPivot",
                    type_name: "integer",
                    doc: Some(
                        "Whether to replace tiny pivots by sqrt(epsilon)*norm(A)",
                    ),
                    required: false,
                },
                Field {
                    name: "directRowPerm",
                    type_name: "geos_LinearSolverParameters_Direct_RowPerm",
                    doc: Some(
                        "How to permute the rows. Available options are: ``none|mc64``",
                    ),
                    required: false,
                },
                Field {
                    name: "iluFill",
                    type_name: "integer",
                    doc: Some(
                        "ILU(K) fill factor",
                    ),
                    required: false,
                },
                Field {
                    name: "iluThreshold",
                    type_name: "real64",
                    doc: Some(
                        "ILU(T) threshold factor",
                    ),
                    required: false,
                },
                Field {
                    name: "krylovAdaptiveTol",
                    type_name: "integer",
                    doc: Some(
                        "Use Eisenstat-Walker adaptive linear tolerance",
                    ),
                    required: false,
                },
                Field {
                    name: "krylovMaxIter",
                    type_name: "integer",
                    doc: Some(
                        "Maximum iterations allowed for an iterative solver",
                    ),
                    required: false,
                },
                Field {
                    name: "krylovMaxRestart",
                    type_name: "integer",
                    doc: Some(
                        "Maximum iterations before restart (GMRES only)",
                    ),
                    required: false,
                },
                Field {
                    name: "krylovTol",
                    type_name: "real64",
                    doc: Some(
                        "Relative convergence tolerance of the iterative method\nIf the method converges, the iterative solution :math:`\\mathsf{x}_k` is such that\nthe relative residual norm satisfies:\n:math:`\\left\\lVert \\mathsf{b} - \\mathsf{A} \\mathsf{x}_k \\right\\rVert_2` < ``krylovTol`` * :math:`\\left\\lVert\\mathsf{b}\\right\\rVert_2`",
                    ),
                    required: false,
                },
                Field {
                    name: "krylovWeakestTol",
                    type_name: "real64",
                    doc: Some(
                        "Weakest-allowed tolerance for adaptive method",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "preconditionerType",
                    type_name: "geos_LinearSolverParameters_PreconditionerType",
                    doc: Some(
                        "Preconditioner type. Available options are: ``none|jacobi|l1jacobi|fgs|sgs|l1sgs|chebyshev|iluk|ilut|icc|ict|amg|mgr|block|direct|bgs``",
                    ),
                    required: false,
                },
                Field {
                    name: "solverType",
                    type_name: "geos_LinearSolverParameters_SolverType",
                    doc: Some(
                        "Linear solver type. Available options are: ``direct|cg|gmres|fgmres|bicgstab|preconditioner``",
                    ),
                    required: false,
                },
                Field {
                    name: "stopIfError",
                    type_name: "integer",
                    doc: Some(
                        "Whether to stop the simulation if the linear solver reports an error",
                    ),
                    required: false,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "NonlinearSolverParameters",
            doc: None,
            fields: [
                Field {
                    name: "allowNonConverged",
                    type_name: "integer",
                    doc: Some(
                        "Allow non-converged solution to be accepted. (i.e. exit from the Newton loop without achieving the desired tolerance)",
                    ),
                    required: false,
                },
                Field {
                    name: "configurationTolerance",
                    type_name: "real64",
                    doc: Some(
                        "Configuration tolerance",
                    ),
                    required: false,
                },
                Field {
                    name: "couplingType",
                    type_name: "geos_NonlinearSolverParameters_CouplingType",
                    doc: Some(
                        "Type of coupling. Valid options:\n* FullyImplicit\n* Sequential",
                    ),
                    required: false,
                },
                Field {
                    name: "lineSearchAction",
                    type_name: "geos_NonlinearSolverParameters_LineSearchAction",
                    doc: Some(
                        "How the line search is to be used. Options are: \n * None    - Do not use line search.\n* Attempt - Use line search. Allow exit from line search without achieving smaller residual than starting residual.\n* Require - Use line search. If smaller residual than starting resdual is not achieved, cut time step.",
                    ),
                    required: false,
                },
                Field {
                    name: "lineSearchCutFactor",
                    type_name: "real64",
                    doc: Some(
                        "Line search cut factor. For instance, a value of 0.5 will result in the effective application of the last solution by a factor of (0.5, 0.25, 0.125, ...)",
                    ),
                    required: false,
                },
                Field {
                    name: "lineSearchInterpolationType",
                    type_name: "geos_NonlinearSolverParameters_LineSearchInterpolationType",
                    doc: Some(
                        "Strategy to cut the solution update during the line search. Options are: \n * Linear\n* Parabolic",
                    ),
                    required: false,
                },
                Field {
                    name: "lineSearchMaxCuts",
                    type_name: "integer",
                    doc: Some(
                        "Maximum number of line search cuts.",
                    ),
                    required: false,
                },
                Field {
                    name: "lineSearchResidualFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to determine residual increase (recommended values: 1.1 (conservative), 2.0 (relaxed), 10.0 (aggressive)).",
                    ),
                    required: false,
                },
                Field {
                    name: "lineSearchStartingIteration",
                    type_name: "integer",
                    doc: Some(
                        "Iteration when line search starts.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAllowedResidualNorm",
                    type_name: "real64",
                    doc: Some(
                        "Maximum value of residual norm that is allowed in a Newton loop",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumConfigurationAttempts",
                    type_name: "integer",
                    doc: Some(
                        "Max number of times that the configuration can be changed",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSubSteps",
                    type_name: "integer",
                    doc: Some(
                        "Maximum number of time sub-steps allowed for the solver",
                    ),
                    required: false,
                },
                Field {
                    name: "maxTimeStepCuts",
                    type_name: "integer",
                    doc: Some(
                        "Max number of time step cuts",
                    ),
                    required: false,
                },
                Field {
                    name: "minNormalizer",
                    type_name: "real64",
                    doc: Some(
                        "Value used to make sure that residual normalizers are not too small when computing residual norm.",
                    ),
                    required: false,
                },
                Field {
                    name: "newtonMaxIter",
                    type_name: "integer",
                    doc: Some(
                        "Maximum number of iterations that are allowed in a Newton loop.",
                    ),
                    required: false,
                },
                Field {
                    name: "newtonMinIter",
                    type_name: "integer",
                    doc: Some(
                        "Minimum number of iterations that are required before exiting the Newton loop.",
                    ),
                    required: false,
                },
                Field {
                    name: "newtonTol",
                    type_name: "real64",
                    doc: Some(
                        "The required tolerance in order to exit the Newton iteration loop.",
                    ),
                    required: false,
                },
                Field {
                    name: "nonlinearAccelerationType",
                    type_name: "geos_NonlinearSolverParameters_NonlinearAccelerationType",
                    doc: Some(
                        "Nonlinear acceleration type for sequential solver.",
                    ),
                    required: false,
                },
                Field {
                    name: "sequentialConvergenceCriterion",
                    type_name: "geos_NonlinearSolverParameters_SequentialConvergenceCriterion",
                    doc: Some(
                        "Criterion used to check outer-loop convergence in sequential schemes. Valid options:\n* ResidualNorm\n* NumberOfNonlinearIterations\n* SolutionIncrements",
                    ),
                    required: false,
                },
                Field {
                    name: "subcycling",
                    type_name: "integer",
                    doc: Some(
                        "Flag to decide whether to iterate between sequentially coupled solvers or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeStepCutFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor by which the time step will be cut if a timestep cut is required.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeStepDecreaseFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor by which the time step is decreased when the number of Newton iterations is large.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeStepDecreaseIterLimit",
                    type_name: "real64",
                    doc: Some(
                        "Fraction of the max Newton iterations above which the solver asks for the time-step to be decreased for the next time step.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeStepIncreaseFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor by which the time step is increased when the number of Newton iterations is small.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeStepIncreaseIterLimit",
                    type_name: "real64",
                    doc: Some(
                        "Fraction of the max Newton iterations below which the solver asks for the time-step to be increased for the next time step.",
                    ),
                    required: false,
                },
                Field {
                    name: "normType",
                    type_name: "geos_solverBaseKernels_NormType",
                    doc: Some(
                        "Norm used by the flow solver to check nonlinear convergence. Valid options:\n* Linfinity\n* L2",
                    ),
                    required: false,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "FiniteVolume",
            doc: None,
            fields: [],
            children: Some(
                [
                    "HybridMimeticDiscretization",
                    "TwoPointFluxApproximation",
                ],
            ),
        },
        ComplexType {
            name: "HybridMimeticDiscretization",
            doc: None,
            fields: [
                Field {
                    name: "innerProductType",
                    type_name: "string",
                    doc: Some(
                        "Type of inner product used in the hybrid FVM solver",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TwoPointFluxApproximation",
            doc: None,
            fields: [
                Field {
                    name: "areaRelTol",
                    type_name: "real64",
                    doc: Some(
                        "Relative tolerance for area calculations.",
                    ),
                    required: false,
                },
                Field {
                    name: "meanPermCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "upwindingScheme",
                    type_name: "geos_UpwindingScheme",
                    doc: Some(
                        "Type of upwinding scheme. Valid options:\n* PPU\n* C1PPU\n* IHU",
                    ),
                    required: false,
                },
                Field {
                    name: "usePEDFM",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Outputs",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Blueprint",
                    "ChomboIO",
                    "Python",
                    "Restart",
                    "Silo",
                    "TimeHistory",
                    "VTK",
                ],
            ),
        },
        ComplexType {
            name: "Blueprint",
            doc: None,
            fields: [
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "outputFullQuadratureData",
                    type_name: "integer",
                    doc: Some(
                        "If true writes out data associated with every quadrature point.",
                    ),
                    required: false,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "plotLevel",
                    type_name: "geos_dataRepository_PlotLevel",
                    doc: Some(
                        "Determines which fields to write.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ChomboIO",
            doc: None,
            fields: [
                Field {
                    name: "beginCycle",
                    type_name: "real64",
                    doc: Some(
                        "Cycle at which the coupling will commence.",
                    ),
                    required: true,
                },
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "inputPath",
                    type_name: "string",
                    doc: Some(
                        "Path at which the chombo to geosx file will be written.",
                    ),
                    required: false,
                },
                Field {
                    name: "outputPath",
                    type_name: "string",
                    doc: Some(
                        "Path at which the geosx to chombo file will be written.",
                    ),
                    required: true,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "useChomboPressures",
                    type_name: "integer",
                    doc: Some(
                        "True iff geosx should use the pressures chombo writes out.",
                    ),
                    required: false,
                },
                Field {
                    name: "waitForInput",
                    type_name: "integer",
                    doc: Some(
                        "True iff geosx should wait for chombo to write out a file. When true the inputPath must be set.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Python",
            doc: None,
            fields: [
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Restart",
            doc: None,
            fields: [
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Silo",
            doc: None,
            fields: [
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of the fields to output. If this attribute is specified, GEOSX outputs all (and only) the fields specified by the user, regardless of their plotLevel",
                    ),
                    required: false,
                },
                Field {
                    name: "onlyPlotSpecifiedFieldNames",
                    type_name: "integer",
                    doc: Some(
                        "If this flag is equal to 1, then we only plot the fields listed in `fieldNames`. Otherwise, we plot all the fields with the required `plotLevel`, plus the fields listed in `fieldNames`",
                    ),
                    required: false,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "plotFileRoot",
                    type_name: "string",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "plotLevel",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "writeCellElementMesh",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "writeEdgeMesh",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "writeFEMFaces",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "writeFaceElementMesh",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TimeHistory",
            doc: None,
            fields: [
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "filename",
                    type_name: "string",
                    doc: Some(
                        "The filename to which to write time history output.",
                    ),
                    required: false,
                },
                Field {
                    name: "format",
                    type_name: "string",
                    doc: Some(
                        "The output file format for time history output.",
                    ),
                    required: false,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "sources",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "A list of collectors from which to collect and output time history information.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "VTK",
            doc: None,
            fields: [
                Field {
                    name: "childDirectory",
                    type_name: "string",
                    doc: Some(
                        "Child directory path",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Names of the fields to output. If this attribute is specified, GEOSX outputs all the fields specified by the user, regardless of their `plotLevel`",
                    ),
                    required: false,
                },
                Field {
                    name: "format",
                    type_name: "geos_vtk_VTKOutputMode",
                    doc: Some(
                        "Output data format.  Valid options: ``binary``, ``ascii``",
                    ),
                    required: false,
                },
                Field {
                    name: "levelNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of mesh levels to output.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "onlyPlotSpecifiedFieldNames",
                    type_name: "integer",
                    doc: Some(
                        "If this flag is equal to 1, then we only plot the fields listed in `fieldNames`. Otherwise, we plot all the fields with the required `plotLevel`, plus the fields listed in `fieldNames`",
                    ),
                    required: false,
                },
                Field {
                    name: "outputRegionType",
                    type_name: "geos_vtk_VTKRegionTypes",
                    doc: Some(
                        "Output region types.  Valid options: ``cell``, ``well``, ``surface``, ``particle``, ``all``",
                    ),
                    required: false,
                },
                Field {
                    name: "parallelThreads",
                    type_name: "integer",
                    doc: Some(
                        "Number of plot files.",
                    ),
                    required: false,
                },
                Field {
                    name: "plotFileRoot",
                    type_name: "string",
                    doc: Some(
                        "Name of the root file for this output.",
                    ),
                    required: false,
                },
                Field {
                    name: "plotLevel",
                    type_name: "integer",
                    doc: Some(
                        "Level detail plot. Only fields with lower of equal plot level will be output.",
                    ),
                    required: false,
                },
                Field {
                    name: "writeFEMFaces",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "writeGhostCells",
                    type_name: "integer",
                    doc: Some(
                        "Should the vtk files contain the ghost cells or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Solvers",
            doc: None,
            fields: [
                Field {
                    name: "gravityVector",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Gravity vector used in the physics solvers",
                    ),
                    required: false,
                },
            ],
            children: Some(
                [
                    "AcousticElasticSEM",
                    "AcousticFirstOrderSEM",
                    "AcousticSEM",
                    "AcousticVTISEM",
                    "CompositionalMultiphaseFVM",
                    "CompositionalMultiphaseHybridFVM",
                    "CompositionalMultiphaseReservoir",
                    "CompositionalMultiphaseReservoirPoromechanics",
                    "CompositionalMultiphaseWell",
                    "ElasticFirstOrderSEM",
                    "ElasticSEM",
                    "EmbeddedSurfaceGenerator",
                    "FlowProppantTransport",
                    "Hydrofracture",
                    "LaplaceFEM",
                    "MultiphasePoromechanics",
                    "MultiphasePoromechanicsReservoir",
                    "PhaseFieldDamageFEM",
                    "PhaseFieldFracture",
                    "ProppantTransport",
                    "ReactiveCompositionalMultiphaseOBL",
                    "SeismicityRate",
                    "SinglePhaseFVM",
                    "SinglePhaseHybridFVM",
                    "SinglePhasePoromechanics",
                    "SinglePhasePoromechanicsConformingFractures",
                    "SinglePhasePoromechanicsEmbeddedFractures",
                    "SinglePhasePoromechanicsReservoir",
                    "SinglePhaseProppantFVM",
                    "SinglePhaseReservoir",
                    "SinglePhaseReservoirPoromechanics",
                    "SinglePhaseWell",
                    "SolidMechanicsEmbeddedFractures",
                    "SolidMechanicsLagrangeContact",
                    "SolidMechanicsLagrangianSSLE",
                    "SolidMechanics_LagrangianFEM",
                    "SolidMechanics_MPM",
                    "SurfaceGenerator",
                ],
            ),
        },
        ComplexType {
            name: "AcousticElasticSEM",
            doc: None,
            fields: [
                Field {
                    name: "acousticSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the acoustic solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "elasticSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the elastic solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "AcousticFirstOrderSEM",
            doc: None,
            fields: [
                Field {
                    name: "attenuationType",
                    type_name: "geos_WaveSolverUtils_AttenuationType",
                    doc: Some(
                        "Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "dtSeismoTrace",
                    type_name: "real64",
                    doc: Some(
                        "Time step for output pressure at receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "enableLifo",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to enable LIFO storage feature",
                    ),
                    required: false,
                },
                Field {
                    name: "forward",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to compute forward propagation",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnDevice",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnHost",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoSize",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASGeometry",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASSamples",
                    type_name: "integer",
                    doc: Some(
                        "Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "outputSeismoTrace",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                    ),
                    required: false,
                },
                Field {
                    name: "receiverCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "rickerOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                    ),
                    required: false,
                },
                Field {
                    name: "saveFields",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to save fields during forward and restore them during backward",
                    ),
                    required: false,
                },
                Field {
                    name: "shotIndex",
                    type_name: "integer",
                    doc: Some(
                        "Set the current shot for temporary files",
                    ),
                    required: false,
                },
                Field {
                    name: "slsAnelasticityCoefficients",
                    type_name: "real32_array",
                    doc: Some(
                        "Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "slsReferenceAngularFrequencies",
                    type_name: "real32_array",
                    doc: Some(
                        "Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the sources",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeSourceDelay",
                    type_name: "real32",
                    doc: Some(
                        "Source time delay (1 / f0 by default)",
                    ),
                    required: false,
                },
                Field {
                    name: "timeSourceFrequency",
                    type_name: "real32",
                    doc: Some(
                        "Central frequency for the time source",
                    ),
                    required: false,
                },
                Field {
                    name: "useDAS",
                    type_name: "geos_WaveSolverUtils_DASType",
                    doc: Some(
                        "Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "AcousticSEM",
            doc: None,
            fields: [
                Field {
                    name: "attenuationType",
                    type_name: "geos_WaveSolverUtils_AttenuationType",
                    doc: Some(
                        "Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "dtSeismoTrace",
                    type_name: "real64",
                    doc: Some(
                        "Time step for output pressure at receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "enableLifo",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to enable LIFO storage feature",
                    ),
                    required: false,
                },
                Field {
                    name: "forward",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to compute forward propagation",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnDevice",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnHost",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoSize",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASGeometry",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASSamples",
                    type_name: "integer",
                    doc: Some(
                        "Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "outputSeismoTrace",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                    ),
                    required: false,
                },
                Field {
                    name: "receiverCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "rickerOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                    ),
                    required: false,
                },
                Field {
                    name: "saveFields",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to save fields during forward and restore them during backward",
                    ),
                    required: false,
                },
                Field {
                    name: "shotIndex",
                    type_name: "integer",
                    doc: Some(
                        "Set the current shot for temporary files",
                    ),
                    required: false,
                },
                Field {
                    name: "slsAnelasticityCoefficients",
                    type_name: "real32_array",
                    doc: Some(
                        "Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "slsReferenceAngularFrequencies",
                    type_name: "real32_array",
                    doc: Some(
                        "Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the sources",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeSourceDelay",
                    type_name: "real32",
                    doc: Some(
                        "Source time delay (1 / f0 by default)",
                    ),
                    required: false,
                },
                Field {
                    name: "timeSourceFrequency",
                    type_name: "real32",
                    doc: Some(
                        "Central frequency for the time source",
                    ),
                    required: false,
                },
                Field {
                    name: "useDAS",
                    type_name: "geos_WaveSolverUtils_DASType",
                    doc: Some(
                        "Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "AcousticVTISEM",
            doc: None,
            fields: [
                Field {
                    name: "attenuationType",
                    type_name: "geos_WaveSolverUtils_AttenuationType",
                    doc: Some(
                        "Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "dtSeismoTrace",
                    type_name: "real64",
                    doc: Some(
                        "Time step for output pressure at receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "enableLifo",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to enable LIFO storage feature",
                    ),
                    required: false,
                },
                Field {
                    name: "forward",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to compute forward propagation",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnDevice",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnHost",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoSize",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASGeometry",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASSamples",
                    type_name: "integer",
                    doc: Some(
                        "Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "outputSeismoTrace",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                    ),
                    required: false,
                },
                Field {
                    name: "receiverCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "rickerOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                    ),
                    required: false,
                },
                Field {
                    name: "saveFields",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to save fields during forward and restore them during backward",
                    ),
                    required: false,
                },
                Field {
                    name: "shotIndex",
                    type_name: "integer",
                    doc: Some(
                        "Set the current shot for temporary files",
                    ),
                    required: false,
                },
                Field {
                    name: "slsAnelasticityCoefficients",
                    type_name: "real32_array",
                    doc: Some(
                        "Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "slsReferenceAngularFrequencies",
                    type_name: "real32_array",
                    doc: Some(
                        "Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the sources",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeSourceDelay",
                    type_name: "real32",
                    doc: Some(
                        "Source time delay (1 / f0 by default)",
                    ),
                    required: false,
                },
                Field {
                    name: "timeSourceFrequency",
                    type_name: "real32",
                    doc: Some(
                        "Central frequency for the time source",
                    ),
                    required: false,
                },
                Field {
                    name: "useDAS",
                    type_name: "geos_WaveSolverUtils_DASType",
                    doc: Some(
                        "Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "CompositionalMultiphaseFVM",
            doc: None,
            fields: [
                Field {
                    name: "allowLocalCompDensityChopping",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether local (cell-wise) chopping of negative compositions is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "contMultiplierDBC",
                    type_name: "real64",
                    doc: Some(
                        "Factor by which continuation parameter is changed every newton when DBC is used",
                    ),
                    required: false,
                },
                Field {
                    name: "continuationDBC",
                    type_name: "integer",
                    doc: Some(
                        "Flag for enabling continuation parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "kappaminDBC",
                    type_name: "real64",
                    doc: Some(
                        "Factor that controls how much dissipation is kept in the system when continuation is used",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxCompFractionChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) change in a component fraction in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxRelativePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (relative) change in pressure in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxRelativeTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (relative) change in temperature in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialCompDensChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) component density change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "minCompDens",
                    type_name: "real64",
                    doc: Some(
                        "Minimum allowed global component density",
                    ),
                    required: false,
                },
                Field {
                    name: "miscibleDBC",
                    type_name: "integer",
                    doc: Some(
                        "Flag for enabling DBC formulation with/without miscibility",
                    ),
                    required: false,
                },
                Field {
                    name: "omegaDBC",
                    type_name: "real64",
                    doc: Some(
                        "Factor by which DBC flux is multiplied",
                    ),
                    required: false,
                },
                Field {
                    name: "scalingType",
                    type_name: "geos_CompositionalMultiphaseFVM_ScalingType",
                    doc: Some(
                        "Solution scaling type.Valid options:\n* Global\n* Local",
                    ),
                    required: false,
                },
                Field {
                    name: "solutionChangeScalingFactor",
                    type_name: "real64",
                    doc: Some(
                        "Damping factor for solution change targets",
                    ),
                    required: false,
                },
                Field {
                    name: "targetFlowCFL",
                    type_name: "real64",
                    doc: Some(
                        "Target CFL condition `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_when computing the next timestep.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetPhaseVolFractionChangeInTimeStep",
                    type_name: "real64",
                    doc: Some(
                        "Target (absolute) change in phase volume fraction in a time step",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRelativePressureChangeInTimeStep",
                    type_name: "real64",
                    doc: Some(
                        "Target (relative) change in pressure in a time step (expected value between 0 and 1)",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRelativeTemperatureChangeInTimeStep",
                    type_name: "real64",
                    doc: Some(
                        "Target (relative) change in temperature in a time step (expected value between 0 and 1)",
                    ),
                    required: false,
                },
                Field {
                    name: "temperature",
                    type_name: "real64",
                    doc: Some(
                        "Temperature",
                    ),
                    required: true,
                },
                Field {
                    name: "useDBC",
                    type_name: "integer",
                    doc: Some(
                        "Enable Dissipation-based continuation flux",
                    ),
                    required: false,
                },
                Field {
                    name: "useMass",
                    type_name: "integer",
                    doc: Some(
                        "Use mass formulation instead of molar",
                    ),
                    required: false,
                },
                Field {
                    name: "useSimpleAccumulation",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether simple accumulation form is used",
                    ),
                    required: false,
                },
                Field {
                    name: "useTotalMassEquation",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether total mass equation is used",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "CompositionalMultiphaseHybridFVM",
            doc: None,
            fields: [
                Field {
                    name: "allowLocalCompDensityChopping",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether local (cell-wise) chopping of negative compositions is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxCompFractionChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) change in a component fraction in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxRelativePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (relative) change in pressure in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxRelativeTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (relative) change in temperature in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialCompDensChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) component density change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "minCompDens",
                    type_name: "real64",
                    doc: Some(
                        "Minimum allowed global component density",
                    ),
                    required: false,
                },
                Field {
                    name: "solutionChangeScalingFactor",
                    type_name: "real64",
                    doc: Some(
                        "Damping factor for solution change targets",
                    ),
                    required: false,
                },
                Field {
                    name: "targetFlowCFL",
                    type_name: "real64",
                    doc: Some(
                        "Target CFL condition `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_when computing the next timestep.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetPhaseVolFractionChangeInTimeStep",
                    type_name: "real64",
                    doc: Some(
                        "Target (absolute) change in phase volume fraction in a time step",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRelativePressureChangeInTimeStep",
                    type_name: "real64",
                    doc: Some(
                        "Target (relative) change in pressure in a time step (expected value between 0 and 1)",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRelativeTemperatureChangeInTimeStep",
                    type_name: "real64",
                    doc: Some(
                        "Target (relative) change in temperature in a time step (expected value between 0 and 1)",
                    ),
                    required: false,
                },
                Field {
                    name: "temperature",
                    type_name: "real64",
                    doc: Some(
                        "Temperature",
                    ),
                    required: true,
                },
                Field {
                    name: "useMass",
                    type_name: "integer",
                    doc: Some(
                        "Use mass formulation instead of molar",
                    ),
                    required: false,
                },
                Field {
                    name: "useSimpleAccumulation",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether simple accumulation form is used",
                    ),
                    required: false,
                },
                Field {
                    name: "useTotalMassEquation",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether total mass equation is used",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "CompositionalMultiphaseReservoir",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "wellSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the well solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "CompositionalMultiphaseReservoirPoromechanics",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "reservoirAndWellsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the reservoirAndWells solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "stabilizationMultiplier",
                    type_name: "real64",
                    doc: Some(
                        "Constant multiplier of stabilization strength.",
                    ),
                    required: false,
                },
                Field {
                    name: "stabilizationRegionNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Regions where stabilization is applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "stabilizationType",
                    type_name: "geos_stabilization_StabilizationType",
                    doc: Some(
                        "Stabilization type. Options are:\nNone - Add no stabilization to mass equation,\nGlobal - Add stabilization to all faces,\nLocal - Add stabilization only to interiors of macro elements.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "CompositionalMultiphaseWell",
            doc: None,
            fields: [
                Field {
                    name: "allowLocalCompDensityChopping",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether local (cell-wise) chopping of negative compositions is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxCompFractionChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) change in a component fraction between two Newton iterations",
                    ),
                    required: false,
                },
                Field {
                    name: "maxRelativePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (relative) change in pressure between two Newton iterations (recommended with rate control)",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "useMass",
                    type_name: "integer",
                    doc: Some(
                        "Use total mass equation",
                    ),
                    required: false,
                },
                Field {
                    name: "writeCSV",
                    type_name: "integer",
                    doc: Some(
                        "Write rates into a CSV file",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                    "WellControls",
                ],
            ),
        },
        ComplexType {
            name: "WellControls",
            doc: None,
            fields: [
                Field {
                    name: "control",
                    type_name: "geos_WellControls_Control",
                    doc: Some(
                        "Well control. Valid options:\n* BHP\n* phaseVolRate\n* totalVolRate\n* massRate\n* uninitialized",
                    ),
                    required: true,
                },
                Field {
                    name: "enableCrossflow",
                    type_name: "integer",
                    doc: Some(
                        "Flag to enable crossflow. Currently only supported for injectors: \n - If the flag is set to 1, both reservoir-to-well flow and well-to-reservoir flow are allowed at the perforations. \n - If the flag is set to 0, we only allow well-to-reservoir flow at the perforations.",
                    ),
                    required: false,
                },
                Field {
                    name: "initialPressureCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Tuning coefficient for the initial well pressure of rate-controlled wells: \n - Injector pressure at reference depth initialized as: (1+initialPressureCoefficient)*reservoirPressureAtClosestPerforation + density*g*( zRef - zPerf ) \n - Producer pressure at reference depth initialized as: (1-initialPressureCoefficient)*reservoirPressureAtClosestPerforation + density*g*( zRef - zPerf ) ",
                    ),
                    required: false,
                },
                Field {
                    name: "injectionStream",
                    type_name: "real64_array",
                    doc: Some(
                        "Global component densities of the injection stream [moles/m^3 or kg/m^3]",
                    ),
                    required: false,
                },
                Field {
                    name: "injectionTemperature",
                    type_name: "real64",
                    doc: Some(
                        "Temperature of the injection stream [K]",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceElevation",
                    type_name: "real64",
                    doc: Some(
                        "Reference elevation where BHP control is enforced [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "statusTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the well status table when the status of the well is a time dependent function. \nIf the status function evaluates to a positive value at the current time, the well will be open otherwise the well will be shut.",
                    ),
                    required: false,
                },
                Field {
                    name: "surfacePressure",
                    type_name: "real64",
                    doc: Some(
                        "Surface pressure used to compute volumetric rates when surface conditions are used [Pa]",
                    ),
                    required: false,
                },
                Field {
                    name: "surfaceTemperature",
                    type_name: "real64",
                    doc: Some(
                        "Surface temperature used to compute volumetric rates when surface conditions are used [K]",
                    ),
                    required: false,
                },
                Field {
                    name: "targetBHP",
                    type_name: "real64",
                    doc: Some(
                        "Target bottom-hole pressure [Pa]",
                    ),
                    required: false,
                },
                Field {
                    name: "targetBHPTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the BHP table when the rate is a time dependent function",
                    ),
                    required: false,
                },
                Field {
                    name: "targetMassRate",
                    type_name: "real64",
                    doc: Some(
                        "Target Mass Rate rate ( [kg^3/s])",
                    ),
                    required: false,
                },
                Field {
                    name: "targetMassRateTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the mass rate table when the rate is a time dependent function",
                    ),
                    required: false,
                },
                Field {
                    name: "targetPhaseName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the target phase",
                    ),
                    required: false,
                },
                Field {
                    name: "targetPhaseRate",
                    type_name: "real64",
                    doc: Some(
                        "Target phase volumetric rate (if useSurfaceConditions: [surface m^3/s]; else [reservoir m^3/s])",
                    ),
                    required: false,
                },
                Field {
                    name: "targetPhaseRateTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the phase rate table when the rate is a time dependent function",
                    ),
                    required: false,
                },
                Field {
                    name: "targetTotalRate",
                    type_name: "real64",
                    doc: Some(
                        "Target total volumetric rate (if useSurfaceConditions: [surface m^3/s]; else [reservoir m^3/s])",
                    ),
                    required: false,
                },
                Field {
                    name: "targetTotalRateTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the total rate table when the rate is a time dependent function",
                    ),
                    required: false,
                },
                Field {
                    name: "type",
                    type_name: "geos_WellControls_Type",
                    doc: Some(
                        "Well type. Valid options:\n* producer\n* injector",
                    ),
                    required: true,
                },
                Field {
                    name: "useSurfaceConditions",
                    type_name: "integer",
                    doc: Some(
                        "Flag to specify whether rates are checked at surface or reservoir conditions.\nEqual to 1 for surface conditions, and to 0 for reservoir conditions",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ElasticFirstOrderSEM",
            doc: None,
            fields: [
                Field {
                    name: "attenuationType",
                    type_name: "geos_WaveSolverUtils_AttenuationType",
                    doc: Some(
                        "Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "dtSeismoTrace",
                    type_name: "real64",
                    doc: Some(
                        "Time step for output pressure at receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "enableLifo",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to enable LIFO storage feature",
                    ),
                    required: false,
                },
                Field {
                    name: "forward",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to compute forward propagation",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnDevice",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnHost",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoSize",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASGeometry",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASSamples",
                    type_name: "integer",
                    doc: Some(
                        "Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "outputSeismoTrace",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                    ),
                    required: false,
                },
                Field {
                    name: "receiverCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "rickerOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                    ),
                    required: false,
                },
                Field {
                    name: "saveFields",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to save fields during forward and restore them during backward",
                    ),
                    required: false,
                },
                Field {
                    name: "shotIndex",
                    type_name: "integer",
                    doc: Some(
                        "Set the current shot for temporary files",
                    ),
                    required: false,
                },
                Field {
                    name: "slsAnelasticityCoefficients",
                    type_name: "real32_array",
                    doc: Some(
                        "Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "slsReferenceAngularFrequencies",
                    type_name: "real32_array",
                    doc: Some(
                        "Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the sources",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeSourceDelay",
                    type_name: "real32",
                    doc: Some(
                        "Source time delay (1 / f0 by default)",
                    ),
                    required: false,
                },
                Field {
                    name: "timeSourceFrequency",
                    type_name: "real32",
                    doc: Some(
                        "Central frequency for the time source",
                    ),
                    required: false,
                },
                Field {
                    name: "useDAS",
                    type_name: "geos_WaveSolverUtils_DASType",
                    doc: Some(
                        "Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "ElasticSEM",
            doc: None,
            fields: [
                Field {
                    name: "attenuationType",
                    type_name: "geos_WaveSolverUtils_AttenuationType",
                    doc: Some(
                        "Flag to indicate which attenuation model to use: \"none\" for no attenuation, \"sls\\ for the standard-linear-solid (SLS) model (Fichtner, 2014).",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "dtSeismoTrace",
                    type_name: "real64",
                    doc: Some(
                        "Time step for output pressure at receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "enableLifo",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to enable LIFO storage feature",
                    ),
                    required: false,
                },
                Field {
                    name: "forward",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to compute forward propagation",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnDevice",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo device storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoOnHost",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo host storage (if negative, opposite of percentage of remaining memory)",
                    ),
                    required: false,
                },
                Field {
                    name: "lifoSize",
                    type_name: "integer",
                    doc: Some(
                        "Set the capacity of the lifo storage (should be the total number of buffers to store in the LIFO)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASGeometry",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Geometry parameters for a linear DAS fiber (dip, azimuth, gauge length)",
                    ),
                    required: false,
                },
                Field {
                    name: "linearDASSamples",
                    type_name: "integer",
                    doc: Some(
                        "Number of sample points to be used for strain integration when integrating the strain for the DAS signal",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "outputSeismoTrace",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates if we write the seismo trace in a file .txt, 0 no output, 1 otherwise",
                    ),
                    required: false,
                },
                Field {
                    name: "receiverCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the receivers",
                    ),
                    required: false,
                },
                Field {
                    name: "rickerOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag that indicates the order of the Ricker to be used o, 1 or 2. Order 2 by default",
                    ),
                    required: false,
                },
                Field {
                    name: "saveFields",
                    type_name: "integer",
                    doc: Some(
                        "Set to 1 to save fields during forward and restore them during backward",
                    ),
                    required: false,
                },
                Field {
                    name: "shotIndex",
                    type_name: "integer",
                    doc: Some(
                        "Set the current shot for temporary files",
                    ),
                    required: false,
                },
                Field {
                    name: "slsAnelasticityCoefficients",
                    type_name: "real32_array",
                    doc: Some(
                        "Anelasticity coefficients for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding reference frequencies must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "slsReferenceAngularFrequencies",
                    type_name: "real32_array",
                    doc: Some(
                        "Reference angular frequencies (omega) for the standard-linear-solid (SLS) anelasticity.The default value is { }, corresponding to no attenuation. An array with the corresponding anelasticity coefficients must be provided.",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceCoordinates",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Coordinates (x,y,z) of the sources",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceForce",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Force of the source: 3 real values for a vector source, and 6 real values for a tensor source (in Voigt notation).The default value is { 0, 0, 0 } (no net force).",
                    ),
                    required: false,
                },
                Field {
                    name: "sourceMoment",
                    type_name: "R2SymTensor",
                    doc: Some(
                        "Moment of the source: 6 real values describing a symmetric tensor in Voigt notation.The default value is { 1, 1, 1, 0, 0, 0 } (diagonal moment, corresponding to a pure explosion).",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeSourceDelay",
                    type_name: "real32",
                    doc: Some(
                        "Source time delay (1 / f0 by default)",
                    ),
                    required: false,
                },
                Field {
                    name: "timeSourceFrequency",
                    type_name: "real32",
                    doc: Some(
                        "Central frequency for the time source",
                    ),
                    required: false,
                },
                Field {
                    name: "useDAS",
                    type_name: "geos_WaveSolverUtils_DASType",
                    doc: Some(
                        "Flag to indicate if DAS data will be modeled, and which DAS type to use: \"none\" to deactivate DAS, \"strainIntegration\" for strain integration, \"dipole\" for displacement difference",
                    ),
                    required: false,
                },
                Field {
                    name: "useVTI",
                    type_name: "integer",
                    doc: Some(
                        "Flag to apply VTI anisotropy. The default is to use isotropic physic.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "EmbeddedSurfaceGenerator",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "fractureRegion",
                    type_name: "groupNameRef",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "mpiCommOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag to enable MPI consistent communication ordering",
                    ),
                    required: false,
                },
                Field {
                    name: "targetObjects",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of geometric objects that will be used to initialized the embedded surfaces/fractures.",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "FlowProppantTransport",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "proppantSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the proppant solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "Hydrofracture",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "contactRelationName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of contact relation to enforce constraints on fracture boundary.",
                    ),
                    required: true,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isMatrixPoroelastic",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumResolves",
                    type_name: "integer",
                    doc: Some(
                        "Value to indicate how many resolves may be executed to perform surface generation after the execution of flow and mechanics solver. ",
                    ),
                    required: false,
                },
                Field {
                    name: "newFractureInitializationType",
                    type_name: "geos_HydrofractureSolver_lt_geos_SinglePhasePoromechanics_lt_geos_SinglePhaseBase_cm_-geos_SolidMechanicsLagrangianFEM_gt_-_gt__InitializationType",
                    doc: Some(
                        "Type of new fracture element initialization. Can be Pressure or Displacement. ",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "surfaceGeneratorName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the surface generator to use in the hydrofracture solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "useQuasiNewton",
                    type_name: "integer",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "LaplaceFEM",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "fieldName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of field variable",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_LaplaceBaseH1_TimeIntegrationOption",
                    doc: Some(
                        "Time integration method. Options are:\n* SteadyState\n* ImplicitTransient",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "MultiphasePoromechanics",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "stabilizationMultiplier",
                    type_name: "real64",
                    doc: Some(
                        "Constant multiplier of stabilization strength.",
                    ),
                    required: false,
                },
                Field {
                    name: "stabilizationRegionNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Regions where stabilization is applied.",
                    ),
                    required: false,
                },
                Field {
                    name: "stabilizationType",
                    type_name: "geos_stabilization_StabilizationType",
                    doc: Some(
                        "Stabilization type. Options are:\nNone - Add no stabilization to mass equation,\nGlobal - Add stabilization to all faces,\nLocal - Add stabilization only to interiors of macro elements.",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "MultiphasePoromechanicsReservoir",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "wellSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the well solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "PhaseFieldDamageFEM",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "damageUpperBound",
                    type_name: "real64",
                    doc: Some(
                        "The upper bound of the damage",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "fieldName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "name of field variable",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "irreversibilityFlag",
                    type_name: "integer",
                    doc: Some(
                        "The flag to indicate whether to apply the irreversibility constraint",
                    ),
                    required: false,
                },
                Field {
                    name: "localDissipation",
                    type_name: "geos_PhaseFieldDamageFEM_LocalDissipation",
                    doc: Some(
                        "Type of local dissipation function. Can be Linear or Quadratic",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_PhaseFieldDamageFEM_TimeIntegrationOption",
                    doc: Some(
                        "option for default time integration method",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "PhaseFieldFracture",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "damageSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the damage solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "ProppantTransport",
            doc: None,
            fields: [
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "bridgingFactor",
                    type_name: "real64",
                    doc: Some(
                        "Bridging factor used for bridging/screen-out calculation",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "criticalShieldsNumber",
                    type_name: "real64",
                    doc: Some(
                        "Critical Shields number",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "frictionCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Friction coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxProppantConcentration",
                    type_name: "real64",
                    doc: Some(
                        "Maximum proppant concentration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "proppantDensity",
                    type_name: "real64",
                    doc: Some(
                        "Proppant density",
                    ),
                    required: false,
                },
                Field {
                    name: "proppantDiameter",
                    type_name: "real64",
                    doc: Some(
                        "Proppant diameter",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "updateProppantPacking",
                    type_name: "integer",
                    doc: Some(
                        "Flag that enables/disables proppant-packing update",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "ReactiveCompositionalMultiphaseOBL",
            doc: None,
            fields: [
                Field {
                    name: "OBLOperatorsTableFile",
                    type_name: "path",
                    doc: Some(
                        "File containing OBL operator values",
                    ),
                    required: true,
                },
                Field {
                    name: "allowLocalOBLChopping",
                    type_name: "integer",
                    doc: Some(
                        "Allow keeping solution within OBL limits",
                    ),
                    required: false,
                },
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "enableEnergyBalance",
                    type_name: "integer",
                    doc: Some(
                        "Enable energy balance calculation and temperature degree of freedom",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxCompFractionChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) change in a component fraction between two Newton iterations",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "numComponents",
                    type_name: "integer",
                    doc: Some(
                        "Number of components",
                    ),
                    required: true,
                },
                Field {
                    name: "numPhases",
                    type_name: "integer",
                    doc: Some(
                        "Number of phases",
                    ),
                    required: true,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "transMultExp",
                    type_name: "real64",
                    doc: Some(
                        "Exponent of dynamic transmissibility multiplier",
                    ),
                    required: false,
                },
                Field {
                    name: "useDARTSL2Norm",
                    type_name: "integer",
                    doc: Some(
                        "Use L2 norm calculation similar to one used DARTS",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SeismicityRate",
            doc: None,
            fields: [
                Field {
                    name: "backgroundStressingRate",
                    type_name: "real64",
                    doc: Some(
                        "Background stressing rate",
                    ),
                    required: true,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "directEffect",
                    type_name: "real64",
                    doc: Some(
                        "Rate-and-state friction direct effect parameter",
                    ),
                    required: true,
                },
                Field {
                    name: "faultNormalDirection",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Fault normal direction",
                    ),
                    required: false,
                },
                Field {
                    name: "faultShearDirection",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Fault shear direction",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "stressSolverName",
                    type_name: "string",
                    doc: Some(
                        "Name of solver for computing stress",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhaseFVM",
            doc: None,
            fields: [
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "temperature",
                    type_name: "real64",
                    doc: Some(
                        "Temperature",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhaseHybridFVM",
            doc: None,
            fields: [
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "temperature",
                    type_name: "real64",
                    doc: Some(
                        "Temperature",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhasePoromechanics",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhasePoromechanicsConformingFractures",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhasePoromechanicsEmbeddedFractures",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhasePoromechanicsReservoir",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "wellSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the well solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhaseProppantFVM",
            doc: None,
            fields: [
                Field {
                    name: "allowNegativePressure",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating if negative pressure is allowed",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "maxAbsolutePressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a Newton iteration",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialPressureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) pressure change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "maxSequentialTemperatureChange",
                    type_name: "real64",
                    doc: Some(
                        "Maximum (absolute) temperature change in a sequential iteration, used for outer loop convergence check",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "temperature",
                    type_name: "real64",
                    doc: Some(
                        "Temperature",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhaseReservoir",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "wellSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the well solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhaseReservoirPoromechanics",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isThermal",
                    type_name: "integer",
                    doc: Some(
                        "Flag indicating whether the problem is thermal or not. Set isThermal=\"1\" to enable the thermal coupling",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "reservoirAndWellsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the reservoirAndWells solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver used by the coupled solver",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SinglePhaseWell",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "writeCSV",
                    type_name: "integer",
                    doc: Some(
                        "Write rates into a CSV file",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                    "WellControls",
                ],
            ),
        },
        ComplexType {
            name: "SolidMechanicsEmbeddedFractures",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "massDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of mass based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumResolves",
                    type_name: "integer",
                    doc: Some(
                        "Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkBeta",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkGamma",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                    ),
                    required: false,
                },
                Field {
                    name: "stiffnessDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of stiffness based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "strainTheory",
                    type_name: "integer",
                    doc: Some(
                        "Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                    doc: Some(
                        "Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                    ),
                    required: false,
                },
                Field {
                    name: "useStaticCondensation",
                    type_name: "integer",
                    doc: Some(
                        "Defines whether to use static condensation or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SolidMechanicsLagrangeContact",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "massDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of mass based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumResolves",
                    type_name: "integer",
                    doc: Some(
                        "Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkBeta",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkGamma",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                    ),
                    required: false,
                },
                Field {
                    name: "stabilizationName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the stabilization to use in the lagrangian contact solver",
                    ),
                    required: true,
                },
                Field {
                    name: "stabilizationScalingCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "It be used to increase the scale of the stabilization entries. A value < 1.0 results in larger entries in the stabilization matrix.",
                    ),
                    required: false,
                },
                Field {
                    name: "stiffnessDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of stiffness based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "strainTheory",
                    type_name: "integer",
                    doc: Some(
                        "Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                    doc: Some(
                        "Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SolidMechanicsLagrangianSSLE",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "contactRelationName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of contact relation to enforce constraints on fracture boundary.",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "massDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of mass based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumResolves",
                    type_name: "integer",
                    doc: Some(
                        "Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkBeta",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkGamma",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                    ),
                    required: false,
                },
                Field {
                    name: "stiffnessDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of stiffness based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "strainTheory",
                    type_name: "integer",
                    doc: Some(
                        "Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "surfaceGeneratorName",
                    type_name: "string",
                    doc: Some(
                        "Name of the surface generator to use",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                    doc: Some(
                        "Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SolidMechanics_LagrangianFEM",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "contactRelationName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of contact relation to enforce constraints on fracture boundary.",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "massDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of mass based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "maxNumResolves",
                    type_name: "integer",
                    doc: Some(
                        "Value to indicate how many resolves may be executed after some other event is executed. For example, if a SurfaceGenerator is specified, it will be executed after the mechanics solve. However if a new surface is generated, then the mechanics solve must be executed again due to the change in topology.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkBeta",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\beta` in the Newmark Method for Implicit Dynamic time integration option. This should be pow(newmarkGamma+0.5,2.0)/4.0 unless you know what you are doing.",
                    ),
                    required: false,
                },
                Field {
                    name: "newmarkGamma",
                    type_name: "real64",
                    doc: Some(
                        "Value of :math:`\\gamma` in the Newmark Method for Implicit Dynamic time integration option",
                    ),
                    required: false,
                },
                Field {
                    name: "stiffnessDamping",
                    type_name: "real64",
                    doc: Some(
                        "Value of stiffness based damping coefficient. ",
                    ),
                    required: false,
                },
                Field {
                    name: "strainTheory",
                    type_name: "integer",
                    doc: Some(
                        "Indicates whether or not to use `Infinitesimal Strain Theory <https://en.wikipedia.org/wiki/Infinitesimal_strain_theory>`_, or `Finite Strain Theory <https://en.wikipedia.org/wiki/Finite_strain_theory>`_. Valid Inputs are:\n 0 - Infinitesimal Strain \n 1 - Finite Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "surfaceGeneratorName",
                    type_name: "string",
                    doc: Some(
                        "Name of the surface generator to use",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_SolidMechanicsLagrangianFEM_TimeIntegrationOption",
                    doc: Some(
                        "Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SolidMechanics_MPM",
            doc: None,
            fields: [
                Field {
                    name: "boundaryConditionTypes",
                    type_name: "integer_array",
                    doc: Some(
                        "Boundary conditions on x-, x+, y-, y+, z- and z+ faces. Options are:\n* Outflow\n* Symmetry",
                    ),
                    required: false,
                },
                Field {
                    name: "boxAverageHistory",
                    type_name: "integer",
                    doc: Some(
                        "Flag for whether to output box average history",
                    ),
                    required: false,
                },
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "contactGapCorrection",
                    type_name: "integer",
                    doc: Some(
                        "Flag for mitigating contact gaps",
                    ),
                    required: false,
                },
                Field {
                    name: "cpdiDomainScaling",
                    type_name: "integer",
                    doc: Some(
                        "Option for CPDI domain scaling",
                    ),
                    required: false,
                },
                Field {
                    name: "damageFieldPartitioning",
                    type_name: "integer",
                    doc: Some(
                        "Flag for using the gradient of the particle damage field to partition material into separate velocity fields",
                    ),
                    required: false,
                },
                Field {
                    name: "discretization",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.",
                    ),
                    required: true,
                },
                Field {
                    name: "fTableInterpType",
                    type_name: "integer",
                    doc: Some(
                        "The type of F table interpolation. Options are 0 (linear), 1 (cosine), 2 (quintic polynomial).",
                    ),
                    required: false,
                },
                Field {
                    name: "fTablePath",
                    type_name: "path",
                    doc: Some(
                        "Path to f-table",
                    ),
                    required: false,
                },
                Field {
                    name: "frictionCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Coefficient of friction, currently assumed to be the same everywhere",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "needsNeighborList",
                    type_name: "integer",
                    doc: Some(
                        "Flag for whether to construct neighbor list",
                    ),
                    required: false,
                },
                Field {
                    name: "neighborRadius",
                    type_name: "real64",
                    doc: Some(
                        "Neighbor radius for SPH-type calculations",
                    ),
                    required: false,
                },
                Field {
                    name: "planeStrain",
                    type_name: "integer",
                    doc: Some(
                        "Flag for performing plane strain calculations",
                    ),
                    required: false,
                },
                Field {
                    name: "prescribedBcTable",
                    type_name: "integer",
                    doc: Some(
                        "Flag for whether to have time-dependent boundary condition types",
                    ),
                    required: false,
                },
                Field {
                    name: "prescribedBoundaryFTable",
                    type_name: "integer",
                    doc: Some(
                        "Flag for whether to have time-dependent boundary conditions described by a global background grid F",
                    ),
                    required: false,
                },
                Field {
                    name: "reactionHistory",
                    type_name: "integer",
                    doc: Some(
                        "Flag for whether to output face reaction history",
                    ),
                    required: false,
                },
                Field {
                    name: "separabilityMinDamage",
                    type_name: "real64",
                    doc: Some(
                        "Damage threshold for field separability",
                    ),
                    required: false,
                },
                Field {
                    name: "solverProfiling",
                    type_name: "integer",
                    doc: Some(
                        "Flag for timing subroutines in the solver",
                    ),
                    required: false,
                },
                Field {
                    name: "surfaceDetection",
                    type_name: "integer",
                    doc: Some(
                        "Flag for automatic surface detection on the 1st cycle",
                    ),
                    required: false,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "timeIntegrationOption",
                    type_name: "geos_SolidMechanicsMPM_TimeIntegrationOption",
                    doc: Some(
                        "Time integration method. Options are:\n* QuasiStatic\n* ImplicitDynamic\n* ExplicitDynamic",
                    ),
                    required: false,
                },
                Field {
                    name: "treatFullyDamagedAsSingleField",
                    type_name: "integer",
                    doc: Some(
                        "Whether to consolidate fully damaged fields into a single field. Nice for modeling damaged mush.",
                    ),
                    required: false,
                },
                Field {
                    name: "useDamageAsSurfaceFlag",
                    type_name: "integer",
                    doc: Some(
                        "Indicates whether particle damage at the beginning of the simulation should be interpreted as a surface flag",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "SurfaceGenerator",
            doc: None,
            fields: [
                Field {
                    name: "cflFactor",
                    type_name: "real64",
                    doc: Some(
                        "Factor to apply to the `CFL condition <http://en.wikipedia.org/wiki/Courant-Friedrichs-Lewy_condition>`_ when calculating the maximum allowable time step. Values should be in the interval (0,1] ",
                    ),
                    required: false,
                },
                Field {
                    name: "fractureRegion",
                    type_name: "groupNameRef",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "initialDt",
                    type_name: "real64",
                    doc: Some(
                        "Initial time-step value required by the solver to the event manager.",
                    ),
                    required: false,
                },
                Field {
                    name: "isPoroelastic",
                    type_name: "integer",
                    doc: Some(
                        "Flag that defines whether the material is poroelastic or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "mpiCommOrder",
                    type_name: "integer",
                    doc: Some(
                        "Flag to enable MPI consistent communication ordering",
                    ),
                    required: false,
                },
                Field {
                    name: "nodeBasedSIF",
                    type_name: "integer",
                    doc: Some(
                        "Flag for choosing between node or edge based criteria: 1 for node based criterion",
                    ),
                    required: false,
                },
                Field {
                    name: "rockToughness",
                    type_name: "real64",
                    doc: Some(
                        "Rock toughness of the solid material",
                    ),
                    required: true,
                },
                Field {
                    name: "targetRegions",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "Allowable regions that the solver may be applied to. Note that this does not indicate that the solver will be applied to these regions, only that allocation will occur such that the solver may be applied to these regions. The decision about what regions this solver will beapplied to rests in the EventManager.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: Some(
                [
                    "LinearSolverParameters",
                    "NonlinearSolverParameters",
                ],
            ),
        },
        ComplexType {
            name: "Tasks",
            doc: None,
            fields: [],
            children: Some(
                [
                    "CompositionalMultiphaseReservoirPoromechanicsInitialization",
                    "CompositionalMultiphaseStatistics",
                    "HydrofractureInitialization",
                    "MultiphasePoromechanicsInitialization",
                    "PVTDriver",
                    "PackCollection",
                    "ReactiveFluidDriver",
                    "RelpermDriver",
                    "SinglePhasePoromechanicsInitialization",
                    "SinglePhaseReservoirPoromechanicsInitialization",
                    "SinglePhaseStatistics",
                    "SolidMechanicsStateReset",
                    "SolidMechanicsStatistics",
                    "TriaxialDriver",
                ],
            ),
        },
        ComplexType {
            name: "CompositionalMultiphaseReservoirPoromechanicsInitialization",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidMechanicsStatisticsName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid mechanics statistics",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompositionalMultiphaseStatistics",
            doc: None,
            fields: [
                Field {
                    name: "computeCFLNumbers",
                    type_name: "integer",
                    doc: Some(
                        "Flag to decide whether CFL numbers are computed or not",
                    ),
                    required: false,
                },
                Field {
                    name: "computeRegionStatistics",
                    type_name: "integer",
                    doc: Some(
                        "Flag to decide whether region statistics are computed or not",
                    ),
                    required: false,
                },
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "relpermThreshold",
                    type_name: "real64",
                    doc: Some(
                        "Flag to decide whether a phase is considered mobile (when the relperm is above the threshold) or immobile (when the relperm is below the threshold) in metric 2",
                    ),
                    required: false,
                },
                Field {
                    name: "writeCSV",
                    type_name: "integer",
                    doc: Some(
                        "Write statistics into a CSV file",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "HydrofractureInitialization",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidMechanicsStatisticsName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid mechanics statistics",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "MultiphasePoromechanicsInitialization",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidMechanicsStatisticsName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid mechanics statistics",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PVTDriver",
            doc: None,
            fields: [
                Field {
                    name: "baseline",
                    type_name: "path",
                    doc: Some(
                        "Baseline file",
                    ),
                    required: false,
                },
                Field {
                    name: "feedComposition",
                    type_name: "real64_array",
                    doc: Some(
                        "Feed composition array [mol fraction]",
                    ),
                    required: true,
                },
                Field {
                    name: "fluid",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Fluid to test",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "output",
                    type_name: "string",
                    doc: Some(
                        "Output file",
                    ),
                    required: false,
                },
                Field {
                    name: "outputCompressibility",
                    type_name: "integer",
                    doc: Some(
                        "Flag to indicate that the total compressibility should be output",
                    ),
                    required: false,
                },
                Field {
                    name: "outputMassDensity",
                    type_name: "integer",
                    doc: Some(
                        "Flag to indicate that the mass density of each phase should be output",
                    ),
                    required: false,
                },
                Field {
                    name: "outputPhaseComposition",
                    type_name: "integer",
                    doc: Some(
                        "Flag to indicate that phase compositions should be output",
                    ),
                    required: false,
                },
                Field {
                    name: "pressureControl",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Function controlling pressure time history",
                    ),
                    required: true,
                },
                Field {
                    name: "steps",
                    type_name: "integer",
                    doc: Some(
                        "Number of load steps to take",
                    ),
                    required: true,
                },
                Field {
                    name: "temperatureControl",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Function controlling temperature time history",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PackCollection",
            doc: None,
            fields: [
                Field {
                    name: "disableCoordCollection",
                    type_name: "integer",
                    doc: Some(
                        "Whether or not to create coordinate meta-collectors if collected objects are mesh objects.",
                    ),
                    required: false,
                },
                Field {
                    name: "fieldName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "The name of the (packable) field associated with the specified object to retrieve data from",
                    ),
                    required: true,
                },
                Field {
                    name: "objectPath",
                    type_name: "groupNameRef",
                    doc: Some(
                        "The name of the object from which to retrieve field values.",
                    ),
                    required: true,
                },
                Field {
                    name: "onlyOnSetChange",
                    type_name: "integer",
                    doc: Some(
                        "Whether or not to only collect when the collected sets of indices change in any way.",
                    ),
                    required: false,
                },
                Field {
                    name: "setNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "The set(s) for which to retrieve data.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ReactiveFluidDriver",
            doc: None,
            fields: [
                Field {
                    name: "baseline",
                    type_name: "path",
                    doc: Some(
                        "Baseline file",
                    ),
                    required: false,
                },
                Field {
                    name: "feedComposition",
                    type_name: "real64_array",
                    doc: Some(
                        "Feed composition array: total concentration of the primary species ",
                    ),
                    required: true,
                },
                Field {
                    name: "fluid",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Fluid to test",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "output",
                    type_name: "string",
                    doc: Some(
                        "Output file",
                    ),
                    required: false,
                },
                Field {
                    name: "pressureControl",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Function controlling pressure time history",
                    ),
                    required: true,
                },
                Field {
                    name: "steps",
                    type_name: "integer",
                    doc: Some(
                        "Number of load steps to take",
                    ),
                    required: true,
                },
                Field {
                    name: "temperatureControl",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Function controlling temperature time history",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "RelpermDriver",
            doc: None,
            fields: [
                Field {
                    name: "baseline",
                    type_name: "path",
                    doc: Some(
                        "Baseline file",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "output",
                    type_name: "string",
                    doc: Some(
                        "Output file",
                    ),
                    required: false,
                },
                Field {
                    name: "relperm",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Relperm model to test",
                    ),
                    required: true,
                },
                Field {
                    name: "steps",
                    type_name: "integer",
                    doc: Some(
                        "Number of saturation steps to take",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SinglePhasePoromechanicsInitialization",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidMechanicsStatisticsName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid mechanics statistics",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SinglePhaseReservoirPoromechanicsInitialization",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "poromechanicsSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the poromechanics solver",
                    ),
                    required: true,
                },
                Field {
                    name: "solidMechanicsStatisticsName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid mechanics statistics",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SinglePhaseStatistics",
            doc: None,
            fields: [
                Field {
                    name: "flowSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the flow solver",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "writeCSV",
                    type_name: "integer",
                    doc: Some(
                        "Write statistics into a CSV file",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SolidMechanicsStateReset",
            doc: None,
            fields: [
                Field {
                    name: "disableInelasticity",
                    type_name: "integer",
                    doc: Some(
                        "Flag to enable/disable inelastic behavior",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "resetDisplacements",
                    type_name: "integer",
                    doc: Some(
                        "Flag to reset displacements (and velocities)",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid mechanics solver",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SolidMechanicsStatistics",
            doc: None,
            fields: [
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "solidSolverName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid solver",
                    ),
                    required: true,
                },
                Field {
                    name: "writeCSV",
                    type_name: "integer",
                    doc: Some(
                        "Write statistics into a CSV file",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TriaxialDriver",
            doc: None,
            fields: [
                Field {
                    name: "axialControl",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Function controlling axial stress or strain (depending on test mode)",
                    ),
                    required: true,
                },
                Field {
                    name: "baseline",
                    type_name: "path",
                    doc: Some(
                        "Baseline file",
                    ),
                    required: false,
                },
                Field {
                    name: "initialStress",
                    type_name: "real64",
                    doc: Some(
                        "Initial stress (scalar used to set an isotropic stress state)",
                    ),
                    required: true,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "material",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Solid material to test",
                    ),
                    required: true,
                },
                Field {
                    name: "mode",
                    type_name: "geos_TriaxialDriver_Mode",
                    doc: Some(
                        "Test mode [stressControl, strainControl, mixedControl]",
                    ),
                    required: true,
                },
                Field {
                    name: "output",
                    type_name: "string",
                    doc: Some(
                        "Output file",
                    ),
                    required: false,
                },
                Field {
                    name: "radialControl",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Function controlling radial stress or strain (depending on test mode)",
                    ),
                    required: true,
                },
                Field {
                    name: "steps",
                    type_name: "integer",
                    doc: Some(
                        "Number of load steps to take",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Constitutive",
            doc: None,
            fields: [],
            children: Some(
                [
                    "BiotPorosity",
                    "BlackOilFluid",
                    "BrooksCoreyBakerRelativePermeability",
                    "BrooksCoreyCapillaryPressure",
                    "BrooksCoreyRelativePermeability",
                    "BrooksCoreyStone2RelativePermeability",
                    "CO2BrineEzrokhiFluid",
                    "CO2BrineEzrokhiThermalFluid",
                    "CO2BrinePhillipsFluid",
                    "CO2BrinePhillipsThermalFluid",
                    "CarmanKozenyPermeability",
                    "CeramicDamage",
                    "CompositionalMultiphaseFluid",
                    "CompositionalTwoPhaseFluidPengRobinson",
                    "CompositionalTwoPhaseFluidPengRobinsonLBC",
                    "CompositionalTwoPhaseFluidSoaveRedlichKwong",
                    "CompositionalTwoPhaseFluidSoaveRedlichKwongLBC",
                    "CompressibleSinglePhaseFluid",
                    "CompressibleSolidCarmanKozenyPermeability",
                    "CompressibleSolidConstantPermeability",
                    "CompressibleSolidExponentialDecayPermeability",
                    "CompressibleSolidParallelPlatesPermeability",
                    "CompressibleSolidPressurePermeability",
                    "CompressibleSolidSlipDependentPermeability",
                    "CompressibleSolidWillisRichardsPermeability",
                    "ConstantDiffusion",
                    "ConstantPermeability",
                    "Coulomb",
                    "DamageElasticIsotropic",
                    "DamageSpectralElasticIsotropic",
                    "DamageVolDevElasticIsotropic",
                    "DeadOilFluid",
                    "DelftEgg",
                    "DruckerPrager",
                    "ElasticIsotropic",
                    "ElasticIsotropicPressureDependent",
                    "ElasticOrthotropic",
                    "ElasticTransverseIsotropic",
                    "ExponentialDecayPermeability",
                    "ExtendedDruckerPrager",
                    "FrictionlessContact",
                    "JFunctionCapillaryPressure",
                    "LinearIsotropicDispersion",
                    "ModifiedCamClay",
                    "MultiPhaseConstantThermalConductivity",
                    "MultiPhaseVolumeWeightedThermalConductivity",
                    "NullModel",
                    "ParallelPlatesPermeability",
                    "ParticleFluid",
                    "PerfectlyPlastic",
                    "PorousDamageElasticIsotropic",
                    "PorousDamageSpectralElasticIsotropic",
                    "PorousDamageVolDevElasticIsotropic",
                    "PorousDelftEgg",
                    "PorousDruckerPrager",
                    "PorousElasticIsotropic",
                    "PorousElasticOrthotropic",
                    "PorousElasticTransverseIsotropic",
                    "PorousExtendedDruckerPrager",
                    "PorousModifiedCamClay",
                    "PorousViscoDruckerPrager",
                    "PorousViscoExtendedDruckerPrager",
                    "PorousViscoModifiedCamClay",
                    "PressurePermeability",
                    "PressurePorosity",
                    "ProppantPermeability",
                    "ProppantPorosity",
                    "ProppantSlurryFluid",
                    "ProppantSolidProppantPermeability",
                    "ReactiveBrine",
                    "ReactiveBrineThermal",
                    "SinglePhaseConstantThermalConductivity",
                    "SlipDependentPermeability",
                    "SolidInternalEnergy",
                    "TableCapillaryPressure",
                    "TableRelativePermeability",
                    "TableRelativePermeabilityHysteresis",
                    "ThermalCompressibleSinglePhaseFluid",
                    "VanGenuchtenBakerRelativePermeability",
                    "VanGenuchtenCapillaryPressure",
                    "VanGenuchtenStone2RelativePermeability",
                    "ViscoDruckerPrager",
                    "ViscoExtendedDruckerPrager",
                    "ViscoModifiedCamClay",
                    "WillisRichardsPermeability",
                ],
            ),
        },
        ComplexType {
            name: "BiotPorosity",
            doc: None,
            fields: [
                Field {
                    name: "defaultGrainBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Grain bulk modulus",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultPorosityTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default thermal expansion coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultReferencePorosity",
                    type_name: "real64",
                    doc: Some(
                        "Default value of the reference porosity",
                    ),
                    required: true,
                },
                Field {
                    name: "useUniaxialFixedStress",
                    type_name: "integer",
                    doc: Some(
                        "Flag enabling uniaxial approximation in fixed stress update",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "BlackOilFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "hydrocarbonFormationVolFactorTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of formation volume factor TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                    ),
                    required: false,
                },
                Field {
                    name: "hydrocarbonViscosityTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of viscosity TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "surfaceDensities",
                    type_name: "real64_array",
                    doc: Some(
                        "List of surface mass densities for each phase",
                    ),
                    required: true,
                },
                Field {
                    name: "tableFiles",
                    type_name: "path_array",
                    doc: Some(
                        "List of filenames with input PVT tables (one per phase)",
                    ),
                    required: false,
                },
                Field {
                    name: "waterCompressibility",
                    type_name: "real64",
                    doc: Some(
                        "Water compressibility",
                    ),
                    required: false,
                },
                Field {
                    name: "waterFormationVolumeFactor",
                    type_name: "real64",
                    doc: Some(
                        "Water formation volume factor",
                    ),
                    required: false,
                },
                Field {
                    name: "waterReferencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Water reference pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "waterViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Water viscosity",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "BrooksCoreyBakerRelativePermeability",
            doc: None,
            fields: [
                Field {
                    name: "gasOilRelPermExponent",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "gasOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "waterOilRelPermExponent",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "waterOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "BrooksCoreyCapillaryPressure",
            doc: None,
            fields: [
                Field {
                    name: "capPressureEpsilon",
                    type_name: "real64",
                    doc: Some(
                        "Wetting-phase saturation at which the max cap. pressure is attained; used to avoid infinite cap. pressure values for saturations close to zero",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseCapPressureExponentInv",
                    type_name: "real64_array",
                    doc: Some(
                        "Inverse of capillary power law exponent for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseEntryPressure",
                    type_name: "real64_array",
                    doc: Some(
                        "Entry pressure value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "BrooksCoreyRelativePermeability",
            doc: None,
            fields: [
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "phaseRelPermExponent",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum relative permeability power law exponent for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum relative permeability value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "BrooksCoreyStone2RelativePermeability",
            doc: None,
            fields: [
                Field {
                    name: "gasOilRelPermExponent",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "gasOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "waterOilRelPermExponent",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "waterOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CO2BrineEzrokhiFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "flashModelParaFile",
                    type_name: "path",
                    doc: Some(
                        "Name of the file defining the parameters of the flash model",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "phasePVTParaFiles",
                    type_name: "path_array",
                    doc: Some(
                        "Names of the files defining the parameters of the viscosity and density models",
                    ),
                    required: true,
                },
                Field {
                    name: "solubilityTableNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of solubility tables for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CO2BrineEzrokhiThermalFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "flashModelParaFile",
                    type_name: "path",
                    doc: Some(
                        "Name of the file defining the parameters of the flash model",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "phasePVTParaFiles",
                    type_name: "path_array",
                    doc: Some(
                        "Names of the files defining the parameters of the viscosity and density models",
                    ),
                    required: true,
                },
                Field {
                    name: "solubilityTableNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of solubility tables for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CO2BrinePhillipsFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "flashModelParaFile",
                    type_name: "path",
                    doc: Some(
                        "Name of the file defining the parameters of the flash model",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "phasePVTParaFiles",
                    type_name: "path_array",
                    doc: Some(
                        "Names of the files defining the parameters of the viscosity and density models",
                    ),
                    required: true,
                },
                Field {
                    name: "solubilityTableNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of solubility tables for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CO2BrinePhillipsThermalFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "flashModelParaFile",
                    type_name: "path",
                    doc: Some(
                        "Name of the file defining the parameters of the flash model",
                    ),
                    required: false,
                },
                Field {
                    name: "logLevel",
                    type_name: "integer",
                    doc: Some(
                        "Log level",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "phasePVTParaFiles",
                    type_name: "path_array",
                    doc: Some(
                        "Names of the files defining the parameters of the viscosity and density models",
                    ),
                    required: true,
                },
                Field {
                    name: "solubilityTableNames",
                    type_name: "string_array",
                    doc: Some(
                        "Names of solubility tables for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CarmanKozenyPermeability",
            doc: None,
            fields: [
                Field {
                    name: "anisotropy",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Anisotropy factors for three permeability components.",
                    ),
                    required: false,
                },
                Field {
                    name: "particleDiameter",
                    type_name: "real64",
                    doc: Some(
                        "Diameter of the spherical particles.",
                    ),
                    required: true,
                },
                Field {
                    name: "sphericity",
                    type_name: "real64",
                    doc: Some(
                        "Sphericity of the particles.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CeramicDamage",
            doc: None,
            fields: [
                Field {
                    name: "compressiveStrength",
                    type_name: "real64",
                    doc: Some(
                        "Compressive strength",
                    ),
                    required: true,
                },
                Field {
                    name: "crackSpeed",
                    type_name: "real64",
                    doc: Some(
                        "Crack speed",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "maximumStrength",
                    type_name: "real64",
                    doc: Some(
                        "Maximum theoretical strength",
                    ),
                    required: true,
                },
                Field {
                    name: "tensileStrength",
                    type_name: "real64",
                    doc: Some(
                        "Tensile strength",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompositionalMultiphaseFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentAcentricFactor",
                    type_name: "real64_array",
                    doc: Some(
                        "Component acentric factors",
                    ),
                    required: true,
                },
                Field {
                    name: "componentBinaryCoeff",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Table of binary interaction coefficients",
                    ),
                    required: false,
                },
                Field {
                    name: "componentCriticalPressure",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical pressures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalTemperature",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical temperatures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: true,
                },
                Field {
                    name: "componentVolumeShift",
                    type_name: "real64_array",
                    doc: Some(
                        "Component volume shifts",
                    ),
                    required: false,
                },
                Field {
                    name: "constantPhaseViscosity",
                    type_name: "real64_array",
                    doc: Some(
                        "Viscosity for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "equationsOfState",
                    type_name: "string_array",
                    doc: Some(
                        "List of equation of state types for each phase",
                    ),
                    required: true,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompositionalTwoPhaseFluidPengRobinson",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentAcentricFactor",
                    type_name: "real64_array",
                    doc: Some(
                        "Component acentric factors",
                    ),
                    required: true,
                },
                Field {
                    name: "componentBinaryCoeff",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Table of binary interaction coefficients",
                    ),
                    required: false,
                },
                Field {
                    name: "componentCriticalPressure",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical pressures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalTemperature",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical temperatures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalVolume",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical volumnes",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: true,
                },
                Field {
                    name: "componentVolumeShift",
                    type_name: "real64_array",
                    doc: Some(
                        "Component volume shifts",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompositionalTwoPhaseFluidPengRobinsonLBC",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentAcentricFactor",
                    type_name: "real64_array",
                    doc: Some(
                        "Component acentric factors",
                    ),
                    required: true,
                },
                Field {
                    name: "componentBinaryCoeff",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Table of binary interaction coefficients",
                    ),
                    required: false,
                },
                Field {
                    name: "componentCriticalPressure",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical pressures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalTemperature",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical temperatures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalVolume",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical volumnes",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: true,
                },
                Field {
                    name: "componentVolumeShift",
                    type_name: "real64_array",
                    doc: Some(
                        "Component volume shifts",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompositionalTwoPhaseFluidSoaveRedlichKwong",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentAcentricFactor",
                    type_name: "real64_array",
                    doc: Some(
                        "Component acentric factors",
                    ),
                    required: true,
                },
                Field {
                    name: "componentBinaryCoeff",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Table of binary interaction coefficients",
                    ),
                    required: false,
                },
                Field {
                    name: "componentCriticalPressure",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical pressures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalTemperature",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical temperatures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalVolume",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical volumnes",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: true,
                },
                Field {
                    name: "componentVolumeShift",
                    type_name: "real64_array",
                    doc: Some(
                        "Component volume shifts",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompositionalTwoPhaseFluidSoaveRedlichKwongLBC",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentAcentricFactor",
                    type_name: "real64_array",
                    doc: Some(
                        "Component acentric factors",
                    ),
                    required: true,
                },
                Field {
                    name: "componentBinaryCoeff",
                    type_name: "real64_array2d",
                    doc: Some(
                        "Table of binary interaction coefficients",
                    ),
                    required: false,
                },
                Field {
                    name: "componentCriticalPressure",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical pressures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalTemperature",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical temperatures",
                    ),
                    required: true,
                },
                Field {
                    name: "componentCriticalVolume",
                    type_name: "real64_array",
                    doc: Some(
                        "Component critical volumnes",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: true,
                },
                Field {
                    name: "componentVolumeShift",
                    type_name: "real64_array",
                    doc: Some(
                        "Component volume shifts",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSinglePhaseFluid",
            doc: None,
            fields: [
                Field {
                    name: "compressibility",
                    type_name: "real64",
                    doc: Some(
                        "Fluid compressibility",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default value for density.",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Default value for viscosity.",
                    ),
                    required: true,
                },
                Field {
                    name: "densityModelType",
                    type_name: "geos_constitutive_ExponentApproximationType",
                    doc: Some(
                        "Type of density model. Valid options:\n* exponential\n* linear\n* quadratic",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceDensity",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid density",
                    ),
                    required: false,
                },
                Field {
                    name: "referencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid viscosity",
                    ),
                    required: false,
                },
                Field {
                    name: "viscosibility",
                    type_name: "real64",
                    doc: Some(
                        "Fluid viscosity exponential coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "viscosityModelType",
                    type_name: "geos_constitutive_ExponentApproximationType",
                    doc: Some(
                        "Type of viscosity model. Valid options:\n* exponential\n* linear\n* quadratic",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidCarmanKozenyPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidConstantPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidExponentialDecayPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidParallelPlatesPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidPressurePermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidSlipDependentPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "CompressibleSolidWillisRichardsPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ConstantDiffusion",
            doc: None,
            fields: [
                Field {
                    name: "defaultPhaseDiffusivityMultipliers",
                    type_name: "real64_array",
                    doc: Some(
                        "List of phase diffusivity multipliers",
                    ),
                    required: false,
                },
                Field {
                    name: "diffusivityComponents",
                    type_name: "real64_array",
                    doc: Some(
                        "xx, yy, and zz components of a diffusivity tensor [m^2/s]",
                    ),
                    required: true,
                },
                Field {
                    name: "phaseNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ConstantPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityComponents",
                    type_name: "R1Tensor",
                    doc: Some(
                        "xx, yy and zz components of a diagonal permeability tensor.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Coulomb",
            doc: None,
            fields: [
                Field {
                    name: "apertureTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the aperture table",
                    ),
                    required: true,
                },
                Field {
                    name: "apertureTolerance",
                    type_name: "real64",
                    doc: Some(
                        "Value to be used to avoid floating point errors in expressions involving aperture. For example in the case of dividing by the actual aperture (not the effective aperture that results from the aperture function) this value may be used to avoid the 1/0 error. Note that this value may have some physical significance in its usage, as it may be used to smooth out highly nonlinear behavior associated with 1/0 in addition to avoiding the 1/0 error.",
                    ),
                    required: false,
                },
                Field {
                    name: "cohesion",
                    type_name: "real64",
                    doc: Some(
                        "Cohesion",
                    ),
                    required: true,
                },
                Field {
                    name: "displacementJumpThreshold",
                    type_name: "real64",
                    doc: Some(
                        "A threshold valued to determine whether a fracture is open or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "frictionCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Friction coefficient",
                    ),
                    required: true,
                },
                Field {
                    name: "penaltyStiffness",
                    type_name: "real64",
                    doc: Some(
                        "Value of the penetration penalty stiffness. Units of Pressure/length",
                    ),
                    required: false,
                },
                Field {
                    name: "shearStiffness",
                    type_name: "real64",
                    doc: Some(
                        "Value of the shear elastic stiffness. Units of Pressure/length",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "DamageElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "compressiveStrength",
                    type_name: "real64",
                    doc: Some(
                        "Compressive strength from the uniaxial compression test",
                    ),
                    required: false,
                },
                Field {
                    name: "criticalFractureEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Critical fracture energy",
                    ),
                    required: true,
                },
                Field {
                    name: "criticalStrainEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Critical stress in a 1d tension test",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "degradationLowerLimit",
                    type_name: "real64",
                    doc: Some(
                        "The lower limit of the degradation function",
                    ),
                    required: false,
                },
                Field {
                    name: "deltaCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Coefficient in the calculation of the external driving force",
                    ),
                    required: false,
                },
                Field {
                    name: "extDrivingForceFlag",
                    type_name: "integer",
                    doc: Some(
                        "Whether to have external driving force. Can be 0 or 1",
                    ),
                    required: false,
                },
                Field {
                    name: "lengthScale",
                    type_name: "real64",
                    doc: Some(
                        "Length scale l in the phase-field equation",
                    ),
                    required: true,
                },
                Field {
                    name: "tensileStrength",
                    type_name: "real64",
                    doc: Some(
                        "Tensile strength from the uniaxial tension test",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "DamageSpectralElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "compressiveStrength",
                    type_name: "real64",
                    doc: Some(
                        "Compressive strength from the uniaxial compression test",
                    ),
                    required: false,
                },
                Field {
                    name: "criticalFractureEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Critical fracture energy",
                    ),
                    required: true,
                },
                Field {
                    name: "criticalStrainEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Critical stress in a 1d tension test",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "degradationLowerLimit",
                    type_name: "real64",
                    doc: Some(
                        "The lower limit of the degradation function",
                    ),
                    required: false,
                },
                Field {
                    name: "deltaCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Coefficient in the calculation of the external driving force",
                    ),
                    required: false,
                },
                Field {
                    name: "extDrivingForceFlag",
                    type_name: "integer",
                    doc: Some(
                        "Whether to have external driving force. Can be 0 or 1",
                    ),
                    required: false,
                },
                Field {
                    name: "lengthScale",
                    type_name: "real64",
                    doc: Some(
                        "Length scale l in the phase-field equation",
                    ),
                    required: true,
                },
                Field {
                    name: "tensileStrength",
                    type_name: "real64",
                    doc: Some(
                        "Tensile strength from the uniaxial tension test",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "DamageVolDevElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "compressiveStrength",
                    type_name: "real64",
                    doc: Some(
                        "Compressive strength from the uniaxial compression test",
                    ),
                    required: false,
                },
                Field {
                    name: "criticalFractureEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Critical fracture energy",
                    ),
                    required: true,
                },
                Field {
                    name: "criticalStrainEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Critical stress in a 1d tension test",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "degradationLowerLimit",
                    type_name: "real64",
                    doc: Some(
                        "The lower limit of the degradation function",
                    ),
                    required: false,
                },
                Field {
                    name: "deltaCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Coefficient in the calculation of the external driving force",
                    ),
                    required: false,
                },
                Field {
                    name: "extDrivingForceFlag",
                    type_name: "integer",
                    doc: Some(
                        "Whether to have external driving force. Can be 0 or 1",
                    ),
                    required: false,
                },
                Field {
                    name: "lengthScale",
                    type_name: "real64",
                    doc: Some(
                        "Length scale l in the phase-field equation",
                    ),
                    required: true,
                },
                Field {
                    name: "tensileStrength",
                    type_name: "real64",
                    doc: Some(
                        "Tensile strength from the uniaxial tension test",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "DeadOilFluid",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: true,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "hydrocarbonFormationVolFactorTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of formation volume factor TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                    ),
                    required: false,
                },
                Field {
                    name: "hydrocarbonViscosityTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of viscosity TableFunction names from the Functions block. \nThe user must provide one TableFunction per hydrocarbon phase, in the order provided in \"phaseNames\". \nFor instance, if \"oil\" is before \"gas\" in \"phaseNames\", the table order should be: oilTableName, gasTableName",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "surfaceDensities",
                    type_name: "real64_array",
                    doc: Some(
                        "List of surface mass densities for each phase",
                    ),
                    required: true,
                },
                Field {
                    name: "tableFiles",
                    type_name: "path_array",
                    doc: Some(
                        "List of filenames with input PVT tables (one per phase)",
                    ),
                    required: false,
                },
                Field {
                    name: "waterCompressibility",
                    type_name: "real64",
                    doc: Some(
                        "Water compressibility",
                    ),
                    required: false,
                },
                Field {
                    name: "waterFormationVolumeFactor",
                    type_name: "real64",
                    doc: Some(
                        "Water formation volume factor",
                    ),
                    required: false,
                },
                Field {
                    name: "waterReferencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Water reference pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "waterViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Water viscosity",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "DelftEgg",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultCslSlope",
                    type_name: "real64",
                    doc: Some(
                        "Slope of the critical state line",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPreConsolidationPressure",
                    type_name: "real64",
                    doc: Some(
                        "Initial preconsolidation pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRecompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Recompresion Index",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShapeParameter",
                    type_name: "real64",
                    doc: Some(
                        "Shape parameter for the yield surface",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultVirginCompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Virgin compression index",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "DruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultCohesion",
                    type_name: "real64",
                    doc: Some(
                        "Initial cohesion",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDilationAngle",
                    type_name: "real64",
                    doc: Some(
                        "Dilation angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultFrictionAngle",
                    type_name: "real64",
                    doc: Some(
                        "Friction angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultHardeningRate",
                    type_name: "real64",
                    doc: Some(
                        "Cohesion hardening/softening rate",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ElasticIsotropicPressureDependent",
            doc: None,
            fields: [
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRecompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Recompresion Index",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRefPressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference Pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRefStrainVol",
                    type_name: "real64",
                    doc: Some(
                        "Reference Volumetric Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Elastic Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ElasticOrthotropic",
            doc: None,
            fields: [
                Field {
                    name: "defaultC11",
                    type_name: "real64",
                    doc: Some(
                        "Default C11 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC12",
                    type_name: "real64",
                    doc: Some(
                        "Default C12 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC13",
                    type_name: "real64",
                    doc: Some(
                        "Default C13 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC22",
                    type_name: "real64",
                    doc: Some(
                        "Default C22 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC23",
                    type_name: "real64",
                    doc: Some(
                        "Default C23 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC33",
                    type_name: "real64",
                    doc: Some(
                        "Default C33 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC44",
                    type_name: "real64",
                    doc: Some(
                        "Default C44 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC55",
                    type_name: "real64",
                    doc: Some(
                        "Default C55 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC66",
                    type_name: "real64",
                    doc: Some(
                        "Default C66 Component of Voigt Stiffness Tensor",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultE1",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus E1",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultE2",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus E2",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultE3",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus E3",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultG12",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus G12",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultG13",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus G13",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultG23",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus G23",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultNu12",
                    type_name: "real64",
                    doc: Some(
                        "Default Poission's Ratio Nu12",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultNu13",
                    type_name: "real64",
                    doc: Some(
                        "Default Poission's Ratio Nu13",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultNu23",
                    type_name: "real64",
                    doc: Some(
                        "Default Poission's Ratio Nu23",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ElasticTransverseIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "defaultC11",
                    type_name: "real64",
                    doc: Some(
                        "Default Stiffness Parameter C11",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC13",
                    type_name: "real64",
                    doc: Some(
                        "Default Stiffness Parameter C13",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC33",
                    type_name: "real64",
                    doc: Some(
                        "Default Stiffness Parameter C33",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC44",
                    type_name: "real64",
                    doc: Some(
                        "Default Stiffness Parameter C44",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultC66",
                    type_name: "real64",
                    doc: Some(
                        "Default Stiffness Parameter C66",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatioAxialTransverse",
                    type_name: "real64",
                    doc: Some(
                        "Default Axial-Transverse Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatioTransverse",
                    type_name: "real64",
                    doc: Some(
                        "Default Transverse Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulusAxialTransverse",
                    type_name: "real64",
                    doc: Some(
                        "Default Axial-Transverse Shear Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulusAxial",
                    type_name: "real64",
                    doc: Some(
                        "Default Axial Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulusTransverse",
                    type_name: "real64",
                    doc: Some(
                        "Default Transverse Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ExponentialDecayPermeability",
            doc: None,
            fields: [
                Field {
                    name: "empiricalConstant",
                    type_name: "real64",
                    doc: Some(
                        "an empirical constant.",
                    ),
                    required: true,
                },
                Field {
                    name: "initialPermeability",
                    type_name: "R1Tensor",
                    doc: Some(
                        " initial permeability of the fracture.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ExtendedDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultCohesion",
                    type_name: "real64",
                    doc: Some(
                        "Initial cohesion",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDilationRatio",
                    type_name: "real64",
                    doc: Some(
                        "Dilation ratio [0,1] (ratio = tan dilationAngle / tan frictionAngle)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultHardening",
                    type_name: "real64",
                    doc: Some(
                        "Hardening parameter (hardening rate is faster for smaller values)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultInitialFrictionAngle",
                    type_name: "real64",
                    doc: Some(
                        "Initial friction angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultResidualFrictionAngle",
                    type_name: "real64",
                    doc: Some(
                        "Residual friction angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "FrictionlessContact",
            doc: None,
            fields: [
                Field {
                    name: "apertureTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the aperture table",
                    ),
                    required: true,
                },
                Field {
                    name: "apertureTolerance",
                    type_name: "real64",
                    doc: Some(
                        "Value to be used to avoid floating point errors in expressions involving aperture. For example in the case of dividing by the actual aperture (not the effective aperture that results from the aperture function) this value may be used to avoid the 1/0 error. Note that this value may have some physical significance in its usage, as it may be used to smooth out highly nonlinear behavior associated with 1/0 in addition to avoiding the 1/0 error.",
                    ),
                    required: false,
                },
                Field {
                    name: "displacementJumpThreshold",
                    type_name: "real64",
                    doc: Some(
                        "A threshold valued to determine whether a fracture is open or not.",
                    ),
                    required: false,
                },
                Field {
                    name: "penaltyStiffness",
                    type_name: "real64",
                    doc: Some(
                        "Value of the penetration penalty stiffness. Units of Pressure/length",
                    ),
                    required: false,
                },
                Field {
                    name: "shearStiffness",
                    type_name: "real64",
                    doc: Some(
                        "Value of the shear elastic stiffness. Units of Pressure/length",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "JFunctionCapillaryPressure",
            doc: None,
            fields: [
                Field {
                    name: "nonWettingIntermediateJFunctionTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "J-function table (dimensionless) for the pair (non-wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingJFunctionTableName to specify the table names.",
                    ),
                    required: false,
                },
                Field {
                    name: "nonWettingIntermediateSurfaceTension",
                    type_name: "real64",
                    doc: Some(
                        "Surface tension [N/m] for the pair (non-wetting phase, intermediate phase)\nIf you have a value in [dyne/cm], divide it by 1000 to obtain the value in [N/m]\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingSurfaceTension to specify the surface tensions.",
                    ),
                    required: false,
                },
                Field {
                    name: "permeabilityDirection",
                    type_name: "geos_constitutive_JFunctionCapillaryPressure_PermeabilityDirection",
                    doc: Some(
                        "Permeability direction. Options are:\nXY - use the average of the permeabilities in the x and y directions,\nX - only use the permeability in the x direction,\nY - only use the permeability in the y direction,\nZ - only use the permeability in the z direction.",
                    ),
                    required: true,
                },
                Field {
                    name: "permeabilityExponent",
                    type_name: "real64",
                    doc: Some(
                        "Permeability exponent",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityExponent",
                    type_name: "real64",
                    doc: Some(
                        "Porosity exponent",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingIntermediateJFunctionTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "J-function table (dimensionless) for the pair (wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingJFunctionTableName to specify the table names.",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingIntermediateSurfaceTension",
                    type_name: "real64",
                    doc: Some(
                        "Surface tension [N/m] for the pair (wetting phase, intermediate phase)\nIf you have a value in [dyne/cm], divide it by 1000 to obtain the value in [N/m]\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingSurfaceTension to specify the surface tensions.",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingNonWettingJFunctionTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "J-function table (dimensionless) for the pair (wetting phase, non-wetting phase)\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateJFunctionTableName and nonWettingIntermediateJFunctionTableName to specify the table names.",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingNonWettingSurfaceTension",
                    type_name: "real64",
                    doc: Some(
                        "Surface tension [N/m] for the pair (wetting phase, non-wetting phase)\nIf you have a value in [dyne/cm], divide it by 1000 to obtain the value in [N/m]\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateSurfaceTension and nonWettingIntermediateSurfaceTension to specify the surface tensions.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "LinearIsotropicDispersion",
            doc: None,
            fields: [
                Field {
                    name: "longitudinalDispersivity",
                    type_name: "real64",
                    doc: Some(
                        "Longitudinal dispersivity [m]",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ModifiedCamClay",
            doc: None,
            fields: [
                Field {
                    name: "defaultCslSlope",
                    type_name: "real64",
                    doc: Some(
                        "Slope of the critical state line",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPreConsolidationPressure",
                    type_name: "real64",
                    doc: Some(
                        "Initial preconsolidation pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRecompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Recompresion Index",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRefPressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference Pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRefStrainVol",
                    type_name: "real64",
                    doc: Some(
                        "Reference Volumetric Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Elastic Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultVirginCompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Virgin compression index",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "MultiPhaseConstantThermalConductivity",
            doc: None,
            fields: [
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "thermalConductivityComponents",
                    type_name: "R1Tensor",
                    doc: Some(
                        "xx, yy, and zz components of a diagonal thermal conductivity tensor [J/(s.m.K)]",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "MultiPhaseVolumeWeightedThermalConductivity",
            doc: None,
            fields: [
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "phaseThermalConductivity",
                    type_name: "real64_array",
                    doc: Some(
                        "Phase thermal conductivity [W/(m.K)]",
                    ),
                    required: true,
                },
                Field {
                    name: "rockThermalConductivityComponents",
                    type_name: "R1Tensor",
                    doc: Some(
                        "xx, yy, and zz components of a diagonal rock thermal conductivity tensor [W/(m.K)]",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "NullModel",
            doc: None,
            fields: [
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ParallelPlatesPermeability",
            doc: None,
            fields: [
                Field {
                    name: "transversalPermeability",
                    type_name: "real64",
                    doc: Some(
                        "Default value of the permeability normal to the surface. If not specified the permeability is updated using the cubic law. ",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ParticleFluid",
            doc: None,
            fields: [
                Field {
                    name: "collisionAlpha",
                    type_name: "real64",
                    doc: Some(
                        "Collision alpha coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "collisionBeta",
                    type_name: "real64",
                    doc: Some(
                        "Collision beta coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "fluidViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Fluid viscosity",
                    ),
                    required: false,
                },
                Field {
                    name: "hinderedSettlingCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Hindered settling coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "isCollisionalSlip",
                    type_name: "integer",
                    doc: Some(
                        "Whether the collisional component of the slip velocity is considered",
                    ),
                    required: false,
                },
                Field {
                    name: "maxProppantConcentration",
                    type_name: "real64",
                    doc: Some(
                        "Max proppant concentration",
                    ),
                    required: false,
                },
                Field {
                    name: "particleSettlingModel",
                    type_name: "geos_constitutive_ParticleSettlingModel",
                    doc: Some(
                        "Particle settling velocity model. Valid options:\n* Stokes\n* Intermediate\n* Turbulence",
                    ),
                    required: true,
                },
                Field {
                    name: "proppantDensity",
                    type_name: "real64",
                    doc: Some(
                        "Proppant density",
                    ),
                    required: false,
                },
                Field {
                    name: "proppantDiameter",
                    type_name: "real64",
                    doc: Some(
                        "Proppant diameter",
                    ),
                    required: false,
                },
                Field {
                    name: "slipConcentration",
                    type_name: "real64",
                    doc: Some(
                        "Slip concentration",
                    ),
                    required: false,
                },
                Field {
                    name: "sphericity",
                    type_name: "real64",
                    doc: Some(
                        "Sphericity",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PerfectlyPlastic",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYieldStress",
                    type_name: "real64",
                    doc: Some(
                        "Default yield stress",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousDamageElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousDamageSpectralElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousDamageVolDevElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousDelftEgg",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousElasticIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousElasticOrthotropic",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousElasticTransverseIsotropic",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousExtendedDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousModifiedCamClay",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousViscoDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousViscoExtendedDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PorousViscoModifiedCamClay",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PressurePermeability",
            doc: None,
            fields: [
                Field {
                    name: "maxPermeability",
                    type_name: "real64",
                    doc: Some(
                        "Max. permeability can be reached.",
                    ),
                    required: false,
                },
                Field {
                    name: "pressureDependenceConstants",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Pressure dependence coefficients for each permeability component.",
                    ),
                    required: true,
                },
                Field {
                    name: "pressureModelType",
                    type_name: "geos_constitutive_PressureModelType",
                    doc: Some(
                        "Type of the pressure dependence model. ",
                    ),
                    required: false,
                },
                Field {
                    name: "referencePermeabilityComponents",
                    type_name: "R1Tensor",
                    doc: Some(
                        "Reference xx, yy and zz components of a diagonal permeability tensor.",
                    ),
                    required: true,
                },
                Field {
                    name: "referencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference pressure for the pressure permeability model",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "PressurePorosity",
            doc: None,
            fields: [
                Field {
                    name: "compressibility",
                    type_name: "real64",
                    doc: Some(
                        "Solid compressibility",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultReferencePorosity",
                    type_name: "real64",
                    doc: Some(
                        "Default value of the reference porosity",
                    ),
                    required: true,
                },
                Field {
                    name: "referencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference pressure for solid compressibility",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ProppantPermeability",
            doc: None,
            fields: [
                Field {
                    name: "maxProppantConcentration",
                    type_name: "real64",
                    doc: Some(
                        "Maximum proppant concentration.",
                    ),
                    required: true,
                },
                Field {
                    name: "proppantDiameter",
                    type_name: "real64",
                    doc: Some(
                        "Proppant diameter.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ProppantPorosity",
            doc: None,
            fields: [
                Field {
                    name: "defaultReferencePorosity",
                    type_name: "real64",
                    doc: Some(
                        "Default value of the reference porosity",
                    ),
                    required: true,
                },
                Field {
                    name: "maxProppantConcentration",
                    type_name: "real64",
                    doc: Some(
                        "Maximum proppant concentration ",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ProppantSlurryFluid",
            doc: None,
            fields: [
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of fluid component names",
                    ),
                    required: false,
                },
                Field {
                    name: "compressibility",
                    type_name: "real64",
                    doc: Some(
                        "Fluid compressibility",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultComponentDensity",
                    type_name: "real64_array",
                    doc: Some(
                        "Default value for the component density.",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultComponentViscosity",
                    type_name: "real64_array",
                    doc: Some(
                        "Default value for the component viscosity.",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultCompressibility",
                    type_name: "real64_array",
                    doc: Some(
                        "Default value for the component compressibility.",
                    ),
                    required: false,
                },
                Field {
                    name: "flowBehaviorIndex",
                    type_name: "real64_array",
                    doc: Some(
                        "Flow behavior index",
                    ),
                    required: false,
                },
                Field {
                    name: "flowConsistencyIndex",
                    type_name: "real64_array",
                    doc: Some(
                        "Flow consistency index",
                    ),
                    required: false,
                },
                Field {
                    name: "maxProppantConcentration",
                    type_name: "real64",
                    doc: Some(
                        "Maximum proppant concentration",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceDensity",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid density",
                    ),
                    required: false,
                },
                Field {
                    name: "referencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceProppantDensity",
                    type_name: "real64",
                    doc: Some(
                        "Reference proppant density",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid viscosity",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ProppantSolidProppantPermeability",
            doc: None,
            fields: [
                Field {
                    name: "permeabilityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the permeability model.",
                    ),
                    required: true,
                },
                Field {
                    name: "porosityModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the porosity model.",
                    ),
                    required: true,
                },
                Field {
                    name: "solidInternalEnergyModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid internal energy model.",
                    ),
                    required: false,
                },
                Field {
                    name: "solidModelName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Name of the solid model.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ReactiveBrine",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "phasePVTParaFiles",
                    type_name: "path_array",
                    doc: Some(
                        "Names of the files defining the parameters of the viscosity and density models",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ReactiveBrineThermal",
            doc: None,
            fields: [
                Field {
                    name: "checkPVTTablesRanges",
                    type_name: "integer",
                    doc: Some(
                        "Enable (1) or disable (0) an error when the input pressure or temperature of the PVT tables is out of range.",
                    ),
                    required: false,
                },
                Field {
                    name: "componentMolarWeight",
                    type_name: "real64_array",
                    doc: Some(
                        "Component molar weights",
                    ),
                    required: false,
                },
                Field {
                    name: "componentNames",
                    type_name: "string_array",
                    doc: Some(
                        "List of component names",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: false,
                },
                Field {
                    name: "phasePVTParaFiles",
                    type_name: "path_array",
                    doc: Some(
                        "Names of the files defining the parameters of the viscosity and density models",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SinglePhaseConstantThermalConductivity",
            doc: None,
            fields: [
                Field {
                    name: "thermalConductivityComponents",
                    type_name: "R1Tensor",
                    doc: Some(
                        "xx, yy, and zz components of a diagonal thermal conductivity tensor [J/(s.m.K)]",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SlipDependentPermeability",
            doc: None,
            fields: [
                Field {
                    name: "initialPermeability",
                    type_name: "R1Tensor",
                    doc: Some(
                        " initial permeability of the fracture.",
                    ),
                    required: true,
                },
                Field {
                    name: "maxPermMultiplier",
                    type_name: "real64",
                    doc: Some(
                        "Maximum permeability multiplier.",
                    ),
                    required: true,
                },
                Field {
                    name: "shearDispThreshold",
                    type_name: "real64",
                    doc: Some(
                        "Threshold of shear displacement.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SolidInternalEnergy",
            doc: None,
            fields: [
                Field {
                    name: "referenceInternalEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Internal energy at the reference temperature [J/kg]",
                    ),
                    required: true,
                },
                Field {
                    name: "referenceTemperature",
                    type_name: "real64",
                    doc: Some(
                        "Reference temperature [K]",
                    ),
                    required: true,
                },
                Field {
                    name: "volumetricHeatCapacity",
                    type_name: "real64",
                    doc: Some(
                        "Solid volumetric heat capacity [J/(kg.K)]",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TableCapillaryPressure",
            doc: None,
            fields: [
                Field {
                    name: "nonWettingIntermediateCapPressureTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Capillary pressure table [Pa] for the pair (non-wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingCapPressureTableName to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "wettingIntermediateCapPressureTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Capillary pressure table [Pa] for the pair (wetting phase, intermediate phase)\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingCapPressureTableName to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingNonWettingCapPressureTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Capillary pressure table [Pa] for the pair (wetting phase, non-wetting phase)\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateCapPressureTableName and nonWettingIntermediateCapPressureTableName to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TableRelativePermeability",
            doc: None,
            fields: [
                Field {
                    name: "nonWettingIntermediateRelPermTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of relative permeability tables for the pair (non-wetting phase, intermediate phase)\nThe expected format is \"{ nonWettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingRelPermTableNames to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "threePhaseInterpolator",
                    type_name: "geos_constitutive_ThreePhaseInterpolator",
                    doc: Some(
                        "Type of Three phase interpolator.Valid options \n* BAKER\n* STONEII",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingIntermediateRelPermTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of relative permeability tables for the pair (wetting phase, intermediate phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead wettingNonWettingRelPermTableNames to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "wettingNonWettingRelPermTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of relative permeability tables for the pair (wetting phase, non-wetting phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, nonWettingPhaseRelPermTableName }\", in that order\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead wettingIntermediateRelPermTableNames and nonWettingIntermediateRelPermTableNames to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "TableRelativePermeabilityHysteresis",
            doc: None,
            fields: [
                Field {
                    name: "drainageNonWettingIntermediateRelPermTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of drainage relative permeability tables for the pair (non-wetting phase, intermediate phase)\nThe expected format is \"{ nonWettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead drainageWettingNonWettingRelPermTableNames to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "drainageWettingIntermediateRelPermTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of drainage relative permeability tables for the pair (wetting phase, intermediate phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, intermediatePhaseRelPermTableName }\", in that order\nNote that this input is only used for three-phase flow.\nIf you want to do a two-phase simulation, please use instead drainageWettingNonWettingRelPermTableNames to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "drainageWettingNonWettingRelPermTableNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of drainage relative permeability tables for the pair (wetting phase, non-wetting phase)\nThe expected format is \"{ wettingPhaseRelPermTableName, nonWettingPhaseRelPermTableName }\", in that order\nNote that this input is only used for two-phase flow.\nIf you want to do a three-phase simulation, please use instead drainageWettingIntermediateRelPermTableNames and drainageNonWettingIntermediateRelPermTableNames to specify the table names",
                    ),
                    required: false,
                },
                Field {
                    name: "imbibitionNonWettingRelPermTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Imbibition relative permeability table name for the non-wetting phase.\nTo neglect hysteresis on this phase, just use the same table name for the drainage and imbibition curves",
                    ),
                    required: false,
                },
                Field {
                    name: "imbibitionWettingRelPermTableName",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Imbibition relative permeability table name for the wetting phase.\nTo neglect hysteresis on this phase, just use the same table name for the drainage and imbibition curves",
                    ),
                    required: false,
                },
                Field {
                    name: "jerauldParameterA",
                    type_name: "real64",
                    doc: Some(
                        "First parameter (modification parameter) introduced by Jerauld in the Land trapping model (see RTD documentation).",
                    ),
                    required: false,
                },
                Field {
                    name: "jerauldParameterB",
                    type_name: "real64",
                    doc: Some(
                        "Second parameter introduced by Jerauld in the Land trapping model (see RTD documentation).",
                    ),
                    required: false,
                },
                Field {
                    name: "killoughCurvatureParameter",
                    type_name: "real64",
                    doc: Some(
                        "Curvature parameter introduced by Killough for wetting-phase hysteresis (see RTD documentation).",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "threePhaseInterpolator",
                    type_name: "geos_constitutive_ThreePhaseInterpolator",
                    doc: Some(
                        "Type of Three phase interpolator.Valid options \n* BAKER\n* STONEII",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ThermalCompressibleSinglePhaseFluid",
            doc: None,
            fields: [
                Field {
                    name: "compressibility",
                    type_name: "real64",
                    doc: Some(
                        "Fluid compressibility",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default value for density.",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Default value for viscosity.",
                    ),
                    required: true,
                },
                Field {
                    name: "densityModelType",
                    type_name: "geos_constitutive_ExponentApproximationType",
                    doc: Some(
                        "Type of density model. Valid options:\n* exponential\n* linear\n* quadratic",
                    ),
                    required: false,
                },
                Field {
                    name: "internalEnergyModelType",
                    type_name: "geos_constitutive_ExponentApproximationType",
                    doc: Some(
                        "Type of internal energy model. Valid options:\n* exponential\n* linear\n* quadratic",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceDensity",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid density",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceInternalEnergy",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid internal energy",
                    ),
                    required: false,
                },
                Field {
                    name: "referencePressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceTemperature",
                    type_name: "real64",
                    doc: Some(
                        "Reference temperature",
                    ),
                    required: false,
                },
                Field {
                    name: "referenceViscosity",
                    type_name: "real64",
                    doc: Some(
                        "Reference fluid viscosity",
                    ),
                    required: false,
                },
                Field {
                    name: "specificHeatCapacity",
                    type_name: "real64",
                    doc: Some(
                        "Fluid heat capacity. Unit: J/kg/K",
                    ),
                    required: false,
                },
                Field {
                    name: "thermalExpansionCoeff",
                    type_name: "real64",
                    doc: Some(
                        "Fluid thermal expansion coefficient. Unit: 1/K",
                    ),
                    required: false,
                },
                Field {
                    name: "viscosibility",
                    type_name: "real64",
                    doc: Some(
                        "Fluid viscosity exponential coefficient",
                    ),
                    required: false,
                },
                Field {
                    name: "viscosityModelType",
                    type_name: "geos_constitutive_ExponentApproximationType",
                    doc: Some(
                        "Type of viscosity model. Valid options:\n* exponential\n* linear\n* quadratic",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "VanGenuchtenBakerRelativePermeability",
            doc: None,
            fields: [
                Field {
                    name: "gasOilRelPermExponentInv",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent inverse for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "gasOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "waterOilRelPermExponentInv",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent inverse for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "waterOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "VanGenuchtenCapillaryPressure",
            doc: None,
            fields: [
                Field {
                    name: "capPressureEpsilon",
                    type_name: "real64",
                    doc: Some(
                        "Saturation at which the extremum capillary pressure is attained; used to avoid infinite capillary pressure values for saturations close to 0 and 1",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseCapPressureExponentInv",
                    type_name: "real64_array",
                    doc: Some(
                        "Inverse of capillary power law exponent for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseCapPressureMultiplier",
                    type_name: "real64_array",
                    doc: Some(
                        "Entry pressure value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "VanGenuchtenStone2RelativePermeability",
            doc: None,
            fields: [
                Field {
                    name: "gasOilRelPermExponentInv",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent inverse for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "gasOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (gas phase, oil phase) at residual water saturation\nThe expected format is \"{ gasMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseMinVolumeFraction",
                    type_name: "real64_array",
                    doc: Some(
                        "Minimum volume fraction value for each phase",
                    ),
                    required: false,
                },
                Field {
                    name: "phaseNames",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of fluid phases",
                    ),
                    required: true,
                },
                Field {
                    name: "waterOilRelPermExponentInv",
                    type_name: "real64_array",
                    doc: Some(
                        "Rel perm power law exponent inverse for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterExp, oilExp }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "waterOilRelPermMaxValue",
                    type_name: "real64_array",
                    doc: Some(
                        "Maximum rel perm value for the pair (water phase, oil phase) at residual gas saturation\nThe expected format is \"{ waterMax, oilMax }\", in that order",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ViscoDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultCohesion",
                    type_name: "real64",
                    doc: Some(
                        "Initial cohesion",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDilationAngle",
                    type_name: "real64",
                    doc: Some(
                        "Dilation angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultFrictionAngle",
                    type_name: "real64",
                    doc: Some(
                        "Friction angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultHardeningRate",
                    type_name: "real64",
                    doc: Some(
                        "Cohesion hardening/softening rate",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "relaxationTime",
                    type_name: "real64",
                    doc: Some(
                        "Relaxation time",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ViscoExtendedDruckerPrager",
            doc: None,
            fields: [
                Field {
                    name: "defaultBulkModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Bulk Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultCohesion",
                    type_name: "real64",
                    doc: Some(
                        "Initial cohesion",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDilationRatio",
                    type_name: "real64",
                    doc: Some(
                        "Dilation ratio [0,1] (ratio = tan dilationAngle / tan frictionAngle)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultHardening",
                    type_name: "real64",
                    doc: Some(
                        "Hardening parameter (hardening rate is faster for smaller values)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultInitialFrictionAngle",
                    type_name: "real64",
                    doc: Some(
                        "Initial friction angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPoissonRatio",
                    type_name: "real64",
                    doc: Some(
                        "Default Poisson's Ratio",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultResidualFrictionAngle",
                    type_name: "real64",
                    doc: Some(
                        "Residual friction angle (degrees)",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultYoungModulus",
                    type_name: "real64",
                    doc: Some(
                        "Default Young's Modulus",
                    ),
                    required: false,
                },
                Field {
                    name: "relaxationTime",
                    type_name: "real64",
                    doc: Some(
                        "Relaxation time",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ViscoModifiedCamClay",
            doc: None,
            fields: [
                Field {
                    name: "defaultCslSlope",
                    type_name: "real64",
                    doc: Some(
                        "Slope of the critical state line",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultDensity",
                    type_name: "real64",
                    doc: Some(
                        "Default Material Density",
                    ),
                    required: true,
                },
                Field {
                    name: "defaultDrainedLinearTEC",
                    type_name: "real64",
                    doc: Some(
                        "Default Linear Thermal Expansion Coefficient of the Solid Rock Frame",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultPreConsolidationPressure",
                    type_name: "real64",
                    doc: Some(
                        "Initial preconsolidation pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRecompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Recompresion Index",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRefPressure",
                    type_name: "real64",
                    doc: Some(
                        "Reference Pressure",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultRefStrainVol",
                    type_name: "real64",
                    doc: Some(
                        "Reference Volumetric Strain",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultShearModulus",
                    type_name: "real64",
                    doc: Some(
                        "Elastic Shear Modulus Parameter",
                    ),
                    required: false,
                },
                Field {
                    name: "defaultVirginCompressionIndex",
                    type_name: "real64",
                    doc: Some(
                        "Virgin compression index",
                    ),
                    required: false,
                },
                Field {
                    name: "relaxationTime",
                    type_name: "real64",
                    doc: Some(
                        "Relaxation time",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "WillisRichardsPermeability",
            doc: None,
            fields: [
                Field {
                    name: "dilationCoefficient",
                    type_name: "real64",
                    doc: Some(
                        "Dilation coefficient (tan of dilation angle).",
                    ),
                    required: true,
                },
                Field {
                    name: "maxFracAperture",
                    type_name: "real64",
                    doc: Some(
                        "Maximum fracture aperture at zero contact stress.",
                    ),
                    required: true,
                },
                Field {
                    name: "refClosureStress",
                    type_name: "real64",
                    doc: Some(
                        "Effective normal stress causes 90% reduction in aperture.",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ElementRegions",
            doc: None,
            fields: [],
            children: Some(
                [
                    "CellElementRegion",
                    "SurfaceElementRegion",
                    "WellElementRegion",
                ],
            ),
        },
        ComplexType {
            name: "CellElementRegion",
            doc: None,
            fields: [
                Field {
                    name: "cellBlocks",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: true,
                },
                Field {
                    name: "coarseningRatio",
                    type_name: "real64",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "materialList",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of materials present in this region",
                    ),
                    required: true,
                },
                Field {
                    name: "meshBody",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Mesh body that contains this region",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "SurfaceElementRegion",
            doc: None,
            fields: [
                Field {
                    name: "defaultAperture",
                    type_name: "real64",
                    doc: Some(
                        "The default aperture of newly formed surface elements.",
                    ),
                    required: true,
                },
                Field {
                    name: "faceBlock",
                    type_name: "groupNameRef",
                    doc: Some(
                        "The name of the face block in the mesh, or the embedded surface.",
                    ),
                    required: false,
                },
                Field {
                    name: "materialList",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of materials present in this region",
                    ),
                    required: true,
                },
                Field {
                    name: "meshBody",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Mesh body that contains this region",
                    ),
                    required: false,
                },
                Field {
                    name: "subRegionType",
                    type_name: "geos_SurfaceElementRegion_SurfaceSubRegionType",
                    doc: Some(
                        "Type of surface element subregion. Valid options: {faceElement, embeddedElement}.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "WellElementRegion",
            doc: None,
            fields: [
                Field {
                    name: "materialList",
                    type_name: "groupNameRef_array",
                    doc: Some(
                        "List of materials present in this region",
                    ),
                    required: true,
                },
                Field {
                    name: "meshBody",
                    type_name: "groupNameRef",
                    doc: Some(
                        "Mesh body that contains this region",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "ParticleRegions",
            doc: None,
            fields: [],
            children: Some(
                [
                    "ParticleRegion",
                ],
            ),
        },
        ComplexType {
            name: "ParticleRegion",
            doc: None,
            fields: [
                Field {
                    name: "materialList",
                    type_name: "string_array",
                    doc: Some(
                        "List of materials present in this region",
                    ),
                    required: true,
                },
                Field {
                    name: "meshBody",
                    type_name: "string",
                    doc: Some(
                        "Mesh body that contains this region",
                    ),
                    required: false,
                },
                Field {
                    name: "particleBlocks",
                    type_name: "string_array",
                    doc: Some(
                        "(no description available)",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Included",
            doc: None,
            fields: [],
            children: Some(
                [
                    "File",
                ],
            ),
        },
        ComplexType {
            name: "File",
            doc: None,
            fields: [
                Field {
                    name: "name",
                    type_name: "path",
                    doc: Some(
                        "The relative file path.",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Parameters",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Parameter",
                ],
            ),
        },
        ComplexType {
            name: "Parameter",
            doc: None,
            fields: [
                Field {
                    name: "value",
                    type_name: "string",
                    doc: Some(
                        "Input parameter definition for the preprocessor",
                    ),
                    required: true,
                },
                Field {
                    name: "name",
                    type_name: "groupName",
                    doc: Some(
                        "A name is required for any non-unique nodes",
                    ),
                    required: true,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "Benchmarks",
            doc: None,
            fields: [],
            children: Some(
                [
                    "crusher",
                    "lassen",
                    "quartz",
                ],
            ),
        },
        ComplexType {
            name: "crusher",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Run",
                ],
            ),
        },
        ComplexType {
            name: "Run",
            doc: None,
            fields: [
                Field {
                    name: "args",
                    type_name: "string",
                    doc: Some(
                        "Any extra command line arguments to pass to GEOSX.",
                    ),
                    required: false,
                },
                Field {
                    name: "autoPartition",
                    type_name: "string",
                    doc: Some(
                        "May be 'Off' or 'On', if 'On' partitioning arguments are created automatically. Default is Off.",
                    ),
                    required: false,
                },
                Field {
                    name: "meshSizes",
                    type_name: "integer_array",
                    doc: Some(
                        "The target number of elements in the internal mesh (per-process for weak scaling, globally for strong scaling) default doesn't modify the internalMesh.",
                    ),
                    required: false,
                },
                Field {
                    name: "name",
                    type_name: "string",
                    doc: Some(
                        "The name of this benchmark.",
                    ),
                    required: true,
                },
                Field {
                    name: "nodes",
                    type_name: "integer",
                    doc: Some(
                        "The number of nodes needed to run the base benchmark, default is 1.",
                    ),
                    required: false,
                },
                Field {
                    name: "scaleList",
                    type_name: "integer_array",
                    doc: Some(
                        "The scales at which to run the problem ( scale * nodes * tasksPerNode ).",
                    ),
                    required: false,
                },
                Field {
                    name: "scaling",
                    type_name: "string",
                    doc: Some(
                        "Whether to run a scaling, and which type of scaling to run.",
                    ),
                    required: false,
                },
                Field {
                    name: "tasksPerNode",
                    type_name: "integer",
                    doc: Some(
                        "The number of tasks per node to run the benchmark with.",
                    ),
                    required: true,
                },
                Field {
                    name: "threadsPerTask",
                    type_name: "integer",
                    doc: Some(
                        "The number of threads per task to run the benchmark with.",
                    ),
                    required: false,
                },
                Field {
                    name: "timeLimit",
                    type_name: "integer",
                    doc: Some(
                        "The time limit of the benchmark.",
                    ),
                    required: false,
                },
            ],
            children: None,
        },
        ComplexType {
            name: "lassen",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Run",
                ],
            ),
        },
        ComplexType {
            name: "quartz",
            doc: None,
            fields: [],
            children: Some(
                [
                    "Run",
                ],
            ),
        },
    ],
}